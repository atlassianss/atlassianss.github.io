<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hume</title>
  
  
  <link href="https://github.com/atom.xml" rel="self"/>
  
  <link href="https://github.com/"/>
  <updated>2022-03-10T01:14:33.625Z</updated>
  <id>https://github.com/</id>
  
  <author>
    <name>子非鱼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql使用</title>
    <link href="https://github.com/2022/03/10/mysql%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/2022/03/10/mysql%E4%BD%BF%E7%94%A8/</id>
    <published>2022-03-10T01:13:58.000Z</published>
    <updated>2022-03-10T01:14:33.625Z</updated>
    
    <content type="html"><![CDATA[<p><strong>创建数据库</strong><br>1.创建数据库：<br>//create database [if not exists]数据库名 [default charset utf8 collate utf8_general_ci];<br>mysql&gt; create database my1905 character set utf8;<br>Query OK, 1 row affected (0.00 sec)<br>2.显示数据库：<br>mysql&gt; show databases;<br>3.切换到数据库：<br>mysql&gt; use my1905;<br>4.查看当前数据库有哪些数据表：<br>mysql&gt; show tables;<br>5.删除数据库：<br>mysql&gt; drop database if exists my1905;<br><strong>数据类型</strong><br>char(10)–&gt;定长的字符串<br>“wangergou “<br>“abc “<br>varchar(10)–&gt;变长<br>“wangergou”<br>“abc”<br><strong>数据表的操作</strong><br>1.创建数据库：<br>mysql&gt; create database if not exists my1905 default charset utf8 collate utf8_ge<br>neral_ci;<br>2.创建数据表：<br>mysql&gt; create table users(<br>    -&gt; id int(4) primary key auto_increment,<br>    -&gt; username varchar(20),<br>    -&gt; pwd varchar(30));<br>3.查看表结构：desc–&gt;describe<br>mysql&gt; desc users;<br>4.显示检表语句：<br>mysql&gt; show create table users;<br>5.插入一条数据：<br>mysql&gt; insert into users(id,username,pwd) values(1,’admin’,’123456’);<br>Query OK, 1 row affected (0.02 sec)<br>6.查询数据：<br>mysql&gt; select * from users;<br><strong>修改表结构</strong><br>1.添加字段:add<br>mysql&gt; alter table users add(<br>    -&gt; age int(4),<br>    -&gt; birthday date);<br>2.修改已有字段的数据类型：modify<br>mysql&gt; alter table users modify age float(4,1);<br>注意点：并不能随意的更改已有列的数据类型。尤其是表中已经有数据了<br>A：兼容类型：长度可以从小到大，不能已有的数据越界。<br>B：不兼容类型：varchar–&gt;int，更改失败。<br>3.更改列的名字：change<br>mysql&gt; alter table users change pwd password varchar(30);<br>4.删除某列：drop<br>mysql&gt; alter table users drop birthday;<br>5.表重命名：rename to<br>mysql&gt; alter table users rename to user2;<br>mysql&gt; rename table user2 to user3;<br>6.删除表：drop table<br>mysql&gt; drop table user3;<br><strong>插入数据</strong><br>1.插入数据：<br>insert into 表名(列1，列2，列3.。。) values(值1,值2,值3.。。)<br>全列插入：如果有所有列都要插入数据，那么可以省略列的名字<br>缺省插入：如果有某一个或一些字段没有数值，那么就要写清楚列名和值。<br><strong>修改数据</strong><br>语法结构：<br>update 表名 set 列1=值1,列2=值2…[where 条件];<br><strong>SQL</strong><br>结构化查询语言(Structured Query Language)。操作数据库的。<br>DDL语言：数据定义语言(用于定义数据的表结构)Data Definition Language<br>创建数据表：create table 表名<br>修改数据表：alter table 表名<br>删除数据表：drop table 表名<br>DML语言：数据操纵语言(用于操作数据表中的数据)DML - Data Mainpulation Language<br>添加数据：insert<br>修改数据：update<br>删除数据：delete<br>DQL语言：数据查询语言(专门用于数据的查询)DQL - Data Query Language<br>查询数据：select<br><strong>总结</strong><br>数据库：<br>​ 安装和卸载(看文档)<br>​ 数据库的登录：<br>​ 1.dos窗口：mysql命令—&gt;配置环境变量<br>​ -u 用户名<br>​ -p 密码<br>​ 2.mysql的命令行：直接输入密码即可<br>​ 3.通过一些可视化工具：比如navicat<br>1.show databases;<br>2.create database if not exists my1905 character set utf8;<br>​ default charset utf8 collate utf8_general_ci;<br>3.use my1905;<br>4.create table student(id int(4) primary key auto_increment，name varchar(30),sex varchar(2))；<br>5.alter table 表名<br>​ add 列名 数据类型<br>​ modify 列名 数据类型<br>​ change 原列名 新列名 数据类型<br>​ drop 删除列<br>6.drop table 表名;<br>7.insert into 表名(列1，列2，列3.。。) values(值1，值2，值3.。。。)<br>​ 全列插入：<br>​ 同时插入多条：<br>8.update 表名 set 列1=新值，列2=新值 [where 修改条件];<br>​ where 后 的是表达式是boolean<br>​ =,!=,&lt;&gt;,&gt;,&lt;,&gt;=,&lt;=,between and, and , or ,not ….<br>​ null—&gt; is null ,is not null<br>9.delete from 表名 where 删除条件<br>约束：主键，外键<br>查询：简单查询，复杂，多表</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;创建数据库&lt;/strong&gt;&lt;br&gt;1.创建数据库：&lt;br&gt;//create database [if not exists]数据库名 [default charset utf8 collate utf8_general_ci];&lt;br&gt;mysql&amp;gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://github.com/2021/10/11/%E6%96%B0%E8%B5%84%E6%9C%AC%E8%AE%BA/"/>
    <id>https://github.com/2021/10/11/%E6%96%B0%E8%B5%84%E6%9C%AC%E8%AE%BA/</id>
    <published>2021-10-11T05:25:04.974Z</published>
    <updated>2021-10-11T05:25:05.157Z</updated>
    
    <content type="html"><![CDATA[<p><strong>人类经济新时代</strong><br>人们经常将2008年金融海啸与1929年华尔街股市崩溃以及随后波及全球的大萧条相提并论。然而，2008年全球金融海啸以及随后的经济衰退，其范围之广，远超20世纪30年代的全球大萧条。只是世界各国经过数十年的较快经济增长，承受危机冲击和损失的能力大大增强了；世界各国政府尤其是中央银行应对危机的经验更加丰富，手段更加多样，反应更加快捷了，至少部分程度上遏制和缓和了危机的巨大破坏力。<br>金融危机和经济危机自有其内在的规律。对比2008年之后的大衰退和20世纪30年代的大萧条，我们会看到许多惊人的相似之处。</p><p>首先是经济增速急剧下降乃至负增长，随后就是漫长的低速增长。1929年华尔街崩盘，立刻导致主要经济体的产出大幅度萎缩。仅1930年一年时间里，当时主要经济体的工业产出就出现大幅度下降。其中美国下降30%，德国下降25%，英国下降20%。1929~1933年的4年时间里，世界主要经济大国的真实国内生产总值下降超过25%。与此类似，2008年金融海啸爆发之后的三个季度里，世界贸易和主要经济体的国内生产总值皆出现大幅度负增长。</p><p>其次是失业率急剧飙升。伴随经济危机和经济衰退的失业率飙升，是历次重大经济危机最显著的特征，是大萧条最可怕的社会性传染病，直接导致许多国家政府垮台、政权更替、社会动荡、极端主义思潮蜂拥而起。1929年华尔街崩盘之后一年时间里，各国失业人口直线上升。美国失业人口高达500万，英国高达200万，德国高达450万。到1933年，全球主要经济体的成年男性劳动力失业率高达25%。同样，2008年金融危机爆发之后，失业率飙升亦是最骇人听闻的事实。2009年美国失业率超过10%，其中黑人劳动力失业率超过16%，西班牙裔劳动力失业率超过12%。危机过去5年多之后，美国失业率依然高达7.3%，危机发生6年后，美国失业率才降到7%以下。而且失业率下降的重要原因之一是部分失业人口永久性离开劳动力市场，不再被纳入政府失业人数的统计范畴。欧盟和欧元区的情况则更加严峻。经过全球金融危机和主权债务危机的连续冲击，欧元区平均失业率达到12.2%。其中西班牙、葡萄牙、希腊、爱尔兰等遭受危机最沉重打击的国家，平均失业率超过20%，年轻人失业率最高甚至接近50%，比20世纪30年代的大萧条还要严重！创造就业，降低失业，成为世界各国政府的头号重大任务，亦是头号重大难题。</p><p>再次是实体经济的信用萎缩。1929~1933年，美国银行信用收缩幅度高达40%。许多国家银行体系完全崩溃。发展中国家几乎都出现了债务违约。中欧和东欧普遍违约。德国当时是世界第三大经济体，国际债务全面违约。银行信用和债务危机波及世界每一个角落。与此类似，2008年金融危机之后，各国尤其是发达国家信用规模急剧萎缩，特别是针对房地产市场和实体经济（譬如制造业和服务业）的信用规模快速萎缩。尽管各国量化宽松货币政策对信用萎缩趋势有所缓解，然而量化宽松所释放的天文数字般的流动性，绝大多数都滞留于银行体系，没有转化为实体经济的信用供给或信用能量。</p><p>最后是通货紧缩。1929年华尔街崩溃之后，原本已经开始的通货紧缩急剧恶化。仅仅一年时间里，包括咖啡、棉花、橡胶等在内的全球大宗商品价格平均下降30%，立刻导致大宗商品主要生产国首先出现经济衰退！巴西、阿根廷、澳大利亚是当时全球主要的大宗商品供应国，经济衰退开始最早。1930~1933年，全球商品价格下降幅度达到50%，消费物价指数下降30%，工资水平下降超过1/3。同样，2008年金融危机爆发之后，主要大国先后陷入持续的通货紧缩恶性循环之中而难以自拔。美国直到2012年才出现逐渐摆脱通货紧缩的迹象，欧元区则持续陷入通缩陷阱，迫使欧央行史无前例地开启负利率货币政策。</p><p>令人吃惊的事实是，2008年金融危机之后，世界主要中央银行持续量化宽松长达5年之后，发达经济体的通货紧缩反而更加严峻。到2013年底，欧元区通胀水平下降到只有0.7%，远低于欧洲央行设定的2%的目标通胀率水平。美国核心通胀率也只有1.5%，美联储设定的目标却是2%。持续的量化宽松没能成功地刺激经济“重新通胀”（reflate）起来，以至于英国《经济学人》杂志2013年11月发表文章《通货紧缩的困扰》，呼吁各国中央银行采取更大规模的量化宽松，或者探讨其他更具威力的非常规货币政策，包括中央银行实施负利率货币政策。所谓“负利率货币政策”，就是中央银行对商业银行的存款准备金不仅不支付利率，而且还要征收费用，以此迫使商业银行向企业和家庭个人放款。其实早在2008年金融海啸爆发不久，就有学者建议美联储直接入市购买房地产，甚至直接向经济体系发放贷款。当然，后来美联储没有采取如此极端的货币政策，而是采取了零利率的量化宽松货币政策。</p><p>与20世纪30年代的金融危机和大萧条相比，2008年的金融海啸和随后的大衰退有两个显著不同。其一是2008年金融海啸之后，各国政府紧急出手挽救银行和金融机构，避免了全球范围内的银行和金融机构大规模破产倒闭。其二是以美联储为首的各国中央银行，打破一切中央银行的禁忌和惯例，大规模实施量化宽松货币政策。各国中央银行的资产负债规模均创造史无前例的扩张纪录。<br><em>人类经济体系：全球化+第三次工业革命+金融资本主义</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;人类经济新时代&lt;/strong&gt;&lt;br&gt;人们经常将2008年金融海啸与1929年华尔街股市崩溃以及随后波及全球的大萧条相提并论。然而，2008年全球金融海啸以及随后的经济衰退，其范围之广，远超20世纪30年代的全球大萧条。只是世界各国经过数十年的较快经济增长</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>逃不开的经济周期</title>
    <link href="https://github.com/2021/10/04/%E9%80%83%E4%B8%8D%E5%BC%80%E7%9A%84%E7%BB%8F%E6%B5%8E%E5%91%A8%E6%9C%9F/"/>
    <id>https://github.com/2021/10/04/%E9%80%83%E4%B8%8D%E5%BC%80%E7%9A%84%E7%BB%8F%E6%B5%8E%E5%91%A8%E6%9C%9F/</id>
    <published>2021-10-04T14:39:21.000Z</published>
    <updated>2021-10-04T14:41:00.796Z</updated>
    
    <content type="html"><![CDATA[<p>这本逃不开的经济周期，进一步详尽地解释了房地产、股票、债券、黄金、汇率、大宗商品期货、收藏品等资产市场的特性，揭示了经济循环中各类资产的阶段表现及互动影响，帮助我们更精确地掌握市场脉动，顺应经济趋势，在经济萧条时捕捉市场机会，从而获得高收益。 </p><p>这本书有三大部分，第一是经济周期如何被发现的，第二是将经济周期的规律，详细的介绍了三大周期，基钦周期，朱格拉周期还有康波周期，第三是将如何利用三大周期的共振来获利，避免盲目而造成亏损。在最后一部分我们会介绍，房地产，收藏品，贵金属，商品期货，股票债券还有外汇交易的资产价格传导逻辑。那么我们现在就马上进入这本书的第一部分，经济周期是怎么被发现的。</p><p>这就不得不提一个人叫做约翰劳，他是个天生的赌徒，14—17岁跟着父亲一起学习银行业务，在这期间他展现了自己的数字才华，1688年，父亲去世，他继承了遗产，但是原来的业务已经不能满足他的野心，于是他决定离开苏格兰去伦敦。</p><p>到了伦敦之后，他很快又泡在赌场里，并通过自己的数学才华赢得了不少钱，加上人长得比较帅，又有钱，于是得到了很多女性的崇拜，接着他就到处撩妹，结果突然之间倒霉了，先是在赌场里，越玩越大，结果最后输了个精光，让他不得不抵押了房子，之后撩妹也撩到了一个大麻烦，一个叫威尔逊的青年手提利剑，要找他决斗，因为约翰劳调戏了威尔逊的女朋友。双方在打斗过程中，约翰劳意外刺死了威尔逊，当天晚上警察就把约翰劳抓了，所以没事千万别打架，打赢了住监狱，打输了进医院。约翰劳就是打赢了，结果差点被以谋杀罪，被绞死。后来幸运的改判了过失杀人，这才免死。但是死者威尔逊的亲属不依不饶要上诉，这可把约翰劳吓坏了，他决定要越狱逃走，但他是如何逃走的历史没有记载，反正这个人跑出来了。而且他跨过了英吉利海峡，逃向了欧洲大陆，这才开始他灿烂又悲壮的一生。</p><p>约翰劳经过此次浩劫，好像心性大变，他在欧洲大陆游历的时候，对各国的财政货币很感兴趣，1700年，他29岁的时候回到故乡爱丁堡，推行他的金融理念，那就是国家要繁荣，就要放弃金银货币，而推行纸币。约翰劳的理由就是，现在金银当货币，供应量太少，所以利率就很高，这限制了经济发展。解决办法就是多发货币，降低利率，而且只要国家开足马力生产制造，也并不会发生通货膨胀。他还向苏格兰建议，建立土地银行，该银行可以发行银行券，等于就是用土地来换财富，发行货币的思路。从而减轻国家的债务负担，增加货币供给。但是他的建议，在苏格兰并没有得到支持。所以他失望的又回到欧洲大陆。</p><p>他在荷兰德国，匈牙利，意大利等等国家走了一圈，但是他始终没有改变喜欢撩妹的坏习惯，竟然有一次还带着一个叫凯瑟琳的有夫之妇私奔了。但这个爱好，也让他结识了不少有权有势的人，比如法国的奥尔良公爵，这人跟约翰劳一样，高富帅，还有权力，他们没事就在一起讨论撩妹心得。</p><p>在这期间，约翰劳还是念念不忘他那个纸币梦想，说来也真是太巧了，1714年路易十四死掉了，继位的国王只有7岁，而这时候他那个撩妹的朋友奥尔良公爵，就这么登上了历史舞台，成为了摄政王，这还真是幸运的没地方说理去。这个奥尔良公爵啥也不懂，但他竟然十分相信这个一起撩妹的朋友。</p><p>之所以这样，是因为路易十四挥霍无度，造成了法国早已经资不抵债，每年的财政盈余在付息之前，只剩下了300万里弗尔，而要支付的利息高达9000万，所以其实法国已经财政崩溃了，奥尔良大公甚至想到了反腐败这一招，查抄了政府官员资产，凑来凑去其实也就凑了两年的利息。现在摆在奥尔良公爵前面的路就是两条，一个宣布国家破产，自己很可能被干掉，另一个就是考虑约翰劳的方法，发行纸币。</p><p>于是奥尔良大公和约翰劳深谈了一次，此时的约翰劳已经是一个44岁的富豪。约翰劳就把他20年前，发行纸币，建立土地银行的想法，完整的提了一遍。奥尔良大公，顺坡下驴，当然也就同意了。而且说干就干。</p><p>1716年劳氏银行成立，他向外发放银行券，而法国政府规定，所有税收都要用劳氏公司的银行券缴纳，这就相当于劳氏公司拥有了货币发行权。而劳氏公司的股份，25%是硬币支付，75%是债务支付，债务就是法国政府发行的债券。这部分债券，在各家金融机构手上，如今这些债券，由于面临巨大违约风险已经贬值了80%，也就是原来100面值，现在只值20，原来的利息是4.5%，而有效的实际利率，就是4倍，也就是18%。所以对于投资者来说，买这样的垃圾债，承担了血本无归的风险，但是如果法国政府缓过来，收益其实是很高的。相当于劳氏公司，用股权的方式把，法国政府的债务逐渐吸收回来。但一开始也是微不足道，20亿的债务比，劳氏公司杯水车薪。不过约翰劳已经有了完备的计划。他就是要先制造纸币效果。</p><p>纸币一开始采用促销的方式，溢价1%发行，也就是说你花100硬币买的等额纸币，当时就值101，结果很快刺激了套利。对纸币的需求与日剧增，1717年，劳氏公司的纸币价格已经上升到115，这时候纸币开始深入人心。约翰劳建议奥尔良大公，设立一家公司，让这家公司获得两个殖民地的贸易垄断权。这就是金融史上著名的密西西比计划，这个公司也就是密西西比公司。</p><p>此时的奥尔良大公也经完全尝到了甜头，既然纸币价格不断上涨说明供不应求，那么他就下令银行多印纸币，纸币印的越多，他赖掉的债务也就越多。这一下甚至多印了16倍，让约翰劳都有点感到恐惧。</p><p>1719年约翰劳正在全力启动他的密西西比计划，包括殖民地的贸易专享权，为期9年的皇家造币权。9年的国家税负征收权，还有烟草专卖权，就相当于把商务部，央行，财政部，烟草总局打包上市，那么你觉得这个公司得值多少钱。此时约翰劳还向外宣布，预期每年光分红就达到40%，而大家买这家公司的股票，一开始还是得用法国政府的行政债权去购买，用垃圾债券去买优质公司的股票，投资者简单一算，预期收益率高达200%，所以一时间投资者疯了一样的去抢购，当时为了买到密西西比公司的股票，人群在大街上彻夜排队，比现在摇号买房可火爆多了。最后股票被超额认购6倍，股票还没发出来就涨了10倍。于是奥尔良大公赶紧下令增发股票，这一增发就是原来的12倍。</p><p>此时如果是理性的投资者应该十分清楚，这次增发之后，股东权益只有原来的13分之一，即便是200%的收益能够兑现，也已经所剩无几。但是既然公众的气氛被调动起来了，那就完全不管不顾了。结果在增发12倍的情况下，仍然3倍超额认购。</p><p>于是奇迹发生了，经济濒临崩溃的法国，由于密西西比计划经济迅速腾飞，奢侈品涨价，工匠工资翻了4倍，失业率大幅下降。到处都在盖新房，只要肉眼能够看到的东西，都在不断的涨价。然后就是大量人去抢购物资，东西总是供不应求。在巴黎经济更热，甚至新马车都卖的脱销。搞得交通经常崩溃。</p><p>股票价格扶摇直上，但是也会有一些震动，比如此时密西西比公司，已经更名为印度公司，他的股票就不止一次的大幅下跌。但随后又都被强力拉起。所以每一次大跌其实都是强化了人们逢低买入的信心。最后大家形成一种共识，只要股价大跌，就是进场的绝佳机会。此时的约翰劳非常欣慰，他的金融理念终于创造了持续的繁荣，创造了法国经济的繁荣。他也成为了法国的偶像，他买下了一个花园，建立了500多个帐篷，形成了交易所，让人们在这里交易股票。随着交易越来越便利，人们已经越来越疯狂。印度公司的股价已经从150里弗尔涨到了8000里弗尔，而此时奥尔良大公还在要求不断的加印纸币，他的想法很单纯，既然是纸币让经济繁荣，那么为什么不更繁荣一点？</p><p>此时有一个王子也想买印度公司的股票，但是约翰劳没有同意，这不禁激怒了他，于是这个王子就做了一件让人瞠目结舌的事情，他拉着两车的纸币来到银行门口，要求兑换成硬币。这下奥尔良大公很愤怒，又命令他把钱都退了回去，不过这么一个小插曲让公众开始产生了那么一点小怀疑，银行能兑换出那么多的硬币吗？如果都去兑换，银行会怎么办？随后几个月，一些先知先觉的，公众眼里的大傻子，从股市上率先抽身，在1万里弗尔的价格附近卖掉了印度公司的股票。然后又开始用纸币去悄悄兑换成硬币，并且逐渐收购黄金，白银还有珠宝。最后把这些黄金白银，一点一点的运往英格兰和荷兰，还有人把股票卖了换成金币，然后自己驾着马车逃到了比利时。就这样越来越多的人，赚够了，然后带着真实的世界公认的金银货币，离开了法国。这样一来法国的货币流通就慢了下来。</p><p>此时奥尔良大公，为了维持信心，连续调高纸币兑换价，他本想让那些跑掉的人后悔去吧。但是发现根本没什么效果。随后他又禁止收购黄金白银，抓到就罚没财产。然后还继续加印纸币。但此时以回天乏术，他越是禁止，就越是引发恐慌。人们对于纸币和股票而信心就越是崩溃。</p><p>此时大家都在想，印度公司有什么贸易，在那边除了喂蚊子，和被印第安人杀死，还能干什么？</p><p>于是印度公司的股票雪崩，50万人亏本，成千上万人破产。欠债的比比皆是，奥尔良大公越是限制硬币，人们就越想要硬币，股票暴跌，银行挤兑，愤怒的人们上街闹事。约翰劳为了避祸，躲进了王宫。</p><p>最后法国已经支付不起金属货币了，于是他们又想到了一招，那就是用铜币来代替贵金属。但显然老百姓不能满意，于是骚乱还在持续。后来法国强迫富人去接盘印度公司的股票，但吓得富人们纷纷逃离，于是边境开始抓人，扣留任何想出境的人。</p><p>约翰劳最后灰溜溜的跑到了威尼斯，他在亲手制造了法国的密西西比泡沫之后，把这个国家推入了崩溃的深渊，而在法国之后，英国也上演了类似的疯狂，爆发了南海泡沫。大科学家牛顿也在这次泡沫中损失惨重。南海泡沫爆发的时候，约翰劳在威尼斯，他一心想返回法国，重建信用体系，但是1723年，奥尔良大公去世，约翰劳的梦想也就破灭了。他只能通过赌博度过余生。他怎么也想不明白，为什么自己的体系会遭遇崩溃。</p><p>就在奥尔良大公去世这一年，一个叫做亚当斯密的小孩出生了，17岁他进入牛津大学学习，毕业后成了一个格拉斯哥大学道德哲学的教授。并出版了一本著名的书，叫做道德情操论，于是他声名大振，被巴克卢公爵以2倍的薪水，聘请为家庭教师。并带他一起去游学了欧洲。在法国的时候他吸收了魁奈的重农主义思想，随后斯密返回家乡，专心写书。不久英国爆发了工业革命，越来越多的行业，使用了机器。纺织机，蒸汽机还有煤炭的生产，推动英国工业腾飞。</p><p>1766-1783年，斯密不知不觉的写了一部经济学著作，叫做国民财富的性质和原因的研究，简称叫做国富论，斯密阐述了社会分工是一些国家经济产出增长的主要原因。斯密第一次提出了看不见的手的概念，他认为经济向好不是来自谁的恩惠，而是每个人出于自己利益的精打细算。</p><p>斯密的理论一出，就迅速引来了无数的拥趸。其中有一个人叫做桑顿。他跟约翰劳一样，都是跟父亲学习会计出身。后来成为了英格兰的一位银行家。这个桑顿突然发现，无论哪个时期，在过了几年，相对繁荣的好日子之后总会经历一场恐慌。发现从1702年到1791年一共经历了18次经济危机。每一次都能够复苏。但是每一次复苏，也都是几年的时间。之后又会发生新的危机摧毁经济。</p><p>1793年就又爆发了一次危机，桑顿的银行一度很困难。后来英格兰银行发行货币后。桑顿的银行才获救。在这之后他就重点的研究，为什么会这样？为什么会周而复始地爆发危机？又该如何阻止危机呢？是该交给斯密的看不见的手呢，还是应该向英格兰银行那样进行干预呢？就在他考虑这个问题之后，又一次危机爆发，英格兰银行的储备黄金，从500万英镑下降到125万英镑，随后英格兰银行采取了限量供应金属货币。但这造成了灾难性的后果。1797年，英格兰银行承认失败并宣告破产。</p><p>随后英国人开始追查原因。桑顿成为了私人银行家唯一一个代表。此时他一开口震惊了世界。后来他的理论汇编成一本书，叫做大不列颠票据信用。这本书要比同时代的书水平高出一筹。于是桑顿也在历史上出名了。他被后世的经济学家成为中央银行之父。从桑顿开始，大家习惯用货币总量，货币流通速度。以及利率来考察货币环境。比如我们现在经常用的M2货币供应量，这都是桑顿的理论。桑顿认为，中央银行可以用高利率来，防止资金外逃，也可以降低资金的流通速度，而降低利率就会刺激经济活动。而公众的预期也会影响利率，如果大家预期通胀爆发，那么利率水平就会提高，此外，信用也是一个重要参考指标，信用的收缩，比如减少贷款，会造成萧条， 而信用的扩张就会推动经济增长。桑顿觉得看不见的手不止一只，而是两只。一只在推动经济往前发展。另外一只呢，则会让经济有脱轨的冲动。这也成为最早的经济周期理论。</p><p>后来有一个叫萨伊的商人，也是亚当斯密的粉丝，他解答了一个著名的问题，叫做萨伊定律，说的是生产商品简单，卖掉商品困难，为什么我们不能创造一个所有东西都能卖掉的社会呢？</p><p>大量提供货币可以解决这个问题吗？答案是不能，货币只是一个交换的媒介，货物通过货币实现交换，当大家都在生产一种东西的时候，也就意味着，这个东西过剩，而其他的东西开始稀缺，所以最终价格就会暴跌。你不可能永远维持他的繁荣，因为最后没有东西可以跟他交换了 。</p><p>还有一位大师，这就是大卫李嘉图，他是股票经纪人也是金融家，他提议通货膨胀是因为纸币超额发行，应该恢复金本位，此时在英国掌舵金融的正是桑顿，桑顿同意了李嘉图的想法，但没想到很快银行就遭遇了挤兑，差点把他的银行给挤兑破产了。经过这一次浩劫，桑顿就叛变了，不再同意李嘉图的想法，桑顿此时觉得任何货币体系都不能实现自我稳定，所以还得主动积极管理。后来1820年，英格兰银行曾经想试图试一下李嘉图的想法，但很快就引发了新危机，所以马上终止了计划。</p><p>李嘉图有个好友叫做詹姆斯穆勒，很支持他的观点，而詹姆斯穆勒有个儿子叫做斯图加特穆勒，自小耳濡目染，也成了李嘉图的支持者。后来他写了一本书叫做政治经济学的若干问题，发展了李嘉图的理论，他认为短期经济受到预期影响，一旦有人预期价格上涨，就会大量买进，而这些买入行为就会推高价格，结果反过来会刺激那些观望者买入，于是就出现了更大幅度的上涨，这是个恶性循环。这就解释了为什么经济会从繁荣而走向脱轨。</p><p>这时候发生了1837年的经济危机，刚好支撑了穆勒的观点，当时的美国总统安德鲁杰克逊是极其不信任纸币的人，1832年美国的货币流通总量是5900万美元，而到了1836年就达到了1.4亿美元，4年翻了一倍还多。这些钱都流向实体经济了吗？并没有，钱都被拿去炒房了。</p><p>当时美国的房价暴涨，基本两三年就涨了一倍，全国各地都是如此，而总统杰克逊，签订法令，让买地必须使用真金白银，禁止使用纸币去做房地产投机。另外，政府要把财政盈余分配给各个州，这就意味着每隔3个月就要从纽约的主要银行，提走900万美元。然后奇怪的事情发生了，房地产市场瞬间变得有价无市，房子没有下跌太多，但是几乎没有交易了。现在没人有钱再去买这些东西了。而且债券和抵押品也都卖不掉了。之后大量银行开始破产，有个叫霍恩的美国人写日记记载，当时他在百老汇旁边买了一块地，花了1.5万美元，买完后他就觉得很爽，然后就去旅游了，结果回来后发现美国变天了。房子再也卖不掉了。</p><p>随后美国财政部从纽约主要银行提款900万美元，这就引发了一连串破产事件，街上逐渐开始骚乱。房子被大量抛售，银行纷纷破产。美国西北部的失业率达到20%，有记载芝加哥的一块土地，1836年卖到1.1万美元，而到了1840年，连100美元都不到了。</p><p>我们再说回到英国，此时的穆勒认识了一位奥弗斯通勋爵，他是当时英格兰最成功的银行家，这个人留下来一段话，静止，增长，信心，兴旺，激奋，发展过快，震荡，压力，停滞，再次进入静止而告终。这段话就是最早关于经济周期的定义。正是纸币的出现，刺激了人的欲望，而欲望的增加，才让经济产生了波动，以前我们用贵金属的时候，世界几乎是匀速前进的，但后来约翰劳给这个世界带来了纸币，我们为了获得更繁荣的增长，通常都会让纸币的数量超过商品的数量，这样确保让产品更好销售，从而刺激生产。但也恰恰是这个动作，让经济开始呈现周期波动。有繁荣就得有衰落，有上升就得有下降。那么我们还能回到纸币时代吗？答案是完全不可能了，因为货币数量已经是商品数量的不知道多少倍，如果现在回到金本位，全球任何一个央行都会破产。所以我们打开了这个潘多拉的魔盒，就要适应经济周期的波动，这已经变得不可避免，所以我们现在知道了原因，也发现了周期，更知道了他不可逆转，那么唯有想办法去尽量控制周期的波动，让他造成的伤害小一点。这就是本书下面要讲的内容。</p><p>1847年，英国又爆发了危机，这时候又有一个年轻人，在研究危机的棘手问题，他就是卡尔马克思，他发现在欧洲很多地方， 大家对于经济表示群情激奋，于是出现了共产主义起义，这确实给了马克思很多的启发。于是呢他就有了一个。雄心勃勃的计划。 不仅要说明资本主义制度的腐朽和共产主义制度的美好，更要为实现两种制度的转变提出明确的路线图，他决定先来剖析一下，资本主义市场经济体制下发生有规律的经济危机的内在机理。这就形成了那部著作，叫做《资本论》。他主要指出。技术革新经常会创造经济繁荣。技术革新又会让资本家添置更多的机器，但只有劳动才能创造价值，而由于劳动力与资本的比率下降，利润率也会随之下降。最后他还给出了一个判断，说雇佣工人的数量会越来越少。但是这个呢？显然是不准确的。资本主义社会反而让就业更加的充分了。</p><p>到了1873年，资本主义世界发生了更为严重的经济危机，先是一个黄金交易商人，利用美国财政部大量囤积黄金，市场流通有限的机会，他用自有资金，不断的收购市面上的黄金，推升金价，当老百姓发现黄金只涨不跌之后，纷纷要求买入，黄金价格过了146美元的瓶颈，就开始有人畅想1000美元了，然后这个黄金交易商，开始悄无声息的大量出货，由于所有人都在抢购，直到他出完货之后，黄金都在上涨。于是这个人又开始开空仓，囤积空单。等着黄金的致命一击，果然美国财政部，在黄金价格达到165美元的时候，突然宣布卖出黄金，一下市场就崩溃了。这个黄金商人瞬间赚了150万美元，而所有老百姓损失惨重。</p><p>但是大崩溃的主战场还不在这里，而是在铁路上，当时大家都在疯狂投资铁路，但实际上铁路已经过剩了，铁路股票价格虽然在上涨，但运费其实在不断的下降。然后铁路债券违约现象越来越多。随后，铁路债券被疯狂的抛售，每个人都希望赶紧脱手。而此时，美国财政部紧急召开会议，研究解决办法，最后一致同意，增加货币供给，向市场注入1300万美元。但是，危机远没有结束。这次大崩溃，让美国失业率上升到了50%的高位。</p><p>这2个事情也再次证明了穆勒的预言是正确的，信心很重要，因此投机也很重要。即使你不给他货币刺激，经济繁荣也会发生。相对应的繁荣过后也必然会发生萧条。所以这已经成为世界经济挥之不去的一个魔咒。在西方经济学有一句著名的话叫做萧条的唯一原因就是繁荣。这句话是谁说的呢？就是大名鼎鼎的法国人克莱门特朱格拉，也就是朱格拉周期的发现者。</p><p>1862年朱格拉发表了一本著作，具有革命意义，他与之前我们提到的那些人相比，已经认识到了，经济性的经济危机，并不是一些简单的相互独立的事件，而是经济组织内不稳定性，周期性重复发作的体现，换句话说，别人都在找每一次危机的原因，而朱格拉已经能把危机和繁荣串起来看了。</p><p>通过朱格拉的分析，经济每经历9-10年就会有一个周期，于是才有了那句话，萧条的唯一原因就是繁荣。所以发生萧条才是正常现象，反而没有发生萧条倒是哪里出了问题，而当时的主流观点则认为，发生萧条是之前哪些地方出了错误。比如垄断，滥发纸币，贸易保护等等。只有朱格拉认为，危机是正常的，是繁荣的持续反应。后来经济学大师熊彼得这么评价朱格拉，说他发现的才是新大陆，而别人发现的只是大陆附近的岛屿。而随后一众经济学家，追随朱格拉的步伐进行研究，有人觉得10年一周期，可能跟太阳黑子运动有关，有人还研究了货币数量论，因此才有了后来著名的费雪方程式，mv=pq，也就是货币数量X流通速度=商品服务价格X数量。货币数量提高，或者流通速度提高，由于商品数量不会快速增加，所以往往带来的就是商品和服务价格的大幅上升。至此，我们第一部分讲完了，从约翰劳创造纸币，到朱格拉已经发现了经济周期的规律。这是一个经济学发展演变的过程。世界经济也发生了本质的变化，下面我们进入第二部分，看看经济周期的规律到底是什么？</p><p>我们从20世纪初的美国说起，在1907年之前，美国迎来了空前的繁荣，最近10年出口翻倍，货币供应量也持续增长。当时的美国总统是西奥多罗斯福，他在1906年底发表讲话，我们仍然继续享有毫不夸张的空前繁荣。不过此时，一些人开始担心。之前1816年出现过危机，然后是1826年1837年，1847年，1857年，1866年。以及之前的1873年铁路危机。在那之后才平和了一些，而距离当时最近的一次危机发生在1895年。</p><p>在19世纪后期，黄金生产已经远远落后于经济增长。所有人都在想借钱投资。资金的需求方增多，于是呢，货币利率就开始自发的紧缩。1906年底，英国的利率从4%提高到了6%，而美国的利率则出现了大幅度的波动，从3%上升到了30%。利率上升对于债券就是灾难，长债没人买了，铁路大亨都察觉到了这个问题，所以他们警告政府必须要增加10亿美元的货币进入流通。否则会出现商业瘫痪。这确实不是危言耸听</p><p>就在1907年3月，美国牛市突然崩溃，很多股票瞬间下跌25%，5月份衰退正是开始，整个资本主义世界都开始了恐慌的迹象。面对这样的紧张局面，一个救世主出现了，这就是美国金融历史上神一样存在的jp摩根，是一个银行家，此时的摩根也遭受到了损失，而一些金融机构，每分每秒都在承受着暴击，这让他们必须马上联合起来采取行动，摩根马上召集几家银行开会，就一个主题，出钱！让大家必须在15分钟之内拿出2500万美元。这才保证了交易所没有破产。</p><p>随后摩根做了一次大胆的创新，他发明了手写的货币，老百姓俗称叫做打白条。他承诺这些白条，以后可以兑换成真实的货币，几天后纽约市长找他，说纽约政府已经资不抵债，摩根说银行可以帮你发行债券，但是钱要先用这种白条支付。对此市长似乎也别无选择。只能相信摩根。最终摩根的计划取得了效果，金融恐慌，被大量的白条托住了，道琼斯指数开始V型反转，从1907年10月的最低点39点，反弹到了危机爆发之前的高点，73点。</p><p>1908年的危机虽然过去，但在后面还有几次余震，直到1914年之后，才彻底回到繁荣的轨道上，在这期间人们在不断地反思，到底是怎么突然危机的呢？好像是投资太热，然后储蓄不足，钱少了，借钱的太多，银行就会提高利息，利息高了，很多企业就不赚钱了，很多债务就还不上了，然后投资就都会停止，于是就陷入了危机。</p><p>总体来说可以用两个词来概括问题所在，那就是投资过度，消费不足，这一般就是繁荣时候的景象，但是这两块有着天然的矛盾，认为投资过度的经济学家主张紧缩，既然热就要泼凉水，而认为消费不足的经济学家则认为应该提振消费，释放更多的流动性出来。既然冷就要加点温度。这就有一种日了狗的感觉，到底听谁的？当然还有一种经济学家提出，经济萧条，你释放货币也没什么用，信心崩溃了，大家也就都不借钱了。你把马儿拉到河岸旁，他也不一定就喝水。目前2018年的中国就出现了这种情况。</p><p>直到1913年美国经济学家韦斯利米切尔才给了经济周期一个精准定义，他认为一个周期由扩张开始，然后是衰退，进而收缩最后复苏组成，这个变化重复发生，并且1-10年或者12年左右一个循环。他强调了2点，一是总量震荡，不一定什么原因就会引发危机，二是周期也不固定，所以规律性不足。</p><p>接下来另一位牛人要出场了，这就是德国科学家约瑟夫基钦，他在1923年分析美国与英国31年的数据，发现了一个新的周期，他与朱格拉周期的区别在于波长不同，朱格拉周期是9-10年，而基钦周期则是40个月，大概3年多一点。</p><p>而与此同时，另一个人也有了新发现，这就是西蒙库兹涅茨，他收集了大量数据，特别他监测了国民收入，然后他也发现了一个全新的周期，还是波长不同，既不是基钦周期的40个月，也不是朱格拉周期的10年，而是20年。在这个理论刚发表后不久，一个叫做霍伊特的绅士，又提供了一些数据，证明房地产价格的周期平均是18年。</p><p>但这些人跟下面这位比起来，还是差了一点，1910年一个俄国18岁的学生，研究资本主义的问题，1924年他形成了一个长达80页的研究报告，他认为资本主义经济一共就走了两个周期，每个周期平均长度是53.3年，而在当时他断定，资本主义刚开始要进入第三个长达50年的周期，这个人就是大名鼎鼎，尼古拉康德季耶夫，这个周期我们就简称叫做康波周期。</p><p>他认为工业革命开始是第一个康波，没有具体的时间点，而第二波康波是从1843年开始，来自于铁路业的繁荣，终结于1887年，第三波康波从1893年的经济危机开始，而在他发表这个观点的1926年， 即将进入高潮。但是康德季耶夫显然自己也并不知道。</p><p>康德季耶夫认为，技术发明并不是唯一驱动力，而只是一个触发器，不过，可能是因为他是个俄国人，或者因为康波周期太过漫长，经济学家们认为，他缺乏足够的理论支撑，在经济学家反而是朱格拉周期，基钦周期，库兹涅茨周期更被重视，库兹涅茨还得到了1971年的诺贝尔经济学奖，反倒是康波周期关注度不高。</p><p>1909年，巴布森出版了一本著作叫做货币积累的商业晴雨表，对历史上的经济危机做了透彻的分析，他的主要观点就是，过度投资与增加货币供给，一定会导致负面效果。他还强调了一个10阶段的经济周期模型，1提高货币利率，2债券价格下跌，3股价下跌，4商品下跌，5房价下跌，6货币利率较低，7债券上涨，8股票上涨，9商品上涨，10房价上涨。这本书对于投资很有指导意义，所以很快成了畅销书。</p><p>而另外一个经济学家，欧文费雪也在同期研究出了一个著名的理论，我们之前讲过，叫做费雪方程式。MV=PQ，指的是货币供给×流通速度=商品价格×商品数量。这个方程式表明货币大量供应，一定导致商品价格上升，从而带动商品数量提升。一开始是好事，而之后会发生过度繁荣，再往后就是危机。费雪认为，银行信贷是周期的关键，因为只有银行才能创造货币。</p><p>商人们增加订单加大采购，开始会让生产扩大，需要更多的货币支持，但是当商人们发现库存已经很高了，就会降低采购，偿还贷款，所以货币就会自发的收缩。货币越缩越少，就会发生资产价格的下跌。通常伴随债务危机，每个人都试图减少债务，反而加重了总体负担，会形成大的恐慌。在费雪看来，等式左边是我们可以调控的，而右边的PQ是客观存在的，这其中Q是目的，P是参考指标，所以要稳定数量就必须盯住价格。</p><p>此外费雪还有一个理论，创造货币的是普通商业银行，而不是中央银行。比如他拿出10万存到银行，银行扣下10%当准备金，其他9万就会贷出去，而拿到贷款的人，则把这9万块钱支付给了供应商，供应商拿到9万元，又存到了银行，银行依旧留下10%，把剩下8万1贷出去，以此类推，银行最后因为这10万存款，创造了90万的信贷，所以这个理论也就不难理解中国的情况，之前房地产暴涨的15年，也是M2货币供应量暴增的15年，这有一部分原因是央行闸门不严，但更多的是商业银行和房地产商在那里不断的创造信贷的结果。</p><p>这个时间段刚好是一战之后，德国出现了历史上最惨无人道的通过膨胀，6个月时间汇率下跌了99%，1923年的鸡蛋价格是1918年的5亿倍，而德国人则出现了货币幻觉，也就是他们认为马克才是正常的，其他都是不正常的，一切都是因为别人害我，导致的奇怪现象。而实际情况，就是德国要偿还外债，所以造成了纸币泛滥。一开始德国政府看到印钱可以逃债，而且汇率下降的还比较温和，于是就不断加码，但突然之间汇率就如脱缰的野马完全失控了。</p><p>有经济学家认为，信用扩张带来的经济繁荣，然后必然崩溃这是无法避免的，只有两个选择，要么早结束，早崩溃，伤害小，要么推迟结束，但是越晚崩溃伤害也就越大。</p><p>此时，几位伟大的经济学大师也登场了，奥地利学派的哈耶克就表示，在经济的繁荣周期央行可能会错误的允许货币供给过快增长，从而让储蓄增长落后于投资需求，这就是在为后来的通胀创造条件，毕竟谁也不反对让自己再爽一会。而这个时候正是1929年大危机之前的持续繁荣，这些话没人听得进去。有一个叫做索马瑞的人，在1928年警告说，利率和股票收益率严重不匹配，也就是我们常说的股债比过低，相当于他已经在提示危机了，但此时根本没人理会他。1929年3月，利率水平已经提高到14%，随后利率继续涨到了20%，</p><p>此时我们前面提到的巴布森就警告说，根据他的研究，繁荣已经大幅偏离了长期趋势，这段话触动了一个大名鼎鼎的投机客，这就是杰西利佛莫尔，之前我们讲股票大作手回忆录的主人公，他听完巴布森的演讲，立马出掉了30万的股票，随后逐渐增加空头的头寸。后来他的交易被报纸报道了出来，说他正在做空高估股票，而李佛摩尔则给予了正面否认，他说是因为股票价格已经处于了荒谬的地位，所以才会下跌。不过有记者质疑他，说欧文费雪可认为股市还很低，此时李佛摩尔大怒，说教授懂个屁啊。虽然欧文费雪也有很多投资，但他注定因为29年这次大危机，被钉在了耻辱柱上。之后只要大家想到了29年的疯狂，就会翻出他错误的言论。甚至最后没人记得他那著名的费雪方程式，只记得他是一个胡说八道的教授。</p><p>李佛摩尔一路做空，他利用29年的大危机大发国难财，31年他的财富达到了3000万美元，当时堪称富可敌国了。而整个股票市场可就惨了，1933年股票市场损失了85%，以至于华尔街上高层酒店的客房都不敢接生意了，因为住店的比较少，过来跳楼的比较多。经济也出现了巨大的滑坡。而工业生产跌去了1/3，耐用品消费下跌了75%。居民住宅建造下降了95%。白领的工资下降了40%，而蓝领的工资呢都下降了60%。此时银行开始紧缩，不愿意往外发放贷款，即使有充足的抵押品，他们也不愿意放贷。这引发了全社会的批评，但是没有用，他们就是一毛不拔。于是银行家在大家眼里，跟十恶不赦的混蛋画上了等号。</p><p>银行过分保守，最后的结果就是市场的货币过分收缩。对此，美联储已经束手无策，只能眼睁睁的看着银行倒闭，企业破产。大量的人员失去了工作，失业率攀升到了25%。而国民收入，从1929年的870亿美元下降到了390亿美元，相当于退回到了20年前的水平。、</p><p>在1930年。另外一位经济学大师开始登场了。这就是凯恩斯当时呢，他正在打理国王学院的基金。在经济危机中也损失了不少，直到1934年基金才从坑里爬了出来，此时巨大危机开始已经过去了四年之久，但是仍然没有任何好转的迹象，那么凯恩斯就开始想了。到底亚当斯密所说的看不见的手，什么时候才会起作用呢？此时他除了继续打理他的基金，并在之后取得不错的成绩之外，还着手于宏观的研究，1936年他理论终于问世，就是一本重要的书，叫做就业，利息和货币通论，简称通论。</p><p>这本书在当时堪称救世主，因为资本主义已经面临了分崩离析的风险，凯恩斯认为古典经济学家犯下最严重的错误，就是认为经济会自动纠偏。而现在他要猛烈的抨击了这个观点。他认为必须要通过积极地运用政府预算，从稳定价格的政策转到直接稳定就业和总收入上来。也就是说他主张的是政府干预。</p><p>当然，凯恩斯主义在一出生开始就遭遇到了古典经济学家们的挑战。比如有的经济学家是说，投资下降之后，资金的需求少了，于是利率也就下降了，然后就会起到刺激经济的作用，所以长期看，经济就会复苏。但凯恩斯认为，长期看我们都会死，事实上当经济下滑，所有的企业都在恐惧，反而投资活动受到抑制，资金需求下降，但是资金的供给更少，这就是他的流动性陷阱理论，也就是无论你注入多少货币，利率都不会再下降，因为大家心里害怕，债券只能被抛弃。你等待经济自己复苏，但有可能先等到的是经济崩溃和自我灭亡。</p><p>由于当时经济实在是太糟糕了，再加上几年的持续萧条，让民众对这些古典经济学家相当反感，都在期待救世主，所以凯恩斯在大辩论中，占据了比较明显的优势。他的影响力也与日俱增。甚至他呼吁政府不要怕浪费，只要钱投下去了，就会带动乘数效应。</p><p>但有一个人坚决的反对凯恩斯主义，甚至认为凯恩斯的支持者，都是智商有问题。这就是另一位经济学家，约瑟夫熊彼得。他跟凯恩斯一边大，生于奥地利维也纳，很显然他是一位奥地利学派的经济学者，凯恩斯理论大行其道的时候，熊彼得的理论呢，还只是个框架。后来他才提出了著名的三周期模式理论，他认为经济的变动受到，基钦周期，朱格拉周期和康波周期的共振。而世界历史上比较长的萧条，都是三大周期共同向下产生的影响。</p><p>康德拉季耶夫提出，第一次康波是从工业革命开始，第二次康波从1843年开始1887年结束，第三波康波从1893年开始，而熊彼得做了一定的调整，他认为在1825-1830年，这是第一波康波结束的时间点，1873-1878这是第二波康波即将结束的时间点，而1929-1934是第三波康波结束。所以危机才会持续的时间更长。而且他还提出，之所以经济复苏如此之困难，就是因为政府使用了太多的反商业原则，比如给富人加税，对企业征收未分配所得税，强制最低工资，以及国企参与市场竞争，还有强行反垄断。正是这些反商业政策，才让危机久病不愈。这哥们说话确实愣，他这个表述相信没有政府喜欢听，所以也难怪凯恩斯上位，奥地利学派只能靠边站。如果支持他，那政府岂不是相当于猛抽自己的大嘴巴。所以根本没人理他，他的书也才卖了1000本。</p><p>后来，米尔顿弗里德曼，这位货币大师，把所有的经济问题，都归结为货币波动，在他看来，任何一次危机爆发前的一个季度，其实货币供给已经开始收缩了。如果美联储能够阻挡这次货币收缩，那就能够避免危机，但遗憾的是，美联储没能做出快速的反应。另外，他还批评了普遍的一个观点，认为扩张阶段应该提高利率，抑制经济过热，衰退应该降低利率刺激经济，弗里德曼说这都完全不对，他认为经济好的时候，大家都敢花钱，于是其实造成货币储备的减少，这会降低债券价格，也就是说在利率上升的时候，货币是扩张的。那么反过来，利率下降也很可能跟货币下降一起出现。就是说越有信心，越扩张。越没信心，反而越是收缩。所以你光调整利率有的时候是没用的。举个例子，美国70年代石油危机就差点被这个东西害死，当时也是发现经济下行了，于是释放货币，降低利率，刺激经济增长，但结果经济没起来，反而让通胀到了10%以上。后来里根上台搞供给侧改革，先压通胀，不顾经济的压通胀，然后大减税，这才把美国给从崩溃的边缘给拖了回来。而站在当时，很多人都不理解，为什么经济下滑，还要加息。其实就是弗里德曼的观点。你得先解决预期的问题。如果通胀预期挥之不去，那么钱就进不了实体经济。这个简单的道理，我们的决策者，在房子上调控了这么多年，都没想明白。导致房价越来越高，实体经济越来越冷。一放水楼市就涨，一收缩，实体经济先死。2018年终于算是找对了路，通过冻结流动性的方式，坚决的先杀死炒房预期，必须让楼市停涨甚至下跌，否则这样下去终究是一条不归路。</p><p>接下来，我们说一个理论叫做蛛网模型，说的是生猪减去玉米价格比率的增长总是滞后于生猪市场，也就是说猪肉卖出高价，卖的好的时候，恰恰是养殖户们手里猪最少的时候，而等他们去大量养猪了，接下来就是猪肉价格最低的时候。也就是说养殖户总是踏不准节奏，他们追着市场去跑，但是却屡屡受伤。而这个理论也可以扩大到整个社会，我们的投资也是一样，当大家发现经济好的时候，都去扩张生产了，等你的钱投下去了，马上就是巨大的经济寒冬。很多人都死在了这上面。甚至经济学家认为，中央银行也陷入了这张蛛网里，他们追着市场跑，往往反而造成了恶性结果，比如经济已经过热，马上就要自我调整，货币收缩了，结果中央银行出来连续加息，一下让货币失血过度，反而造成了巨大危机，反过来经济即将走出寒冬，但中央银行连续降息释放货币，反而为下一次过热埋下了祸根。</p><p>在全社会的供应链条中，每个企业所处的位置是不一样的，于是有人设计了一个游戏，这里面有四个部门，啤酒厂，经销商，批发商和零售商，这四个部门将根据市场的反馈，各自进行经营调整，结果我们发现，消费者需求直接反应在零售商上面，而零售商的波动是最小的，往往是零售商先变化，然后才是经销商，批发商和啤酒厂，这些需求会在后三者身上成倍的反应。从而造成明显的周期波动。啤酒厂模型，说的是零售商针对市场需求做出调整，往往会成倍的传导到经销商，批发商和啤酒厂身上，比如零售商多增加了10%的销量，啤酒厂可能要多生产一倍的库存。</p><p>还有一条著名的曲线叫做菲利普斯曲线，说的是失业率跟通货膨胀的关系，通胀率越高，失业率就越低，但这个东西一直也有争论，有经济学家认为，这可能是错误的，就业是经济周期动态的结果，通胀不是就业的独立驱动器，增加货币供给就会制造通胀，但是对于就业的作用其实并不明显，比如弗里德曼就说，通胀不能减轻失业压力，更重要的是连续的通胀增长是不可持续的。一旦通胀预期上来，那么就会让通胀和高失业率并存，这时候是非常危险的滞胀。也就是通胀上升，但并未带来繁荣，这是经济中最可怕的现象。其实我们搞经济的都应该明白，制造通胀是可以的，但千万不能制造通胀预期，一旦形成通胀预期，就非常危险，必须要强力打压他，否则会对经济造成非常大的破坏力。</p><p>后来有经济学家把康德拉季耶夫周期分成三个变量，产能，产量和订单，其中订单是先行指标，其次变化的是产量，最后变化的是产能，而一个周期的平均长度是47年。然后还创造一个模型，来模拟库兹涅茨周期，平均长度是22.2年，还有基钦周期，长度4.6年，把他们叠加在一起，似乎就能发现什么趋势。至于能产生什么趋势，我们后面再讲。</p><p>成功预测了1929年经济大危机的巴布森就曾经说过，通过研究股票，来预测经济，要比通过经济预测股票市场容易的多，所以股票市场成了经济的晴雨表。有人还给了危机前的几大预警信号，分别是1信贷和债务增长过快，2房地产，股票和商品存货这些投资品快速上涨，并且投机严重。3出借人之间为了新的商业机会展开激烈竞争，4放松信贷条件和贷款标准。5，风险报酬的减少由出借人承担。就是说一旦你发现银行追着别人给贷款的时候，这就是危机的先兆，比如87年美国的股灾，其实年初金融系统的流动性就开始下降，而在86年8月开始，利率就开始上升，结果这都没有引起大家的重视，87年4月，财政部的债券价格开始下跌。87年10月就爆发了股灾。当利率开始上升，你还不用担心，但是当利率持续上升，并且上升了一年，你就要小心了。危机可能随时到来。</p><p>在美国，有个人做了一个东西，叫做哈德迪牛市指示器，这东西很简单，他选取了100家机构对于股市的意见作为指标，当70家意见是买入的时候，这个指示器就会提示你卖出，而87年的8月份，这个警报器就开始不断的报警。在10月16日这天，美国股市暴跌千点，接下来东京指数，香港恒生指数，以及欧洲的股市全部都下跌。当时大家都在不断的卖出，而且不光是人在跑，还有25%的计算机也发出了卖出指令。索罗斯几乎在价格最低的这一天卖掉了所有股票，而彼得林奇则损失了20亿美元。但是当所有人都觉得股市要完了，29年危机要重演的时候，股市奇迹般的止住了跌势。</p><p>后来非理性繁荣的作者，罗伯特席勒教授，经过研究发现，造成大跌的主要原因是因为大家使用了同样的交易止损策略，这就形成了市场的非理性趋势。行为金融学的研究开始出现。这颠覆了之前的理论基础，之前无论是亚当斯密还是弗里德曼都认为，个体虽然不聪明，但是群体水平要高的多，大家都在拼命把自己的利益最大化，结果就是推动了经济的进步。甚至他们认为，大家投机没什么不好，但是现在行为金融学则观点完全不同，他们认为大众意识，反而是错的。跟大众反着操作，你反而能够获利。你要想成功投资，就要把大众想象为你的交易对手，大众买你就卖，大众卖，你反而要买。有人比喻这是选美比赛，你要选出的不是你认为最漂亮的那个，而是要选出大多是人都认为最漂亮的那个，你才能赢得比赛。</p><p>之后，丹尼尔卡尼曼，理查德塞勒，斯塔特曼还有罗伯特席勒，这一众心理学家兼经济学家的人走到了台前，给大家解释投资的问题。</p><p>比如有人提出，我们总存在后见之明的认知偏误，就是我们总觉得，可以在股票开始上涨之前，就能发现他，于是产生强烈的悔恨感，等到市场一回调，就强烈的要买入。而当股价越涨越高，我们的悔恨就会更加强烈，所以就会本能的越买越多。这就好比在赌场里，那些赢了钱的赌徒，他们一定会继续玩下去，想赢到更多的钱。这个游戏什么时候结束呢，那就是当他们输掉所有的钱才会截止。经济学家把他们，暂时赢到的那些钱，叫做庄家的钱。</p><p>在股票上涨的过程中，也会有人提前离场，也会有人发出预警而提前做空，但是股票通常会继续上涨，这时候反倒会让这些人亏损，并且成为别人眼中的笑话。这其中有不少人，经受不住打击，可能会再次返回到市场当中，比如南海泡沫中的牛顿同志，就犯了这个错误。而我们现在不少买房的人，正在犯这个错误，明明卖了，过几天房价又涨了，还得带着更多的钱，返回到这里。直到被动的被套牢为止。</p><p>在2000年之前，当时就有很多经济学家预警，将有大的泡沫破裂的风险，他们的理由是，跟踪的300多家公司，必须在未来5年按照96%的速度增长，才能证明当时的股票价格是合理的，而这个增长速度是根本不可能实现的。因为当时市场上成长最快的微软，每年的增长率也只有53%。随后，2000年春季开始了泡沫破灭，全球市场发生了暴跌。之所以选在这一年，是多周期共振的结果，在泡沫的最后阶段。繁荣导致了严重的瓶颈，所有人都在追求高回报，而资金供给者也已经达到了极限。另外，自由资本的流动推高了利率，这使得投资的利润减少，而资本更加稀缺。一旦趋势逆转过来，将会发生很大的问题。就是说，在繁荣的末期，信用货币大量被创造，而实际的财富则越来越少。10个锅，可能就剩下了2-3个盖子，一旦有一个地方出错，就会马上吸走所有的资金，而其他的地方，就会发生资金雪崩，说白了还是钱太少，撑不起那么高的估值。而一旦开始下跌，信用迅速消失，全都得拿钱来兑换，于是就发生了大危机。简单来说，每次危机就是生意太多，而钱不够用了造成的。</p><p>很多经济学家都在试图解释经济周期，什么消费不足，过度储蓄，货币，债务紧缩等等，各种学术派别五花八门，他们也在寻找阻挡危机的办法，甚至熊彼得这样的经济学家还说，危机没什么不好，他是对资本主义的一个清醒剂，这其中凯恩斯主义肯定是占据主导地位的，他主张逆向调控，宏观干预，深得很多政府所青睐。后来还有了新凯恩斯主义，说的是通过公共开支，和货币扩张，两种途径创造充分就业的机会。</p><p>这里要先说一下，资产泡沫对于经济的杀伤有多大，作者说，如果一个资产价格涨到了GDP的6倍，然后掉头向下跌了三分之一，也就是说跌去了GDP的200%，这样的损失有多少呢？假设财富效应值是公认的4%，那么损失的200%X4%=8%，再假设每年GDP的增长率只有2%，那么也就相当于4年没有任何增长。如果泡沫膨胀到GDP的700%，之后损失了500%，那么再×4%，就相当于损失掉20%的GDP，也就相当于10年经济增长归零。所以资产泡沫对于经济的杀伤是很大的。这也难怪，像2000年泡沫，和1990年日本泡沫之后，都得用10年才能从坑里爬出来。而我们2007年发生了6000点泡沫之后，已经11年了，还没从股市的坑里爬出来。<br>那么面对经济周期的挑战，中央银行该做哪些事情，央行该如何调控经济周期。央行使用的武器主要是三个，一个是利率，降息可以刺激经济活动，并减少全社会的储蓄，第二是向商业银行购买和出售政府债券，这是流量工具，直接改变商业银行的资金量，第三，当然还有大家熟悉的存款准备金率，提高准备金，就把更多的钱，固定在商业银行体系里，反之就是让他们多放贷款。总之，中央银行能够控制的，就是货币的数量和价格。</p><p>央行关注的东西，就是费雪方程式，后来被改进也叫作纽科姆方程式，的左半部分，也就是MV，央行能够精确管理的就是那个M，也叫作货币供应量，央行制造了几个M的定义，比如M0，就是指现金，M1就是可以用来支付的货币，是M0加上支票，而M2是M1加上储蓄账户，以及货币市场基金。M3是M2加上定期存款，反应那些流动性较差的货币。还有M4和M5，我们一般不常用，就不说了。大家重点记住M1和M2的意思就行，M1主要是活期，马上就能用于投资的钱，M2相对固定，是中期定期储蓄。</p><p>在作者的研究中，有两个显而易见的结论，任何衰退，几乎都伴随着资产价格下跌，而且往往是资产价格先下跌，而后出现衰退，而在衰退之前，资产价格往往会先有一个暴涨的过程。如果没有暴涨，往往也不会暴跌。第二，房地产资产的价格下跌，要比股票价格下跌，对于经济的影响大的多。比如1990年日本的衰退，工业用地价格下跌了22%，住宅地价下跌41%，资产价格的综合跌幅超过GDP的2倍，个人财富缩水一半，日本在1998-2002之前几乎增长率降到了0，作者说日本央行犯的错误就是，他们观察错了对象，他们在80年代的时候，货币供应量的参考指标不是MV，而是错误的选择了P，换句话说日本人看到物价没有涨，于是就大幅度的供给货币，所以才酿成了惨案。由于房地产效应，我们也是大量供给货币，虽然没有引发通胀，但货币其实已经出来了。特别是在2015年又给加了一把火之后，现在已经很难控制了。这应该引起足够的重视。物价没涨，不代表货币就合理。</p><p>有人说，为什么日本不主动控制泡沫呢，这其实极其困难，之前的美联储主席，本伯南克就说，主要有两个原因，1是刺破泡沫，可能会对经济造成巨大的伤害，甚至比他自己泡沫破裂伤害还大，2是央行不能确定是否真的存在泡沫，比如1996年格林斯潘说过非理性繁荣，但是随后4年股票价格仍然在上涨。所以一旦出现泡沫，我们通常都会小心翼翼，会陷入一个等死与作死的烦恼，不知道到底该怎么办？而在犹豫的过程之中，往往泡沫就会越来越大。最后变得不可收拾，这也是为什么这么多经济学家做了研究，也产生了这么多理论，但是危机仍然不可避免的原因。</p><p>有的时候央行也确实在积极地扩充货币，但是被流通速度下降给抵消了，比如2018年，就出现了流动陷阱，市场利率下降，宽松货币，但是M1和M2始终起不来，社会融资也创新低。这就说明社会的流通出了问题，渠道已经不通畅了。而应对流动性陷阱的方法，就是提供近似于0息的抵押贷款，让商业银行通过资产抵押，获得央行贷款。并且央行要无限量的购买债券。总之就要做到零利率，这样才能有效刺激货币，疏通渠道。</p><p>当然，老百姓是比较反感通货膨胀的，甚至有经济学家说，通货膨胀是最要命的税收，弗里德曼则建议，要想控制通货膨胀，就要控制货币供给。但说归说，做归做，通货膨胀问题一直没能解决，在经济学最发达的美国，持续的通胀也不低。之所以这样，是因为很多人坚信，适当的通胀会有利于解决就业，刺激经济增长。</p><p>说完了央行能做的事，我们下面讲这本书的重点，周期与资产价格，先来看房价。有一个人叫做霍伊特，他对比了103年的房地产交易数据，他把一轮房地产周期定义为20个阶段。这里面我们只需要简单记一下，他认为，房地产周期的起点是从房租上涨开始的，然后才会带动房价上涨，信贷支持，房地产被大量建设，吸收了大量闲置土地。而房子到达顶峰后会出现商业萧条，股市崩溃，银行改变信贷政策。然后才开始下跌。这一个周期非常漫长，平均间隔是18-20年的时间，从2000年房改开始算起，我们现在的房地产，刚好是18年。一旦房地产开始进入下行周期，对于经济的压力是很大的。前面也说了，他的伤害远比股市更大。另外霍伊特还研究，抄底房地产最简单也最困难，人人都能做得到，但问题是，你到时候手里是否有足够多的钱。他发现，很多人都能发现房地产的谷底，但能抄到这个底的人，无一例外都是拥有较为充裕现金流的人。而大部分人，也能看出底部，但无奈手里已经没有钱了。</p><p>作者说，美国的房子一般收益率不会太高，如果1000万美元的房子，一年能带来60万美元的现金流，就是合理的投资，大概是年化租金收入达到6%，而现在中国的房子租金回报率不到2%，所以大家可以自己体会一下。这个生意已经没法做了，他远远高于融资的成本，也就是说你的现金流是流出的，不但白忙活，还得赔钱，唯一的抓手就是卖个高价，这就不是在投资而是在赌博。赌你自己能找到一个更傻的傻子。</p><p>还是来说周期，房地产周期也要用这个那个公式，MV=PQ，当MV增加，利率下降，信贷更多，带动消费者支出上升，新房开工数量增加，经济活动的Q也上升。接着就业增加，投资增加，大家都抢着买房，房价或者房租P也就上升。</p><p>房地产周期的后期，土地价格强劲上涨，这是危机预警的强烈信号，说明廉价的融资，带动的大量货币正在冲击土地市场，房地产库存告急，说明大家抢房抢红了眼。然后是不分地段，只要是房子都会涨。房地产进入普涨阶段，比如2017-2018年，我们连三四线都在涨。</p><p>作者说房地产的繁荣会吸引当局的注意，很多地方会重新规划，释放更多的土地，来维持房地产的增长。企图让这种繁荣持续下去，不过很快，房地产租金的上涨开始对商业造成冲击，随后企业倒闭增加，租金下降空置率增加，房地产价格开始下滑，但此时由于时间滞后，往往新房还在大规模建设。</p><p>崩溃从土地开始，首先是土地没人要了，接下来是建材市场，此时已经开始陷入通缩，然后房价下跌，加剧了更大范围的经济紧缩。租金下降，不再续约，房屋断供，法拍房增加这种现象开始出现。更严重的结果是金融机构被拖垮了。出现系统性危机。危机的残局通常要持续4-5年的时间，在这期间，房屋会充分换手，拥有现金流的人，会在这个期间，从债务缠身的人身上接走房产。直到最后租金稳定下来，空置率下降，房地产市场才会重新开启牛市。</p><p>作者说，实际利率是房地产的先行指标，利率下降，货币增加，将是房地产重拾升势的有力信号，相反，利率上升，货币减少房价就会下跌。另外，他还给出了6个参考指标，遇到这种情况，投资房地产的人就要小心了，1，房子出售天数明显增加，2一个城市中库存数量增加，3卖方报价与成交价格的比率下降，4，120天以上卖不掉的房子数量增加，5，投资的居多，自住的少。6，抵押申请数量下降。</p><p>房地产的周期，一般在经济周期之前，也就是说，新房开工数是一个重要的经济领先指标，一旦房地产周期逆转，接着就是经济周期逆转，这时候你也就明白，为什么历任政府都在呵护房地产了吧，因为房子一旦下跌，就意味着经济肯定滑坡。但是房子不管你再怎么呵护，他也永远不可能涨到天上去，还是因为那个道理，其他产品的创造是有限的，你就算发再多的货币，最后你也没有东西可以交换了。所以房子总会18-20年一周期的这么周而复始的波动，注意18-20年是指波峰到波峰，波谷到波谷，这么说来，中国的房子已经比别人长了很多，我们已经走了18年，从波谷走到了波峰。而从波峰到波谷还要走4-5年时间。</p><p>我们再来看看其他市场，先说收藏品市场。这算是投资市场的偏门，但是却每每带来惊喜的价格，比如1987年佳士得拍卖梵高的作品向日葵，开始估价500-600万英镑，但经过后几轮评估后价格提高了1倍，而依据就是，另外一幅名画，斯特拉福磨坊卖出的1000万英镑，买家是英国政府，所以这极大的增强了卖家的信心。但最后拍卖开始，价格很快就叫到了2000万英镑，最终神秘买家以2475万英镑的总价买走，几天后大家才知道，神秘买家就是日本的安田海上火灾保险公司。</p><p>梵高的向日葵卖出天价后，对于收藏品市场意义深远，随后很多的作品都卖出了高价。而梵高的另外一幅作品鸢尾花，竟然以1500万美元起拍，最终交易价格达到了创纪录的5390万美元，买家是澳洲地产大亨，艾伦邦德，有意思的是，他也参与了向日葵的竞拍，但在最后一轮叫价中，败给了日本的保险公司。</p><p>有人把艺术品的价格编织成了一个梅摩艺术品指数，该指数跟日本的房地产价格走势有着极其强烈的关系。在1986年之后艺术品指数快速拉升，并在1990年到达顶点，比1985年的时候价格涨了580%，而日本的房地产也是同样的走势，在1991年房地产开始掉头向下，艺术品价格也出现了暴跌。</p><p>有人说，跟日本有关，就能影响世界，还真是这样，在80年代末，艺术品市场的主要买家真的都是日本人，当时日本企业的老板四处出击，收了一大堆名画，比如梵高的向日葵，嘉舍医生的画像，雷诺阿的煎饼磨坊的舞会，以及毕加索的杂技演员之家，瑟亚瑞的喜宴等等，但是这些买家有点意思，没过几年，他们其中不少都破产了。</p><p>有研究机构指出，高净值人群是艺术品市场的主要推动力，对于这些人来说，他们的财富需求是这样的，最底层是是养老储蓄，其次是自有住房， 然后是金融投资，再往上是休闲别墅，最高的财富需求就是收藏品。所以当高净值人群到达顶点的时候，也就是艺术品过热的时候。</p><p>作者说，艺术品这个东西，从历史上的走势来看，涨跌滞后于股市，而且他们也很少大跌。比如1966年-1975年，美股跌了27%，但是艺术品市场竟然还是涨了1倍，87年股灾也是一样，美股跌了31%，艺术品还是涨了2%。往往在股市下跌之后，艺术品才开始下跌。不过艺术品也有他的问题，那就是门槛极高，没有上亿资金你还真玩不起，而且持有需要花费巨资，你肯定不能买一副毕加索就卷吧卷吧扔床底下。最后流动性受限，当你急需用钱要卖的时候，未必能够马上套现。甚至几年卖不掉，有价无市也是常态。当然，风险也是很大的，那就是买到假货。</p><p>有一份研究报告指出，只要富人变得更富有，艺术品就会表现很好。当然富人变得富有的标志，就是金融和房地产的持续上涨。其实我们有个错觉，认为持有艺术品是可以赚很多钱的，而持有股票很困难，这主要一个原因就是实时报价，股票是实时报价的，而收藏品在不拍卖的时候，价格是没有波动的。所以你持有收藏品会很踏实，也不会每天去拍卖行问价格，但股票却不行，你天天看大盘，越看越闹心。但其实如果放在一个足够长的时间来看，股票的表现其实不比收藏品差。</p><p>下面我们看看贵金属的周期，先说黄金，黄金为什么被用来当成一般等价物，就是因为他产量极小，不容易扩张，到现在为止，每年黄金的增加量只是260万千克，相当于每人0.4克，如果将现有的黄金都分配给个人，每人分到也就20克，500个人凑到一起，也就一个高尔夫球那么大的金块。把世界上所有的黄金都放在一起，一个长宽高都是18米的池子就完全可以装得下。</p><p>有人在2005年算了一笔账，当时的金价在440美元一盎司，黄金的总市值也就是2万亿美元，只相当于全球股票市场市值的5%，估计到现在2018年底，黄金的总市值也就是6万亿美元，大概只相当于一个，熊的不能再熊的，中国股市的总市值。当然比黄金数量还少的是钻石，这东西没什么太多的使用价值，主要就是少，只有20%符合宝石品质，45%是准宝石品质，在1970年之前，这些准宝石品质的钻石，都不能被拿来做首饰的。后来抛光技术发展了，才让现在钻石走入了普通百姓家庭，其实我们买的都是准宝石品质的东西。全世界的钻石，集合在一起，一个长宽高都是6米的池子就足以装下。</p><p>在之前很长的时间里，钻石价格都很稳定，在1977年开始上涨，3年涨了4倍，1980年形成了比较大的泡沫，随后价格又暴跌，到了85年几乎跌回到了起点，而在这期间，黄金和白银也出现了比较明显的上涨，之后也同样是暴跌，不过黄金白银在78-79年达到高点，而83年，黄金白银基本见底回升。所以黄金和白银的波动，要比钻石早上1年。</p><p>后来有经济学家研究发现，黄金有两个周期，一个是48周，另一个是248周，也就相当于4.8年，这个周期与基钦周期或者库存周期类似。而但对于黄金来说有四个领先指标，1是美国招工广告，2是美国工业产出，3是基准利率，这是反向指标，4是美国贷款和投资。换句话说，总体上看，贵金属在经济大好的时候，需求就会表现强劲。所以利率低于通胀率，也就是我们说的负利率的时候，贵金属就会被看好。但往往这时候可能股票和债券会开始掉头向下，所以黄金表现最好的时候，往往是股市和债市熊市的开始。而当黄金跌不动了，股票的牛市也就该来了。所以黄金跟股市大概率相反，黄金表现很差的时候，股市通常会不错，黄金表现很好地时候，股市通常很差。黄金和股市表现都很好，第二年通常就会有灾难。相反黄金和股市都糟糕，第二年往往都有股市不会差。</p><p>下面我们来看其他商品期货的投资，我们在讲资产配置的时候，通常会给大家一个比例，比如债券40%，股票40%，商品20%，我们一般简单操作，把商品都换成了黄金和原油，但其实，如果你资金量足够大，商品中应该包括有大量的能源，农产品，工业品，能源里有原油，煤炭，天然气，而农产品有玉米，大豆，棉花，小麦等等，而工业品里则是钢铁，铝，铜，锌，铅等等，在国际市场上，追踪大宗商品的指数叫做路透CRB指数，高盛商品指数，道琼斯国际集团商品价格指数，还有罗杰斯国际商品指数。这东西原来就是给制造业预备的，因为原材料价格变化太大，影响了制造的成本，所以让利润特别不稳定，而有了商品期货市场，就可以通过对冲交易把利润锁定，比如我们在原则那本书里讲过，麦当劳采购鸡肉，做汉堡，他要求鸡肉供货商提供一个不变的价格，但是供货商打死都不干，说这个保证不了，于是达利欧出主意，供货商可以通过期货对冲，在价格高的时候，他们低价卖给麦当劳，看似亏钱了，但是在商品期货市场却做多赚钱了。而价格低的时候，他们在期货上赔了钱，但却可以用较高的价格卖给麦当劳，等于弥补了期货市场的损失。</p><p>后来有些职业炒家加入，裸做空或者裸做多，去赌方向，这使得期货市场波动较大。在讲积极型资产配置的时候我们也讲过，商品的周期在股票之后，经常是股票开始下跌了，但商品期货还在上升。比如在美国股市万恶的70年代，正是商品期货炒家赚大钱的时候。到了85年之后股票市场回暖，商品市场到失去了机会。而到了98年，商品又来劲了，2000年互联网泡沫之后，商品市场反而大涨，从98年一直涨到2003年。</p><p>在所有的商品中，铜的反应最灵敏，因为他50%用于电线，20%用于设备制造 ,15%用于材料，所以铜的价格，往往率先预示着经济周期的到来。特别是在衰退期，铜的价格指示作用更加明显，一般铜价明显下跌，就是强周期消失的标志。所以我们一旦看到铜价下降，就要撤出我们一切的关于周期股，和周期商品的投资。而在衰退早期表现不错的，可能只有石油。这让我们联想起了2018年10月份之前的石油走势。所以这可能是一个衰退的信号。</p><p>我们来看大家最为关心的股票和债券的周期问题。我们先复习下巴布森理论，也就是成功预言29年大危机的那位，他的理论中就有这么一个循环，1提高货币利率，2债券价格下跌，3股价下跌，4商品下跌，5房地产下跌，6货币利率较低，7债券价格上涨，8股价上涨，9商品上涨，10房价上涨。</p><p>债券中分为短债和长债，3个月到3年的都是短债，而3到30年的是长债，他也分为投资级债券和垃圾债，债券越垃圾风险越高，当然相应的收益率就会越高。在经济放缓的时候，产能过剩严重，所有产品展开价格竞争，这时候经济不好，央行就会降低利率刺激经济，释放货币，于是钱多了，新发出来的债券利率更低了，也就没人要了，大家都去抢利息更高的老债，这样债券市场就进入了牛市。</p><p>随着经济刺激的进行，消费者支出上升，企业利润增加，这时候经济活力回来了，那些垃圾债违约的少了，这时候高收益的特点就成了优势，所以在复苏期宽信用周期，企业信用债的表现要明显好于利率债，随后经济逐渐上升，乃至过热，出现了物价上涨，然后资金需求方越来越多，市场利率提升，短债和长债的收益率都上升，新债又开始重新被追捧，老债反而没什么优势，这时候债券市场进入熊市，债券价格开始下跌。而当过热之后，往往会出现资金荒，债务违约开始出现，此时垃圾债就开始纷纷暴雷，机构也不敢持有了纷纷抛售，这段时间垃圾债表现很糟糕，企业信用债要比利率债还差。在这种时期，干脆就不要持有债券，可以用货币基金替代债券。等待债券利率见顶回落，债券牛市回来之后，我们再重新开始对债券的配置。</p><p>根据巴布森的理论，股票的反应在债券之后，债券牛市之后，往往才是股票牛市，高盛对美国经济做过研究，他说熊市一般持续23个月，会造成股票下跌30%，而在经济到达顶峰之前的9个月，股票一般会见顶。也就是股票先见顶，经济后见顶。反过来也一样，不过周期会有不同，股票市场一般会比经济提前5个月走出低谷。所以用股票可以预测经济。</p><p>股票市场的运行逻辑是这样的，</p><p>第一个阶段，利率下降信贷扩张，这时候率先受益的是金融股和可选消费股，可选消费就是汽车旅游什么的，就是不是必须要进行的消费，此时因为贷款便宜，所以金融的业绩和可选消费的业绩预期会转暖。而这个阶段表现不佳的是稳定的消费股，他们业绩后知后觉，往往刚在商品牛市中涨过一轮，所以此时正在挤泡沫，在这个阶段通常没什么好的表现。</p><p>第二、三个阶段，分别是消费者支出增加，利润和就业增加。信息技术类的公司，工业类的公司比较利好，这时候就是典型的经济扩张，但是公用事业此时会表现相对迟缓。主要原因也是因为之前不久刚涨过。此时正是这些大机构，从公用事业里出来追寻涨幅更快的板块的时候。</p><p>第四个阶段，出现瓶颈，这时候经济有点过热了，于是资源股开始上涨，而此时不利于可选消费，因为这些汽车厂商的成本上升了。</p><p>第五个阶段，通胀加剧，利率上升，央行已经开始压通胀了，此时后知后觉的稳定消费股，比如白酒医药，又开始有好的表现了，因为他们的业绩最为确定。不受利率的影响，而这个阶段表现不佳的是金融，信息技术还有工业类，也就是前三个阶段引领市场走出牛市的行业，全都会表现不佳。</p><p>第六个阶段，经济放缓，表现最好的是公用事业，因为机构们在抱团取暖，这个行业有很强的分红属性，也有几乎固定的业绩。受到经济波动最小。而表现最差的是资源股，这时候商品恐怕已经开始下跌，而资源股则开始暴跌。</p><p>其实这个周期，跟我们之前讲积极资产配置的周期有点类似，唯一不同的是，那本书认为，公用事业涨的时候算是阶段一的上半场，然后金融和可选消费涨，是阶段一的下半场，而阶段六，他那本书认为任何股票都会下跌，相对表现好点的可能就是医药。所以这两本书的差别，就在于拆分了阶段一，空出了阶段六</p><p>如果把股票按照盘子划分，可以分为小盘股，中盘股和大盘股，在经济下滑的时候大盘股表现相对出色，因为经济下滑把资金链更紧张的中小企业竞争者都赶出了市场。迫使市场在合并。</p><p>而在股票牛市出现之前，往往会出现以下这些早期信号，1定期储蓄开始持续增加，2股市账户上现金余额持续增加，3融资余额持续增加，4基金账户的现金与资产比率持续增加，5债务与贷款的比率上升，6银行们自己给自己设定的自有准备金较高。7货币流通速度下降。总之，金融的牛市不会吸收流动性反而会释放出更多的流动性，大家买入了一项金融资产，也一定会有人卖出他得到现金，并且随着价格上涨，大家都会感觉很有钱，然后各种消费也就增加了。股票牛市什么时候来，这个不好确定，但我们什么时候买，却很好分辨，债券牛市回归，往往股票牛市就不远了，所以在债券牛市回归之后，我们就可以不断的买入了。如果资金量大，现金流十分充裕，甚至可以再提前一点。只要股市的估值在历史估值的下半区，其实都可以不断的买入。慢慢买出一个底部来。所以虽然我们判断不了，但却并不妨碍我们在股市中成功抄底。总之一句话，熊市一定敢买，买完一定挺住。只有这样在牛市回归的时候你才能够赚到钱。而这本书一直在讲周期，这就是告诉我们，经济一定会回归的，股市也是一样。</p><p>最后我们说下，世界上最大的市场，外汇交易市场，股市和债市规模够大了吧，然而跟外汇比那都是小巫见大巫，外汇交易额几乎是GDP的20倍，所谓汇率就是两国间货币的交换价格，这个影响的因素就太多了，比如随手列一下，就有生产率，政府支出，经常账户余额，利率，购买力平价，经济增长率，直接投资，心里影响，进出口价格，央行干预等等。甚至央行的干预会一票否决，你对其他指标分析的再精确，也不如他干预一下的影响力更大。所以这并不是一个很客观的投资市场。太多的时候充满了主观色彩。通常情况下一国的经济向好，利率提升，都会拉升货币的汇率，逻辑是这样的，经济向好，投资就被看好，于是国际投资者纷纷进入，大量换汇造成了不断的买入，然后推升汇率价格。比如中国在2005年到2015年一直是人民币升值，主要是因为这十年我们的经济持续向好，投资机会多，大量贸易顺差，美元持续流入，兑换人民币进入国内，所以我们发现了人民币最后内贬外升，对外一直升值，对内却贬值，资产价格，主要是房价不断膨胀。随着贸易顺差缩小，我们的升值之路也开始终结，经济下滑让大量的外汇开始反向流出，他们到商业银行，用人民币换成美元，然后带着美元离开，而商业银行则把收回来的人民币去外管局兑换美元，所以央行相当于放出了美元，收回来人民币，这就造成了人民币外贬内升，国内货币少了，资产价格就撑不住了。</p><p>本书里专门讲了澳元，由于澳洲的经济基本就是出售能源品或者是农产品，所以澳元兑美元的走势，跟CRB商品指数类似，也就是说商品指数涨，澳元也就涨，商品跌，澳元也跌，而这基本同步。有的时候会略有差别。所以这就给我们一个提示，一旦澳元兑美元开始下跌，那么你就应该本能的想到商品要跌，或者商品上涨，你也应该本能的想到澳元会涨。跟澳元类似的还有新西兰的货币新元，甚至新元比澳元更明显。而加拿大的加元也类似，但是在90年代的时候，曾一度失效。</p><p>外汇交易的对冲策略，这主要是跟周期相结合的，在经济扩张的早期，可以买进债券和股票，同时可以卖出本币进行对冲。这个逻辑就是，如果经济一直不好转，本币也会贬值，所以卖空本币就是给你的建仓加了个保险。</p><p>在扩张的后期，先卖出债券，再卖出股票，接着在央行提高利率后，买进货币同样是对冲，他的逻辑是在经济最热的时候，本币会升值。</p><p>下降的早期，继续保持货币的做多头寸，不介入股票和债券。</p><p>在下降后期，做空货币，同时先买入债券，再买入股票。</p><p>听起来很简单是吧，但是就像巴菲特所说的，投资其实很简单，但是并不容易。</p><p>在一个周期中，有7个驱动因素，是我们可以辨别并加以利用的。</p><p>首先是货币加速器，当实际利率低于自然利率，或者货币扩张的时候，这就会导致经济扩张，在稍后阶段往往会导致，货币流通速度加快。</p><p>其次是存货加速器，低存货会让公司增加订单采购，这将造成销售大增。</p><p>第三是资本性加速器，销售大增，本能的会让生产企业开始扩大产能生产，追求创造更多的利润。</p><p>第四抵押加速器，资产价格上涨，就会创造更大的抵押价值，比如你的房子值200万，那么他能够抵押7成，贷款出来140万，如果房价涨了值300万了，那么还是这套房子，也还是这么一个抵押行为能够贷出210万现金。这会造成更大规模的借贷。</p><p>第五，情绪加速器，资产价格上涨，不成熟的投资者会极大的发挥他们的想象力，去追逐市场热点。</p><p>第六，耗竭现象出现，也就是劳动力，实物资源和信贷出现瓶颈，最终私人消费不可能再增长，新的商业机遇，也因为利率和资产价格提升，变得无利可图。</p><p>第七，信用崩溃，信用显著收缩导致债务紧缩，形成流动性陷阱。从而完成一个完整的周期。</p><p>在读完这本书，你一定要记住这几个数字，一个存货周期是4.5年，一次资本性支出周期，也就是朱格拉周期是9年，通常我们会在这个周期中出现一次牛市，而每一次完整的房地产周期是18年左右，其中房价衰落会走4-5年。每个房地产周期会包含4个存货周期，和2个资本性周期，这些波长不一样，所以会有波峰波谷共振的时候，这种共振会让经济的抖动更加明显。</p><p>而在整个的周期循环当中，利率处于一个明显的核心位置，他的改变既影响股票，也影响债券，更影响经济增长，所以你判断一个人是不是真懂财经，就问他一个问题，最近的十年期国债收益率是多少？是正在上涨还是正在下降。如果他这都说不出来，那么就必然只是个推销员，而根本不是什么理财顾问和分析师。</p><p>巴克莱银行做了个表格，总结了二战到2005年以来的经济状况，对应的资产表现。分为四个时段，分别是高增长高通胀，高增长低通胀，以及低增长高通胀，和低增长低通胀。那么各种资产的表现如何呢？我们一个一个来说。</p><p>首先，高增长高通胀阶段，表现最好的是艺术品，年化平均收益9.2%，其次是房子，年化8.1%，第三是商品，有6.1%，之后是股票的平均表现是年化4.4%，债券则是-0.2%，现金最惨是-0.4%。</p><p>其次，高增长低通胀时期，表现最好的是商品，年化上涨15%，其次是股票13.4%，第三是房子11%，然后是艺术品7.5%，之后是现金2%，最差是债券，只有0.1%。</p><p>第三，低增长高通胀阶段，表现最好的股票，但也只有4.1%，其次是商品2.8%，第三是现金0.7%，艺术品是0.3%，债券是-0.8%，最差是房地产，-4.2%。</p><p>最后，低增长，低通胀，股票表现最好11.1%，然后是房地产，4.7%，之后是商品3.2%，现金2.2%，后面是艺术品和债券，几乎持平。</p><p>注意这是一个长期的统计，所以我们看到让人费解的现象，股票在各个时期收益都是正的，这就是告诉我们，在一个漫长的50年周期里，股票总是能赚钱的，最差也是年化4%，远好与其他的资产。而房地产在一个漫长的周期里面表现也是很不错的，最差的东西就是看似没有风险的债券和现金，绝对安全，其实就等于绝对的风险。</p><p>这里面我们要总结下了，扩张的早期，债券价格先涨，然后股票涨，其中金融消费，it、和小盘股，会先有表现机会，而消费类公用事业，大盘股则表现比较差，这时候也适合买房，商品方面表现整体不佳。</p><p>在扩张的后期，债券牛市，股票牛市，工业股表现更好，金融行业股开始变差，商铺住宅火热，全部商品开始上升。</p><p>在下降的早期阶段，债券价格下跌，股票下跌，公用事业表现相对较好，而小盘股，可选消费，IT股票暴跌。房地产此时也很不好。商品周期还是上升的，最后下降的后期，利率下降，债券价格止跌回升，股票也止跌回暖，这时候资源股伴随商品价格下跌而大跌。这就是一个周期的总体演变过程。</p><p>如此判断，2018年底，2019年初，应该不是下降的末端就是扩张的初期。我们的依据是，利率已经下降，债券牛市开启，但股票还在下跌，金融IT也没有走出来，以原油为代表的商品确实还在暴跌。所以大家应该有足够的耐心，也要时刻保持乐观。债券牛都来了，股票牛必然不远了。而且这很可能是一次18年大周期的末尾，所以长短周期共振，让2018年特别的糟糕。但这也意味着，很快就会产生新的大周期，而在新周期的早期，我们也通常会迎来共振效应。举个例子，70年代到80年代初，美国股市十几年不涨，但一旦他开始恢复上涨，就一下涨到了2000年，在这期间光道琼斯指数就涨了13倍。所以我们读了这么多书，应该充分认识什么是股市，股市会长期上涨，在所有的投资品当中，他的长期收益是最多的，但是他经常10年不涨，所以要求我们有足够大的耐心去等待价值的回归。而我们其实只需要用最笨的方法，知道他长期会涨，而且收益最多就够了。你越是想抓住他那个最大的涨幅，就往往适得其反。股市的嫉妒心很强，你越是对他友好，他就对你越友善，你不争，他就对你很大方，相反你越是想战胜他，他就一定会把你打翻在地。所以做好资产配置，留有足够的后手，只要不是疯狂的高估，那就尽量的留在市场里，这就是最正确的投资之道，最简单也最困难。没有足够大的格局，没有足够多的知识，你根本控制不住内心的煎熬，最后当你走出这个金刚伏魔圈的那一刻起，悲剧就已经注定了。</p><p>这就是本书的全部内容了，最后作者用了熊彼得的一句话作为结尾，周期并不像扁桃体那样，可以单独摘除，周期是像心跳一样，是整个有机体的核心。这意思就是说，站在宏观的角度来说，周期不可避免，如果你要想去避免周期，往往会把事情弄得更糟，比如有时候的救市政策会把泡泡吹的更大，用一个更严重的问题，去解决眼前这个问题。但是，这不是我们读这本书的目的，我们之所以看这本书，就是要了解周期的波动，了解他的波长，知道他的规律，并跟现实结合发现一些蛛丝马迹，当你了解了周期理论之后，就相当于拥有了通往未来的GPS，你知道现在你处于什么位置，所以你可以坦然面对，真正做到别人疯狂我恐惧，别人恐惧我疯狂，拥有这样的心态，不是因为巴菲特不怕赔钱，而是因为他知道，世界经济就是由一个又一个的周期组成的，而周期虽有波动，但永远滚滚向前。所以心态是格局和知识决定的，是通过你的仓位管理技术来实现的。那些天天在市场喊打喊杀，追逐热点的人，根本体会不到这句话的精髓，偶尔说说，也不过是装腔作势罢了。</p><p>最后我们还是回归一下这本书，我们讲了为什么会有周期，主要是因为约翰劳给这个世界带来了纸币，让货币供给不再是一个常数，货币问题就会引发利率变化，而利率变化会引发经济订单和生产制造，朱格拉先发现了9-10年经济就会出现一次危机，之后基钦发现了存货周期大概4.5年一次，库兹涅茨则找到了20年的长周期，与房地产周期基本吻合。而最长的是康德拉季耶夫周期，也叫康波周期。50年一次。这些周期会有共振的点，而周期共振往往会让经济和投资产生更大的波动。从资产来看，债券在股票之前，股票在商品之前，商品在房地产之前，一旦债券开始走牛，股票走牛也就不远了，一旦商品上涨，就要防范股市的风险了。最后我们告诉大家，周期永远滚滚向上，站在一个50年的大周期内，股票无论在任何周期内年化平均收益都是上涨的。所以我们必须要始终保持乐观。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这本逃不开的经济周期，进一步详尽地解释了房地产、股票、债券、黄金、汇率、大宗商品期货、收藏品等资产市场的特性，揭示了经济循环中各类资产的阶段表现及互动影响，帮助我们更精确地掌握市场脉动，顺应经济趋势，在经济萧条时捕捉市场机会，从而获得高收益。 &lt;/p&gt;
&lt;p&gt;这本书有三大部</summary>
      
    
    
    
    <category term="economics" scheme="https://github.com/categories/economics/"/>
    
    
    <category term="economics" scheme="https://github.com/tags/economics/"/>
    
  </entry>
  
  <entry>
    <title>面向并发的内存模型</title>
    <link href="https://github.com/2021/10/03/%E9%9D%A2%E5%90%91%E5%B9%B6%E5%8F%91%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://github.com/2021/10/03/%E9%9D%A2%E5%90%91%E5%B9%B6%E5%8F%91%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-10-03T09:19:16.000Z</published>
    <updated>2021-10-03T14:32:07.889Z</updated>
    
    <content type="html"><![CDATA[<p><strong>面向并发的内存模型</strong><br>在早期，CPU都是以单核的形式顺序执行机器指令。Go语言的祖先C语言正是这种顺序编程语言的代表。顺序编程语言中的顺序是指：所有的指令都是以串行的方式执行，在相同的时刻有且仅有一个CPU在顺序执行程序的指令。</p><p>随着处理器技术的发展，单核时代以提升处理器频率来提高运行效率的方式遇到了瓶颈，目前各种主流的CPU频率基本被锁定在了3GHZ附近。单核CPU的发展的停滞，给多核CPU的发展带来了机遇。相应地，编程语言也开始逐步向并行化的方向发展。Go语言正是在多核和网络化的时代背景下诞生的原生支持并发的编程语言。</p><p>常见的并行编程有多种模型，主要有多线程、消息传递等。从理论上来看，多线程和基于消息的并发编程是等价的。由于多线程并发模型可以自然对应到多核的处理器，主流的操作系统因此也都提供了系统级的多线程支持，同时从概念上讲多线程似乎也更直观，因此多线程编程模型逐步被吸纳到主流的编程语言特性或语言扩展库中。而主流编程语言对基于消息的并发编程模型支持则相比较少，Erlang语言是支持基于消息传递并发编程模型的代表者，它的并发体之间不共享内存。Go语言是基于消息并发模型的集大成者，它将基于CSP模型的并发编程内置到了语言中，通过一个go关键字就可以轻易地启动一个Goroutine，与Erlang不同的是Go语言的Goroutine之间是共享内存的。</p><p><strong>Goroutine和系统线程</strong><br>Goroutine是Go语言特有的并发体，是一种轻量级的线程，由go关键字启动。在真实的Go语言的实现中，goroutine和系统线程也不是等价的。尽管两者的区别实际上只是一个量的区别，但正是这个量变引发了Go语言并发编程质的飞跃。</p><p>首先，每个系统级线程都会有一个固定大小的栈（一般默认可能是2MB），这个栈主要用来保存函数递归调用时参数和局部变量。固定了栈的大小导致了两个问题：一是对于很多只需要很小的栈空间的线程来说是一个巨大的浪费，二是对于少数需要巨大栈空间的线程来说又面临栈溢出的风险。针对这两个问题的解决方案是：要么降低固定的栈大小，提升空间的利用率；要么增大栈的大小以允许更深的函数递归调用，但这两者是没法同时兼得的。相反，一个Goroutine会以一个很小的栈启动（可能是2KB或4KB），当遇到深度递归导致当前栈空间不足时，Goroutine会根据需要动态地伸缩栈的大小（主流实现中栈的最大值可达到1GB）。因为启动的代价很小，所以我们可以轻易地启动成千上万个Goroutine。</p><p>Go的运行时还包含了其自己的调度器，这个调度器使用了一些技术手段，可以在n个操作系统线程上多工调度m个Goroutine。Go调度器的工作和内核的调度是相似的，但是这个调度器只关注单独的Go程序中的Goroutine。Goroutine采用的是半抢占式的协作调度，只有在当前Goroutine发生阻塞时才会导致调度；同时发生在用户态，调度器会根据具体函数只保存必要的寄存器，切换的代价要比系统线程低得多。运行时有一个runtime.GOMAXPROCS变量，用于控制当前运行正常非阻塞Goroutine的系统线程数目。</p><p>在Go语言中启动一个Goroutine不仅和调用函数一样简单，而且Goroutine之间调度代价也很低，这些因素极大地促进了并发编程的流行和发展。</p><p><strong>原子操作</strong><br>所谓的原子操作就是并发编程中“最小的且不可并行化”的操作。通常，如果多个并发体对同一个共享资源进行的操作是原子的话，那么同一时刻最多只能有一个并发体对该资源进行操作。从线程角度看，在当前线程修改共享资源期间，其它的线程是不能访问该资源的。原子操作对于多线程并发编程模型来说，不会发生有别于单线程的意外情况，共享资源的完整性可以得到保证。</p><p>一般情况下，原子操作都是通过“互斥”访问来保证的，通常由特殊的CPU指令提供保护。当然，如果仅仅是想模拟下粗粒度的原子操作，我们可以借助于sync.Mutex来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;sync&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var total struct &#123;</span><br><span class="line">    sync.Mutex</span><br><span class="line">    value int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func worker(wg *sync.WaitGroup) &#123;</span><br><span class="line">    defer wg.Done()</span><br><span class="line"></span><br><span class="line">    for i := 0; i &lt;= 100; i++ &#123;</span><br><span class="line">        total.Lock()</span><br><span class="line">        total.value += i</span><br><span class="line">        total.Unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var wg sync.WaitGroup</span><br><span class="line">    wg.Add(2)</span><br><span class="line">    go worker(&amp;wg)</span><br><span class="line">    go worker(&amp;wg)</span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    fmt.Println(total.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在worker的循环中，为了保证total.value += i的原子性，我们通过sync.Mutex加锁和解锁来保证该语句在同一时刻只被一个线程访问。对于多线程模型的程序而言，进出临界区前后进行加锁和解锁都是必须的。如果没有锁的保护，total的最终值将由于多线程之间的竞争而可能会不正确。</p><p>用互斥锁来保护一个数值型的共享资源，麻烦且效率低下。标准库的sync/atomic包对原子操作提供了丰富的支持。我们可以重新实现上面的例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;sync&quot;</span><br><span class="line">    &quot;sync/atomic&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var total uint64</span><br><span class="line"></span><br><span class="line">func worker(wg *sync.WaitGroup) &#123;</span><br><span class="line">    defer wg.Done()</span><br><span class="line"></span><br><span class="line">    var i uint64</span><br><span class="line">    for i = 0; i &lt;= 100; i++ &#123;</span><br><span class="line">        atomic.AddUint64(&amp;total, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var wg sync.WaitGroup</span><br><span class="line">    wg.Add(2)</span><br><span class="line"></span><br><span class="line">    go worker(&amp;wg)</span><br><span class="line">    go worker(&amp;wg)</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>atomic.AddUint64函数调用保证了total的读取、更新和保存是一个原子操作，因此在多线程中访问也是安全的。</p><p>原子操作配合互斥锁可以实现非常高效的单件模式。互斥锁的代价比普通整数的原子读写高很多，在性能敏感的地方可以增加一个数字型的标志位，通过原子检测标志位状态降低互斥锁的使用次数来提高性能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">type singleton struct &#123;&#125;</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">    instance    *singleton</span><br><span class="line">    initialized uint32</span><br><span class="line">    mu          sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Instance() *singleton &#123;</span><br><span class="line">    if atomic.LoadUint32(&amp;initialized) == 1 &#123;</span><br><span class="line">        return instance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mu.Lock()</span><br><span class="line">    defer mu.Unlock()</span><br><span class="line"></span><br><span class="line">    if instance == nil &#123;</span><br><span class="line">        defer atomic.StoreUint32(&amp;initialized, 1)</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将通用的代码提取出来，就成了标准库中sync.Once的实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">type Once struct &#123;</span><br><span class="line">    m    Mutex</span><br><span class="line">    done uint32</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (o *Once) Do(f func()) &#123;</span><br><span class="line">    if atomic.LoadUint32(&amp;o.done) == 1 &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    o.m.Lock()</span><br><span class="line">    defer o.m.Unlock()</span><br><span class="line"></span><br><span class="line">    if o.done == 0 &#123;</span><br><span class="line">        defer atomic.StoreUint32(&amp;o.done, 1)</span><br><span class="line">        f()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于sync.Once重新实现单件模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">    instance *singleton</span><br><span class="line">    once     sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Instance() *singleton &#123;</span><br><span class="line">    once.Do(func() &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    return instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sync/atomic包对基本的数值类型及复杂对象的读写都提供了原子操作的支持。atomic.Value原子对象提供了Load和Store两个原子方法，分别用于加载和保存数据，返回值和参数都是interface{}类型，因此可以用于任意的自定义复杂类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var config atomic.Value // 保存当前配置信息</span><br><span class="line"></span><br><span class="line">// 初始化配置信息</span><br><span class="line">config.Store(loadConfig())</span><br><span class="line"></span><br><span class="line">// 启动一个后台线程, 加载更新后的配置信息</span><br><span class="line">go func() &#123;</span><br><span class="line">    for &#123;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        config.Store(loadConfig())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">// 用于处理请求的工作者线程始终采用最新的配置信息</span><br><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">    go func() &#123;</span><br><span class="line">        for r := range requests() &#123;</span><br><span class="line">            c := config.Load()</span><br><span class="line">            // ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简化的生产者消费者模型：后台线程生成最新的配置信息；前台多个工作者线程获取最新的配置信息。所有线程共享配置信息资源。<br><strong>顺序一致性内存模型</strong><br>如果只是想简单地在线程之间进行数据同步的话，原子操作已经为编程人员提供了一些同步保障。不过这种保障有一个前提：顺序一致性的内存模型。要了解顺序一致性，我们先看看一个简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var a string</span><br><span class="line">var done bool</span><br><span class="line"></span><br><span class="line">func setup() &#123;</span><br><span class="line">    a = &quot;hello, world&quot;</span><br><span class="line">    done = true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    go setup()</span><br><span class="line">    for !done &#123;&#125;</span><br><span class="line">    print(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建了setup线程，用于对字符串a的初始化工作，初始化完成之后设置done标志为true。main函数所在的主线程中，通过for !done {}检测done变为true时，认为字符串初始化工作完成，然后进行字符串的打印工作。</p><p>但是Go语言并不保证在main函数中观测到的对done的写入操作发生在对字符串a的写入的操作之后，因此程序很可能打印一个空字符串。更糟糕的是，因为两个线程之间没有同步事件，setup线程对done的写入操作甚至无法被main线程看到，main函数有可能陷入死循环中。</p><p>在Go语言中，同一个Goroutine线程内部，顺序一致性内存模型是得到保证的。但是不同的Goroutine之间，并不满足顺序一致性内存模型，需要通过明确定义的同步事件来作为同步的参考。如果两个事件不可排序，那么就说这两个事件是并发的。为了最大化并行，Go语言的编译器和处理器在不影响上述规定的前提下可能会对执行语句重新排序（CPU也会对一些指令进行乱序执行）。</p><p>因此，如果在一个Goroutine中顺序执行a = 1; b = 2;两个语句，虽然在当前的Goroutine中可以认为a = 1;语句先于b = 2;语句执行，但是在另一个Goroutine中b = 2;语句可能会先于a = 1;语句执行，甚至在另一个Goroutine中无法看到它们的变化（可能始终在寄存器中）。也就是说在另一个Goroutine看来, a = 1; b = 2;两个语句的执行顺序是不确定的。如果一个并发程序无法确定事件的顺序关系，那么程序的运行结果往往会有不确定的结果。比如下面这个程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    go println(&quot;你好, 世界&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据Go语言规范，main函数退出时程序结束，不会等待任何后台线程。因为Goroutine的执行和main函数的返回事件是并发的，谁都有可能先发生，所以什么时候打印，能否打印都是未知的。</p><p>用前面的原子操作并不能解决问题，因为我们无法确定两个原子操作之间的顺序。解决问题的办法就是通过同步原语来给两个事件明确排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    done := make(chan int)</span><br><span class="line"></span><br><span class="line">    go func()&#123;</span><br><span class="line">        println(&quot;你好, 世界&quot;)</span><br><span class="line">        done &lt;- 1</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    &lt;-done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当&lt;-done执行时，必然要求done &lt;- 1也已经执行。根据同一个Gorouine依然满足顺序一致性规则，我们可以判断当done &lt;- 1执行时，println(“你好, 世界”)语句必然已经执行完成了。因此，现在的程序确保可以正常打印结果。</p><p>当然，通过sync.Mutex互斥量也是可以实现同步的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    var mu sync.Mutex</span><br><span class="line"></span><br><span class="line">    mu.Lock()</span><br><span class="line">    go func()&#123;</span><br><span class="line">        println(&quot;你好, 世界&quot;)</span><br><span class="line">        mu.Unlock()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    mu.Lock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以确定后台线程的mu.Unlock()必然在println(“你好, 世界”)完成后发生（同一个线程满足顺序一致性），main函数的第二个mu.Lock()必然在后台线程的mu.Unlock()之后发生（sync.Mutex保证），此时后台线程的打印工作已经顺利完成了。<br><strong>初始化顺序</strong><br>前面函数章节中我们已经简单介绍过程序的初始化顺序，这是属于Go语言面向并发的内存模型的基础规范。</p><p>Go程序的初始化和执行总是从main.main函数开始的。但是如果main包里导入了其它的包，则会按照顺序将它们包含进main包里（这里的导入顺序依赖具体实现，一般可能是以文件名或包路径名的字符串顺序导入）。如果某个包被多次导入的话，在执行的时候只会导入一次。当一个包被导入时，如果它还导入了其它的包，则先将其它的包包含进来，然后创建和初始化这个包的常量和变量。然后就是调用包里的init函数，如果一个包有多个init函数的话，实现可能是以文件名的顺序调用，同一个文件内的多个init则是以出现的顺序依次调用（init不是普通函数，可以定义有多个，所以不能被其它函数调用）。最终，在main包的所有包常量、包变量被创建和初始化，并且init函数被执行后，才会进入main.main函数，程序开始正常执行。下图是Go程序函数启动顺序的示意图：<br><img src="/img/golang6.png"><br>要注意的是，在main.main函数执行之前所有代码都运行在同一个Goroutine中，也是运行在程序的主系统线程中。如果某个init函数内部用go关键字启动了新的Goroutine的话，新的Goroutine和main.main函数是并发执行的。</p><p>因为所有的init函数和main函数都是在主线程完成，它们也是满足顺序一致性模型的。<br><strong>Goroutine的创建</strong><br>go语句会在当前Goroutine对应函数返回前创建新的Goroutine. 例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a string</span><br><span class="line"></span><br><span class="line">func f() &#123;</span><br><span class="line">    print(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func hello() &#123;</span><br><span class="line">    a = &quot;hello, world&quot;</span><br><span class="line">    go f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行go f()语句创建Goroutine和hello函数是在同一个Goroutine中执行, 根据语句的书写顺序可以确定Goroutine的创建发生在hello函数返回之前, 但是新创建Goroutine对应的f()的执行事件和hello函数返回的事件则是不可排序的，也就是并发的。调用hello可能会在将来的某一时刻打印”hello, world”，也很可能是在hello函数执行完成后才打印。<br><strong>基于Channel的通信</strong><br>Channel通信是在Goroutine之间进行同步的主要方法。在无缓存的Channel上的每一次发送操作都有与其对应的接收操作相配对，发送和接收操作通常发生在不同的Goroutine上（在同一个Goroutine上执行2个操作很容易导致死锁）。无缓存的Channel上的发送操作总在对应的接收操作完成前发生.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var done = make(chan bool)</span><br><span class="line">var msg string</span><br><span class="line"></span><br><span class="line">func aGoroutine() &#123;</span><br><span class="line">    msg = &quot;你好, 世界&quot;</span><br><span class="line">    done &lt;- true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    go aGoroutine()</span><br><span class="line">    &lt;-done</span><br><span class="line">    println(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可保证打印出“hello, world”。该程序首先对msg进行写入，然后在done管道上发送同步信号，随后从done接收对应的同步信号，最后执行println函数。</p><p>若在关闭Channel后继续从中接收数据，接收者就会收到该Channel返回的零值。因此在这个例子中，用close(c)关闭管道代替done &lt;- false依然能保证该程序产生相同的行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var done = make(chan bool)</span><br><span class="line">var msg string</span><br><span class="line"></span><br><span class="line">func aGoroutine() &#123;</span><br><span class="line">    msg = &quot;你好, 世界&quot;</span><br><span class="line">    close(done)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    go aGoroutine()</span><br><span class="line">    &lt;-done</span><br><span class="line">    println(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于从无缓冲Channel进行的接收，发生在对该Channel进行的发送完成之前。</p><p>基于上面这个规则可知，交换两个Goroutine中的接收和发送操作也是可以的（但是很危险）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var done = make(chan bool)</span><br><span class="line">var msg string</span><br><span class="line"></span><br><span class="line">func aGoroutine() &#123;</span><br><span class="line">    msg = &quot;hello, world&quot;</span><br><span class="line">    &lt;-done</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">    go aGoroutine()</span><br><span class="line">    done &lt;- true</span><br><span class="line">    println(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可保证打印出“hello, world”。因为main线程中done &lt;- true发送完成前，后台线程&lt;-done接收已经开始，这保证msg = “hello, world”被执行了，所以之后println(msg)的msg已经被赋值过了。简而言之，后台线程首先对msg进行写入，然后从done中接收信号，随后main线程向done发送对应的信号，最后执行println函数完成。但是，若该Channel为带缓冲的（例如，done = make(chan bool, 1)），main线程的done &lt;- true接收操作将不会被后台线程的&lt;-done接收操作阻塞，该程序将无法保证打印出“hello, world”。</p><p>对于带缓冲的Channel，对于Channel的第K个接收完成操作发生在第K+C个发送操作完成之前，其中C是Channel的缓存大小。 如果将C设置为0自然就对应无缓存的Channel，也即使第K个接收完成在第K个发送完成之前。因为无缓存的Channel只能同步发1个，也就简化为前面无缓存Channel的规则：对于从无缓冲Channel进行的接收，发生在对该Channel进行的发送完成之前。</p><p>我们可以根据控制Channel的缓存大小来控制并发执行的Goroutine的最大数目, 例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var limit = make(chan int, 3)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    for _, w := range work &#123;</span><br><span class="line">        go func() &#123;</span><br><span class="line">            limit &lt;- 1</span><br><span class="line">            w()</span><br><span class="line">            &lt;-limit</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    select&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一句select{}是一个空的管道选择语句，该语句会导致main线程阻塞，从而避免程序过早退出。还有for{}、&lt;-make(chan int)等诸多方法可以达到类似的效果。因为main线程被阻塞了，如果需要程序正常退出的话可以通过调用os.Exit(0)实现。<br><strong>不靠谱的同步</strong><br>前面我们已经分析过，下面代码无法保证正常打印结果。实际的运行效果也是大概率不能正常输出结果。<br>func main() {<br>    go println(“你好, 世界”)<br>}<br>刚接触Go语言的话，可能希望通过加入一个随机的休眠时间来保证正常的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    go println(&quot;hello, world&quot;)</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为主线程休眠了1秒钟，因此这个程序大概率是可以正常输出结果的。因此，很多人会觉得这个程序已经没有问题了。但是这个程序是不稳健的，依然有失败的可能性。我们先假设程序是可以稳定输出结果的。因为Go线程的启动是非阻塞的，main线程显式休眠了1秒钟退出导致程序结束，我们可以近似地认为程序总共执行了1秒多时间。现在假设println函数内部实现休眠的时间大于main线程休眠的时间的话，就会导致矛盾：后台线程既然先于main线程完成打印，那么执行时间肯定是小于main线程执行时间的。当然这是不可能的。</p><p>严谨的并发程序的正确性不应该是依赖于CPU的执行速度和休眠时间等不靠谱的因素的。严谨的并发也应该是可以静态推导出结果的：根据线程内顺序一致性，结合Channel或sync同步事件的可排序性来推导，最终完成各个线程各段代码的偏序关系排序。如果两个事件无法根据此规则来排序，那么它们就是并发的，也就是执行先后顺序不可靠的。</p><p>解决同步问题的思路是相同的：使用显式的同步。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;面向并发的内存模型&lt;/strong&gt;&lt;br&gt;在早期，CPU都是以单核的形式顺序执行机器指令。Go语言的祖先C语言正是这种顺序编程语言的代表。顺序编程语言中的顺序是指：所有的指令都是以串行的方式执行，在相同的时刻有且仅有一个CPU在顺序执行程序的指令。&lt;/p&gt;</summary>
      
    
    
    
    <category term="golang" scheme="https://github.com/categories/golang/"/>
    
    
    <category term="golang" scheme="https://github.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>函数、方法和接口</title>
    <link href="https://github.com/2021/10/02/%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>https://github.com/2021/10/02/%E5%87%BD%E6%95%B0%E3%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-10-02T14:32:09.000Z</published>
    <updated>2021-10-02T15:08:01.865Z</updated>
    
    <content type="html"><![CDATA[<p><strong>函数、方法和接口</strong><br>函数对应操作序列，是程序的基本组成元素。Go语言中的函数有具名和匿名之分：具名函数一般对应于包级的函数，是匿名函数的一种特例，当匿名函数引用了外部作用域中的变量时就成了闭包函数，闭包函数是函数式编程语言的核心。方法是绑定到一个具体类型的特殊函数，Go语言中的方法是依托于类型的，必须在编译时静态绑定。接口定义了方法的集合，这些方法依托于运行时的接口对象，因此接口对应的方法是在运行时动态绑定的。Go语言通过隐式接口机制实现了鸭子面向对象模型。</p><p>Go语言程序的初始化和执行总是从main.main函数开始的。但是如果main包导入了其它的包，则会按照顺序将它们包含进main包里（这里的导入顺序依赖具体实现，一般可能是以文件名或包路径名的字符串顺序导入）。如果某个包被多次导入的话，在执行的时候只会导入一次。当一个包被导入时，如果它还导入了其它的包，则先将其它的包包含进来，然后创建和初始化这个包的常量和变量,再调用包里的init函数，如果一个包有多个init函数的话，调用顺序未定义(实现可能是以文件名的顺序调用)，同一个文件内的多个init则是以出现的顺序依次调用（init不是普通函数，可以定义有多个，所以也不能被其它函数调用）。最后，当main包的所有包级常量、变量被创建和初始化完成，并且init函数被执行后，才会进入main.main函数，程序开始正常执行。下图是Go程序函数启动顺序的示意图：<br><img src="/img/golang5.png"></p><p>要注意的是，在main.main函数执行之前所有代码都运行在同一个goroutine，也就是程序的主系统线程中。因此，如果某个init函数内部用go关键字启动了新的goroutine的话，新的goroutine只有在进入main.main函数之后才可能被执行到。<br><strong>函数</strong><br>在Go语言中，函数是第一类对象，我们可以将函数保持到变量中。函数主要有具名和匿名之分，包级函数一般都是具名函数，具名函数是匿名函数的一种特例。当然，Go语言中每个类型还可以有自己的方法，方法其实也是函数的一种。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 具名函数</span><br><span class="line">func Add(a, b int) int &#123;</span><br><span class="line">    return a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 匿名函数</span><br><span class="line">var Add = func(a, b int) int &#123;</span><br><span class="line">    return a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go语言中的函数可以有多个参数和多个返回值，参数和返回值都是以传值的方式和被调用者交换数据。在语法上，函数还支持可变数量的参数，可变数量的参数必须是最后出现的参数，可变数量的参数其实是一个切片类型的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 多个参数和多个返回值</span><br><span class="line">func Swap(a, b int) (int, int) &#123;</span><br><span class="line">    return b, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 可变数量的参数</span><br><span class="line">// more 对应 []int 切片类型</span><br><span class="line">func Sum(a int, more ...int) int &#123;</span><br><span class="line">    for _, v := range more &#123;</span><br><span class="line">        a += v</span><br><span class="line">    &#125;</span><br><span class="line">    return a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当可变参数是一个空接口类型时，调用者是否解包可变参数会导致不同的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    var a = []interface&#123;&#125;&#123;123, &quot;abc&quot;&#125;</span><br><span class="line"></span><br><span class="line">    Print(a...) // 123 abc</span><br><span class="line">    Print(a)    // [123 abc]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Print(a ...interface&#123;&#125;) &#123;</span><br><span class="line">    fmt.Println(a...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个Print调用时传入的参数是a…，等价于直接调用Print(123, “abc”)。第二个Print调用传入的是未解包的a，等价于直接调用Print([]interface{}{123, “abc”})。</p><p>不仅函数的参数可以有名字，也可以给函数的返回值命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func Find(m map[int]int, key int) (value int, ok bool) &#123;</span><br><span class="line">    value, ok = m[key]</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果返回值命名了，可以通过名字来修改返回值，也可以通过defer语句在return语句之后修改返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func Inc() (v int) &#123;</span><br><span class="line">    defer func()&#123; v++ &#125; ()</span><br><span class="line">    return 42</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中defer语句延迟执行了一个匿名函数，因为这个匿名函数捕获了外部函数的局部变量v，这种函数我们一般叫闭包。闭包对捕获的外部变量并不是传值方式访问，而是以引用的方式访问。</p><p>闭包的这种引用方式访问外部变量的行为可能会导致一些隐含的问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    for i := 0; i &lt; 3; i++ &#123;</span><br><span class="line">        defer func()&#123; println(i) &#125; ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Output:</span><br><span class="line">// 3</span><br><span class="line">// 3</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><p>因为是闭包，在for迭代语句中，每个defer语句延迟执行的函数引用的都是同一个i迭代变量，在循环结束后这个变量的值为3，因此最终输出的都是3。</p><p>修复的思路是在每轮迭代中为每个defer函数生成独有的变量。可以用下面两种方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    for i := 0; i &lt; 3; i++ &#123;</span><br><span class="line">        i := i // 定义一个循环体内局部变量i</span><br><span class="line">        defer func()&#123; println(i) &#125; ()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    for i := 0; i &lt; 3; i++ &#123;</span><br><span class="line">        // 通过函数传入i</span><br><span class="line">        // defer 语句会马上对调用参数求值</span><br><span class="line">        defer func(i int)&#123; println(i) &#125; (i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种方法是在循环体内部再定义一个局部变量，这样每次迭代defer语句的闭包函数捕获的都是不同的变量，这些变量的值对应迭代时的值。第二种方式是将迭代变量通过闭包函数的参数传入，defer语句会马上对调用参数求值。两种方式都是可以工作的。不过一般来说,在for循环内部执行defer语句并不是一个好的习惯，此处仅为示例，不建议使用。</p><p>Go语言中，如果以切片为参数调用函数时，有时候会给人一种参数采用了传引用的方式的假象：因为在被调用函数内部可以修改传入的切片的元素。其实，任何可以通过函数参数修改调用参数的情形，都是因为函数参数中显式或隐式传入了指针参数。函数参数传值的规范更准确说是只针对数据结构中固定的部分传值，例如字符串或切片对应结构体中的指针和字符串长度结构体传值，但是并不包含指针间接指向的内容。将切片类型的参数替换为类似reflect.SliceHeader结构体就很好理解切片传值的含义了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func twice(x []int) &#123;</span><br><span class="line">    for i := range x &#123;</span><br><span class="line">        x[i] *= 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type IntSliceHeader struct &#123;</span><br><span class="line">    Data []int</span><br><span class="line">    Len  int</span><br><span class="line">    Cap  int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func twice(x IntSliceHeader) &#123;</span><br><span class="line">    for i := 0; i &lt; x.Len; i++ &#123;</span><br><span class="line">        x.Data[i] *= 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为切片中的底层数组部分是通过隐式指针传递(指针本身依然是传值的，但是指针指向的却是同一份的数据)，所以被调用函数是可以通过指针修改掉调用参数切片中的数据。除了数据之外，切片结构还包含了切片长度和切片容量信息，这2个信息也是传值的。如果被调用函数中修改了Len或Cap信息的话，就无法反映到调用参数的切片中，这时候我们一般会通过返回修改后的切片来更新之前的切片。这也是为何内置的append必须要返回一个切片的原因。</p><p>Go语言中，函数还可以直接或间接地调用自己，也就是支持递归调用。Go语言函数的递归调用深度逻辑上没有限制，函数调用的栈是不会出现溢出错误的，因为Go语言运行时会根据需要动态地调整函数栈的大小。每个goroutine刚启动时只会分配很小的栈（4或8KB，具体依赖实现），根据需要动态调整栈的大小，栈最大可以达到GB级（依赖具体实现，在目前的实现中，32位体系结构为250MB,64位体系结构为1GB）。在Go1.4以前，Go的动态栈采用的是分段式的动态栈，通俗地说就是采用一个链表来实现动态栈，每个链表的节点内存位置不会发生变化。但是链表实现的动态栈对某些导致跨越链表不同节点的热点调用的性能影响较大，因为相邻的链表节点它们在内存位置一般不是相邻的，这会增加CPU高速缓存命中失败的几率。为了解决热点调用的CPU缓存命中率问题，Go1.4之后改用连续的动态栈实现，也就是采用一个类似动态数组的结构来表示栈。不过连续动态栈也带来了新的问题：当连续栈动态增长时，需要将之前的数据移动到新的内存空间，这会导致之前栈中全部变量的地址发生变化。虽然Go语言运行时会自动更新引用了地址变化的栈变量的指针，但最重要的一点是要明白Go语言中指针不再是固定不变的了（因此不能随意将指针保持到数值变量中，Go语言的地址也不能随意保存到不在GC控制的环境中，因此使用CGO时不能在C语言中长期持有Go语言对象的地址）。</p><p>因为，Go语言函数的栈会自动调整大小，所以普通Go程序员已经很少需要关心栈的运行机制的。在Go语言规范中甚至故意没有讲到栈和堆的概念。我们无法知道函数参数或局部变量到底是保存在栈中还是堆中，我们只需要知道它们能够正常工作就可以了。看看下面这个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func f(x int) *int &#123;</span><br><span class="line">    return &amp;x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func g() int &#123;</span><br><span class="line">    x = new(int)</span><br><span class="line">    return *x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个函数直接返回了函数参数变量的地址——这似乎是不可以的，因为如果参数变量在栈上的话，函数返回之后栈变量就失效了，返回的地址自然也应该失效了。但是Go语言的编译器和运行时比我们聪明的多，它会保证指针指向的变量在合适的地方。第二个函数，内部虽然调用new函数创建了*int类型的指针对象，但是依然不知道它具体保存在哪里。对于有C/C++编程经验的程序员需要强调的是：不用关心Go语言中函数栈和堆的问题，编译器和运行时会帮我们搞定；同样不要假设变量在内存中的位置是固定不变的，指针随时可能会变化，特别是在你不期望它变化的时候。</p><p><strong>方法</strong><br>方法一般是面向对象编程(OOP)的一个特性，在C++语言中方法对应一个类对象的成员函数，是关联到具体对象上的虚表中的。但是Go语言的方法却是关联到类型的，这样可以在编译阶段完成方法的静态绑定。一个面向对象的程序会用方法来表达其属性对应的操作，这样使用这个对象的用户就不需要直接去操作对象，而是借助方法来做这些事情。面向对象编程(OOP)进入主流开发领域一般认为是从C++开始的，C++就是在兼容C语言的基础之上支持了class等面向对象的特性。然后Java编程则号称是纯粹的面向对象语言，因为Java中函数是不能独立存在的，每个函数都必然是属于某个类的。</p><p>面向对象编程更多的只是一种思想，很多号称支持面向对象编程的语言只是将经常用到的特性内置到语言中了而已。Go语言的祖先C语言虽然不是一个支持面向对象的语言，但是C语言的标准库中的File相关的函数也用到了的面向对象编程的思想。下面我们实现一组C语言风格的File函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 文件对象</span><br><span class="line">type File struct &#123;</span><br><span class="line">    fd int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打开文件</span><br><span class="line">func OpenFile(name string) (f *File, err error) &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭文件</span><br><span class="line">func CloseFile(f *File) error &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 读文件数据</span><br><span class="line">func ReadFile(f *File, offset int64, data []byte) int &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中OpenFile类似构造函数用于打开文件对象，CloseFile类似析构函数用于关闭文件对象，ReadFile则类似普通的成员函数，这三个函数都是普通的函数。CloseFile和ReadFile作为普通函数，需要占用包级空间中的名字资源。不过CloseFile和ReadFile函数只是针对File类型对象的操作，这时候我们更希望这类函数和操作对象的类型紧密绑定在一起。</p><p>Go语言中的做法是，将CloseFile和ReadFile函数的第一个参数移动到函数名的开头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 关闭文件</span><br><span class="line">func (f *File) CloseFile() error &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 读文件数据</span><br><span class="line">func (f *File) ReadFile(offset int64, data []byte) int &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，CloseFile和ReadFile函数就成了File类型独有的方法了（而不是File对象方法）。它们也不再占用包级空间中的名字资源，同时File类型已经明确了它们操作对象，因此方法名字一般简化为Close和Read：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 关闭文件</span><br><span class="line">func (f *File) Close() error &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 读文件数据</span><br><span class="line">func (f *File) Read(offset int64, data []byte) int &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将第一个函数参数移动到函数前面，从代码角度看虽然只是一个小的改动，但是从编程哲学角度来看，Go语言已经是进入面向对象语言的行列了。我们可以给任何自定义类型添加一个或多个方法。每种类型对应的方法必须和类型的定义在同一个包中，因此是无法给int这类内置类型添加方法的（因为方法的定义和类型的定义不在一个包中）。对于给定的类型，每个方法的名字必须是唯一的，同时方法和函数一样也不支持重载。</p><p>方法是由函数演变而来，只是将函数的第一个对象参数移动到了函数名前面了而已。因此我们依然可以按照原始的过程式思维来使用方法。通过叫方法表达式的特性可以将方法还原为普通类型的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 不依赖具体的文件对象</span><br><span class="line">// func CloseFile(f *File) error</span><br><span class="line">var CloseFile = (*File).Close</span><br><span class="line"></span><br><span class="line">// 不依赖具体的文件对象</span><br><span class="line">// func ReadFile(f *File, offset int64, data []byte) int</span><br><span class="line">var ReadFile = (*File).Read</span><br><span class="line"></span><br><span class="line">// 文件处理</span><br><span class="line">f, _ := OpenFile(&quot;foo.dat&quot;)</span><br><span class="line">ReadFile(f, 0, data)</span><br><span class="line">CloseFile(f)</span><br></pre></td></tr></table></figure><p>在有些场景更关心一组相似的操作：比如Read读取一些数组，然后调用Close关闭。此时的环境中，用户并不关心操作对象的类型，只要能满足通用的Read和Close行为就可以了。不过在方法表达式中，因为得到的ReadFile和CloseFile函数参数中含有File这个特有的类型参数，这使得File相关的方法无法和其它不是File类型但是有着相同Read和Close方法的对象无缝适配。这种小困难难不倒我们Go语言码农，我们可以通过结合闭包特性来消除方法表达式中第一个参数类型的差异：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 先打开文件对象</span><br><span class="line">f, _ := OpenFile(&quot;foo.dat&quot;)</span><br><span class="line"></span><br><span class="line">// 绑定到了 f 对象</span><br><span class="line">// func Close() error</span><br><span class="line">var Close = func() error &#123;</span><br><span class="line">    return (*File).Close(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 绑定到了 f 对象</span><br><span class="line">// func Read(offset int64, data []byte) int</span><br><span class="line">var Read = func(offset int64, data []byte) int &#123;</span><br><span class="line">    return (*File).Read(f, offset, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文件处理</span><br><span class="line">Read(0, data)</span><br><span class="line">Close()</span><br></pre></td></tr></table></figure><p>这刚好是方法值也要解决的问题。我们用方法值特性可以简化实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 先打开文件对象</span><br><span class="line">f, _ := OpenFile(&quot;foo.dat&quot;)</span><br><span class="line"></span><br><span class="line">// 方法值: 绑定到了 f 对象</span><br><span class="line">// func Close() error</span><br><span class="line">var Close = f.Close</span><br><span class="line"></span><br><span class="line">// 方法值: 绑定到了 f 对象</span><br><span class="line">// func Read(offset int64, data []byte) int</span><br><span class="line">var Read = f.Read</span><br><span class="line"></span><br><span class="line">// 文件处理</span><br><span class="line">Read(0, data)</span><br><span class="line">Close()</span><br></pre></td></tr></table></figure><p>Go语言不支持传统面向对象中的继承特性，而是以自己特有的组合方式支持了方法的继承。Go语言中，通过在结构体内置匿名的成员来实现继承：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &quot;image/color&quot;</span><br><span class="line"></span><br><span class="line">type Point struct&#123; X, Y float64 &#125;</span><br><span class="line"></span><br><span class="line">type ColoredPoint struct &#123;</span><br><span class="line">    Point</span><br><span class="line">    Color color.RGBA</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然我们可以将ColoredPoint定义为一个有三个字段的扁平结构的结构体，但是我们这里将Point嵌入到ColoredPoint来提供X和Y这两个字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var cp ColoredPoint</span><br><span class="line">cp.X = 1</span><br><span class="line">fmt.Println(cp.Point.X) // &quot;1&quot;</span><br><span class="line">cp.Point.Y = 2</span><br><span class="line">fmt.Println(cp.Y)       // &quot;2&quot;</span><br></pre></td></tr></table></figure><p>通过嵌入匿名的成员，我们不仅可以继承匿名成员的内部成员，而且可以继承匿名成员类型所对应的方法。我们一般会将Point看作基类，把ColoredPoint看作是它的继承类或子类。不过这种方式继承的方法并不能实现C++中虚函数的多态特性。所有继承来的方法的接收者参数依然是那个匿名成员本身，而不是当前的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type Cache struct &#123;</span><br><span class="line">    m map[string]string</span><br><span class="line">    sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *Cache) Lookup(key string) string &#123;</span><br><span class="line">    p.Lock()</span><br><span class="line">    defer p.Unlock()</span><br><span class="line"></span><br><span class="line">    return p.m[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cache结构体类型通过嵌入一个匿名的sync.Mutex来继承它的Lock和Unlock方法. 但是在调用p.Lock()和p.Unlock()时, p并不是Lock和Unlock方法的真正接收者, 而是会将它们展开为p.Mutex.Lock()和p.Mutex.Unlock()调用. 这种展开是编译期完成的, 并没有运行时代价.</p><p>在传统的面向对象语言(eg.C++或Java)的继承中，子类的方法是在运行时动态绑定到对象的，因此基类实现的某些方法看到的this可能不是基类类型对应的对象，这个特性会导致基类方法运行的不确定性。而在Go语言通过嵌入匿名的成员来“继承”的基类方法，this就是实现该方法的类型的对象，Go语言中方法是编译时静态绑定的。如果需要虚函数的多态特性，我们需要借助Go语言接口来实现。<br><strong>接口</strong><br>Go语言之父Rob Pike曾说过一句名言：那些试图避免白痴行为的语言最终自己变成了白痴语言（Languages that try to disallow idiocy become themselves idiotic）。一般静态编程语言都有着严格的类型系统，这使得编译器可以深入检查程序员有没有作出什么出格的举动。但是，过于严格的类型系统却会使得编程太过繁琐，让程序员把大好的青春都浪费在了和编译器的斗争中。Go语言试图让程序员能在安全和灵活的编程之间取得一个平衡。它在提供严格的类型检查的同时，通过接口类型实现了对鸭子类型的支持，使得安全动态的编程变得相对容易。</p><p>Go的接口类型是对其它类型行为的抽象和概括；因为接口类型不会和特定的实现细节绑定在一起，通过这种抽象的方式我们可以让对象更加灵活和更具有适应能力。很多面向对象的语言都有相似的接口概念，但Go语言中接口类型的独特之处在于它是满足隐式实现的鸭子类型。所谓鸭子类型说的是：只要走起路来像鸭子、叫起来也像鸭子，那么就可以把它当作鸭子。Go语言中的面向对象就是如此，如果一个对象只要看起来像是某种接口类型的实现，那么它就可以作为该接口类型使用。这种设计可以让你创建一个新的接口类型满足已经存在的具体类型却不用去破坏这些类型原有的定义；当我们使用的类型来自于不受我们控制的包时这种设计尤其灵活有用。Go语言的接口类型是延迟绑定，可以实现类似虚函数的多态功能。</p><p>接口在Go语言中无处不在，在“Hello world”的例子中，fmt.Printf函数的设计就是完全基于接口的，它的真正功能由fmt.Fprintf函数完成。用于表示错误的error类型更是内置的接口类型。在C语言中，printf只能将几种有限的基础数据类型打印到文件对象中。但是Go语言灵活接口特性，fmt.Fprintf却可以向任何自定义的输出流对象打印，可以打印到文件或标准输出、也可以打印到网络、甚至可以打印到一个压缩文件；同时，打印的数据也不仅仅局限于语言内置的基础类型，任意隐式满足fmt.Stringer接口的对象都可以打印，不满足fmt.Stringer接口的依然可以通过反射的技术打印。fmt.Fprintf函数的签名如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Fprintf(w io.Writer, format string, args ...interface&#123;&#125;) (int, error)</span><br></pre></td></tr></table></figure><p>其中io.Writer用于输出的接口，error是内置的错误接口，它们的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type io.Writer interface &#123;</span><br><span class="line">    Write(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type error interface &#123;</span><br><span class="line">    Error() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过定制自己的输出对象，将每个字符转为大写字符后输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type UpperWriter struct &#123;</span><br><span class="line">    io.Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *UpperWriter) Write(data []byte) (n int, err error) &#123;</span><br><span class="line">    return p.Writer.Write(bytes.ToUpper(data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Fprintln(&amp;UpperWriter&#123;os.Stdout&#125;, &quot;hello, world&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们也可以定义自己的打印格式来实现将每个字符转为大写字符后输出的效果。对于每个要打印的对象，如果满足了fmt.Stringer接口，则默认使用对象的String方法返回的结果打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type UpperString string</span><br><span class="line"></span><br><span class="line">func (s UpperString) String() string &#123;</span><br><span class="line">    return strings.ToUpper(string(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type fmt.Stringer interface &#123;</span><br><span class="line">    String() string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Fprintln(os.Stdout, UpperString(&quot;hello, world&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go语言中，对于基础类型（非接口类型）不支持隐式的转换，我们无法将一个int类型的值直接赋值给int64类型的变量，也无法将int类型的值赋值给底层是int类型的新定义命名类型的变量。Go语言对基础类型的类型一致性要求可谓是非常的严格，但是Go语言对于接口类型的转换则非常的灵活。对象和接口之间的转换、接口和接口之间的转换都可能是隐式的转换。可以看下面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">    a io.ReadCloser = (*os.File)(f) // 隐式转换, *os.File 满足 io.ReadCloser 接口</span><br><span class="line">    b io.Reader     = a             // 隐式转换, io.ReadCloser 满足 io.Reader 接口</span><br><span class="line">    c io.Closer     = a             // 隐式转换, io.ReadCloser 满足 io.Closer 接口</span><br><span class="line">    d io.Reader     = c.(io.Reader) // 显式转换, io.Closer 不满足 io.Reader 接口</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>有时候对象和接口之间太灵活了，导致我们需要人为地限制这种无意之间的适配。常见的做法是定义一个含特殊方法来区分接口。比如runtime包中的Error接口就定义了一个特有的RuntimeError方法，用于避免其它类型无意中适配了该接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type runtime.Error interface &#123;</span><br><span class="line">    error</span><br><span class="line"></span><br><span class="line">    // RuntimeError is a no-op function but</span><br><span class="line">    // serves to distinguish types that are run time</span><br><span class="line">    // errors from ordinary errors: a type is a</span><br><span class="line">    // run time error if it has a RuntimeError method.</span><br><span class="line">    RuntimeError()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在protobuf中，Message接口也采用了类似的方法，也定义了一个特有的ProtoMessage，用于避免其它类型无意中适配了该接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type proto.Message interface &#123;</span><br><span class="line">    Reset()</span><br><span class="line">    String() string</span><br><span class="line">    ProtoMessage()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这种做法只是君子协定，如果有人刻意伪造一个proto.Message接口也是很容易的。再严格一点的做法是给接口定义一个私有方法。只有满足了这个私有方法的对象才可能满足这个接口，而私有方法的名字是包含包的绝对路径名的，因此只能在包内部实现这个私有方法才能满足这个接口。测试包中的testing.TB接口就是采用类似的技术：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type testing.TB interface &#123;</span><br><span class="line">    Error(args ...interface&#123;&#125;)</span><br><span class="line">    Errorf(format string, args ...interface&#123;&#125;)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    // A private method to prevent users implementing the</span><br><span class="line">    // interface and so future additions to it will not</span><br><span class="line">    // violate Go 1 compatibility.</span><br><span class="line">    private()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这种通过私有方法禁止外部对象实现接口的做法也是有代价的：首先是这个接口只能包内部使用，外部包正常情况下是无法直接创建满足该接口对象的；其次，这种防护措施也不是绝对的，恶意的用户依然可以绕过这种保护机制。</p><p>在前面的方法一节中我们讲到，通过在结构体中嵌入匿名类型成员，可以继承匿名类型的方法。其实这个被嵌入的匿名成员不一定是普通类型，也可以是接口类型。我们可以通过嵌入匿名的testing.TB接口来伪造私有的private方法，因为接口方法是延迟绑定，编译时private方法是否真的存在并不重要。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type TB struct &#123;</span><br><span class="line">    testing.TB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *TB) Fatal(args ...interface&#123;&#125;) &#123;</span><br><span class="line">    fmt.Println(&quot;TB.Fatal disabled!&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var tb testing.TB = new(TB)</span><br><span class="line">    tb.Fatal(&quot;Hello, playground&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在自己的TB结构体类型中重新实现了Fatal方法，然后通过将对象隐式转换为testing.TB接口类型（因为内嵌了匿名的testing.TB对象，因此是满足testing.TB接口的），然后通过testing.TB接口来调用我们自己的Fatal方法。</p><p>这种通过嵌入匿名接口或嵌入匿名指针对象来实现继承的做法其实是一种纯虚继承，我们继承的只是接口指定的规范，真正的实现在运行的时候才被注入。比如，我们可以模拟实现一个gRPC的插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">type grpcPlugin struct &#123;</span><br><span class="line">    *generator.Generator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *grpcPlugin) Name() string &#123; return &quot;grpc&quot; &#125;</span><br><span class="line"></span><br><span class="line">func (p *grpcPlugin) Init(g *generator.Generator) &#123;</span><br><span class="line">    p.Generator = g</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *grpcPlugin) GenerateImports(file *generator.FileDescriptor) &#123;</span><br><span class="line">    if len(file.Service) == 0 &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p.P(`import &quot;google.golang.org/grpc&quot;`)</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造的grpcPlugin类型对象必须满足generate.Plugin接口（在”github.com/golang/protobuf/protoc-gen-go/generator”包中）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">type Plugin interface &#123;</span><br><span class="line">    // Name identifies the plugin.</span><br><span class="line">    Name() string</span><br><span class="line">    // Init is called once after data structures are built but before</span><br><span class="line">    // code generation begins.</span><br><span class="line">    Init(g *Generator)</span><br><span class="line">    // Generate produces the code generated by the plugin for this file,</span><br><span class="line">    // except for the imports, by calling the generator&#x27;s methods</span><br><span class="line">    // P, In, and Out.</span><br><span class="line">    Generate(file *FileDescriptor)</span><br><span class="line">    // GenerateImports produces the import declarations for this file.</span><br><span class="line">    // It is called after Generate.</span><br><span class="line">    GenerateImports(file *FileDescriptor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>generate.Plugin接口对应的grpcPlugin类型的GenerateImports方法中使用的p.P(…)函数却是通过Init函数注入的generator.Generator对象实现。这里的generator.Generator对应一个具体类型，但是如果generator.Generator是接口类型的话我们甚至可以传入直接的实现。</p><p>Go语言通过几种简单特性的组合，就轻易就实现了鸭子面向对象和虚拟继承等高级特性，真的是不可思议。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;函数、方法和接口&lt;/strong&gt;&lt;br&gt;函数对应操作序列，是程序的基本组成元素。Go语言中的函数有具名和匿名之分：具名函数一般对应于包级的函数，是匿名函数的一种特例，当匿名函数引用了外部作用域中的变量时就成了闭包函数，闭包函数是函数式编程语言的核心。方法是</summary>
      
    
    
    
    <category term="golang" scheme="https://github.com/categories/golang/"/>
    
    
    <category term="golang" scheme="https://github.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>饥饿的盛世</title>
    <link href="https://github.com/2021/10/01/%E9%A5%A5%E9%A5%BF%E7%9A%84%E7%9B%9B%E4%B8%96/"/>
    <id>https://github.com/2021/10/01/%E9%A5%A5%E9%A5%BF%E7%9A%84%E7%9B%9B%E4%B8%96/</id>
    <published>2021-10-01T14:57:10.000Z</published>
    <updated>2021-10-01T14:59:07.447Z</updated>
    
    <content type="html"><![CDATA[<p>饥饿的盛世。作者是著名历史作家张宏杰先生。他这本书里描写了康雍乾盛世的真实情况，可能会完全颠覆掉您对于中国历史上盛世的印象。话不多说，我们看看在乾隆朝，到底发生了什么？是不是真像电视剧里演的那么繁荣昌盛。</p><p>书里上来就介绍了康熙雍正乾隆的关系，祖孙三代，但是帝王家的孩子跟普通家的孩子不一样，以至于康熙很久都根本没见过乾隆这个孙子，还是在雍正的运作下，10岁的乾隆才和康熙见了一面，这已经是一种殊荣了，要知道康熙一共97个孙子，能见过面的不超过一半。当时老皇帝一见弘历也就是后来的乾隆，就觉得这孩子非常大气。其实当时乾隆的背景不好，因为他妈是钮钴禄氏，并不是什么显赫的家族，进入雍正王府，估计只是个丫头。所以乾隆这样的身世不太会引起别人的注意。而当时康熙最喜欢的孙子是太子的长子，康熙也知道当时的太子不堪重用，但碍于喜欢这个孙子，所以才迟迟下不了决心，而雍正为了得到皇位，所以故意在自己的儿子里选了一个最出色的，介绍给康熙，希望借此扭转局面。</p><p>后来，果然事情朝着雍正希望的方向发展，康熙竟然把乾隆带在了身边。在此之前也只有太子长子有这样的特殊待遇，后来祖孙两打猎，乾隆遇到一只熊，康熙打了一枪，黑熊倒地，乾隆一下子愣住了。在康熙的提醒下，他才犹豫着骑马向前，谁想到黑熊突然又站起来扑向了乾隆，这时候事出紧急，康熙马上开了第二枪，打死了黑熊。这时候康熙突然意识到可能冥冥中有天意，为什么偏偏这时候乾隆犹豫了一下，如果他要直接上前，可能就被黑熊所伤。觉得这是乾隆的福气所在，这点让康熙深信不疑。然后各种史料记载，康熙不断夸乾隆是个有福之人。后来也确实如此，乾隆一直活到89岁。一直活到了1799年才去世，而跟他同年去世的还有美国的第一任总统华盛顿。而华盛顿通常被视为是一位近代的总统。一个古代的皇帝跟一个近代的总统同一年去世，恰恰也说明了，中国在这一时期已经远远落后了世界一个时代。</p><p>在朝鲜的李朝实录里记载，后来康熙爷病重，在病榻之上，立雍正胤禛为嗣皇，特意点名雍正第二子弘历英雄气象，封太子。所以，雍正得到皇位，确实跟乾隆有很大关系，而且清朝中期这几个皇帝都挺有意思，从康熙开始，雍正乾隆嘉庆基本死前都没什么征兆，特别是雍正，白天还好好的，晚上就不行了。年仅58岁就挂了。后来史学家们一致认为，雍正是因为吃了太多丹药，最后很可能是汞中毒。所谓不作不死。当时雍正死的突然，甚至没有立太子。但其实老谋深算的雍正，早已经秘密的将密诏藏在了正大光明的匾额后面。后来在重臣张廷玉主持下，25岁的乾隆继位。他也是清朝到现在为止，唯一一个顺理成章继承大统，而没有血雨腥风争夺皇位的皇帝。所以现在说回去，康熙说这孩子有福气，确实不假。</p><p>康熙当年的风格是宽仁，而雍正的风格是严谨，所以历史的评价康熙更高。大家也都更喜欢康熙皇帝，但其实康熙晚年由于太过宽松，一度导致朝政废弛，要不是雍正工作狂一样严谨的态度，恐怕大清早就衰落了。所以别被甄嬛传给骗了，历史上的雍正哪有那么多闲心去光顾后宫，他一年就给自己放一天假，一天批阅奏章无数。平均下来每天要写8000到1万字，你算算这工作量，还要上朝，议政，会见大臣和看书。基本一天排的满满的。大家之所以不喜欢他，编排他，是因为他太严格了。所以明明是康雍乾盛世，后来大家就说成了康乾盛世，反而把雍正的功劳给抹杀了。这些其实乾隆都看见了，所以他上台之后就意识到，不能再像他父亲一样吃力不讨好。甚至还要唱反调，比如他把得宠的那些道士全都赶走了，这其实就是当众打雍正的脸，还有雍正定下的国策，鼓励百姓开荒，结果很多地方官为了升官发财，乱报数字，结果老百姓的赋税跟着土地走，数字上去了，土地却没开垦，百姓的赋税越来越重，乾隆上来就说，谁在瞎报数字，我就弄他。之前乱报的，也要一一核查。这一举措确实深得人心。</p><p>乾隆接了一个好摊子，是帝国蒸蒸日上的年代，而欧洲也在开始工业革命，还没有力量顾及东方。所以他命真的很好。乾隆用了很多前朝重臣，像张廷玉，鄂尔泰这都是几朝老臣，甚至一些被雍正判了刑的，被判了死刑的，也都让乾隆给放出来了。2000多名官员被他从轻发落。乾隆又回到了康熙宽仁治天下的老路上。</p><p>乾隆还很孝顺，特别是对那个丫鬟出身的亲妈，一向节俭的乾隆，给老太太办寿宴却竭尽奢侈了一把，对太后尊重，但也不是全无戒心，乾隆决不许后宫干政。对于太后身边的亲戚也是打压。对亲兄弟也是如此，他没有像雍正那样把政敌兄弟全都下狱，事实上他的兄弟也不是政敌，所以好吃好喝养着你，但绝不允许你碰政治。他还把那些叔叔辈的亲王们，踢出了军机处。从这开始，亲王基本就远离政治了，直到慈禧的时候，亲王才重新回到政治舞台。</p><p>乾隆年幼时候的好友，也没捞到好处，反而也被他给结束了政治生涯，有位老同学叫做福彭，这人也是相当干练，乾隆继位后，很多人都觉得福彭应该有很好地发展，结果他被从封疆大吏的岗位召回，后来一直不受重用。40岁就郁闷死了。这其实也没办法，一旦你当上皇帝，也就意味着要以天下人为敌，你不可能再有朋友。所以大家别被铁齿铜牙纪晓岚给骗了，一个皇帝一个总理和一个图书馆馆长是不可能玩到一块去的。</p><p>乾隆对于大臣更是琢么透了，特别对于官官相护，有一次一个官员给另一个官员求情，乾隆就想他两到底什么关系呢？结果发现，求情官员的老师和被求情官员是同一年的，属于同学。所以他连同求情的，被求情的，以及求情的老师一块都罚了。乾隆一向就是挑动群众斗群众，只有当官的互掐，皇帝才能有存在感，一旦官员抱团了，皇帝也就危险了。所以他故意让张廷玉代表汉族官员势力，让鄂尔泰代表满族官员势力，让这两派人互相掐。甚至在鄂尔泰猛攻张廷玉的时候，乾隆还故意和稀泥，他深知，不可能让鄂尔泰一家独大。他要维持这种政治平衡。但鄂尔泰并不懂这一套，他仍然我行我素，结党营私，攻击对自己不利的官员。后来乾隆屡屡敲打鄂尔泰，作者说鄂尔泰也是命好，乾隆10年就死了，如果要活到乾隆13年之后，估计十有八九就难得善终了。因为这一年之后，也许是皇位坐稳了，乾隆突然收起了他的仁慈宽容。开始杀鸡儆猴。</p><p>如果问历史上谁是写诗小能手，乾隆说第二没人敢说第一，要知道全唐诗2200多位作者，一共才写了48000首诗。而乾隆一个人就写了41000多首诗，他写诗的频率超过日记，最牛逼的时候，一个小时就写了8首诗，当然了，萝卜快了不洗泥，乾隆诗的质量，其实也跟日记差不了多少。当时的皇后也不像还珠格格里那么恶毒，相反富察氏皇后是一位大家闺秀，而且还很大气，并不爱珠宝首饰那些俗气的东西，而且生活节俭。跟乾隆爷的感情很好。即便后来年老色衰，皇帝也依旧依赖着他。不过这个皇后却比较倒霉，先生个闺女14个月夭折了，后来生个儿子，乾隆视为珍宝，甚至已经写好小纸条，将来传位给这个儿子，当时乾隆也才26岁，但没想到后来这个孩子9岁的时候得了个感冒，又死了。这对于皇后的打击是巨大的，经过7年的努力，皇后再生了个儿子，这次乾隆就更宝贝了，但天不随人愿，2岁的皇子，得了天花又没了。乾隆本想安慰皇后，带着他和太后出游并祭祀泰山，但谁想到，再次乐极生悲。在出行的路上皇后先是发烧，然后就一命呜呼。22年夫妻，乾隆后来写了无数首诗来祭奠这个富察氏皇后。继富察氏之后当上皇后的叫做乌拉那拉氏，也是一位端庄大气的皇后，乾隆也说不出他有什么不好，但就是不怎么喜欢他。他还是一心念着富察氏皇后，甚至到80岁了，乾隆还说，唯一高兴的事，就是快能见到富察氏皇后了。</p><p>康雍乾盛世的顶点，乾隆朝的事情。乾隆十三年是个转折点，之前乾隆一直是一个宽容仁慈的皇帝，但这一年之后却心性大变。这一年乾隆有两件烦心事，一个是金川之战陷入僵局，另一个就是富察氏皇后去世。乾隆要大办后事。在这其中，一些官员也是应付差事，没太上心，这种态度激怒了丧妻之痛的乾隆，翰林院把满文翻译成汉文的过程中，翻译错了一个词，这让龙颜震怒，直接要治罪，刑部不敢耽搁，直接判了个绞监候，但乾隆仍然不解恨，不但给改成了斩监侯，直接咔嚓了，还把刑部的官员全都革职治罪。这一下震惊了全国官员，但仅仅是个开始，后来乾隆发现给皇后做的册书和宝玺不好看，工部全部问罪，祭祀典礼上桌子没擦干净，光禄寺全都降职，礼仪环节上出了个卡壳，礼部尚书被降职。一个皇后的葬礼几乎关系到了整个大清的国运，这在历史上还没有出现过。</p><p>当然乾隆的残暴还不止这些，清朝有不成文规定，帝后发丧，百日不得剃头。但其实从未严格执行，甚至雍正帝驾崩，很多人也是剃头了的，并没有被任何追究。但这次不一样了，乾隆觉得这是对死去皇后大不敬，竟然要一律处死，后来一打听人太多，不得不重新考虑，最后还是赐死了一个总督，革职了两个巡抚。在丧礼上，两个皇子哭的不够悲痛，被乾隆斥责，并发狠话，这两孩子不行，我不杀你，你以后也别想当皇帝了，好好活着去吧。就因为这点事，两个皇子遍无缘竞争皇位。有人说乾隆疯了，也有人说这是乾隆压抑多年不满的一次总爆发，在极度悲哀之后，之前的戏已经演不下去了。</p><p>这时候，雍正朝扼杀的贪污腐败，又开始抬头。这让乾隆就更是气愤，他觉得这些大臣有点给脸不要脸的感觉，我宽仁执政，你们却利用了我的宽仁捞钱。此外，贩卖私盐也到处出现，让朝廷的税收大幅受损。这些都给了乾隆当头一闷棍，告诉他儒家那一套治国理念，也许未必行得通。他过高的估计了官僚们的品格。而实际上在元朝和明朝的冲击下，早已经人心不古。以德治国只能是一句空话。面对这样的局面，摆在乾隆面前的路只有一条，那就是必须马上纠错，按照他老爸雍正的路子来，从儒家切换到法家的路子上来。所以他才性情大变，借着皇后发丧发飙，让天下人知道，老虎不发威，你当我病猫。此时在乾隆眼中，这些大臣都是办事不利的奴才。特别是金川之战，打个数万人口的弹丸之地，竟然耗银2000万两，用兵20多万还打不下来，这让乾隆简直颜面扫地。领兵的三个将领，全都被干掉了。</p><p>办事不利尚且被判死刑，那些贪污的就更惨了，但为了减少损失，乾隆规定先给判死缓，这期间把你家卖了看能不能补上亏空，如果补不上就直接杀。这让一大堆贪官丢了脑袋。</p><p>从这个时候开始，乾隆跟大臣的关系就彻底闹掰了。不但经常辱骂大臣，有的时候还要折辱一番，甚至还搞恶作剧，在修河道的时候，把监工不利的大臣跟贪污死刑犯一起押到刑场，观摩咔嚓别人。监工当场就吓尿了。后来一刻不敢松懈，活活累死在河道上。</p><p>对于张廷玉这样的三朝老臣，乾隆也不留情面了。张廷玉当年就是康熙爷的贴身秘书，45岁做到了副部长，雍正朝更是成为了皇帝左膀右臂，雍正甚至说一天都离不开张廷玉，最后任职首席军机，掌管权利最大的户部和吏部，一手管人一手管钱，可谓权倾天下。雍正甚至许下承诺，让张廷玉配享太庙。也就是死了之后，牌位放到太庙里，这可是不得了的荣誉，到太庙磕头的全都是皇帝，给祖先磕头的时候，也顺便给你磕头了，这还了得吗？</p><p>乾隆一开始对于张廷玉也是客气有加，甚至让太监搀着他，怕他跌倒。而张廷玉这个人也是为人谨慎，他深知官做到他这个级别的，很难有善终。大部分都是被干掉的。所谓伴君如伴虎，但他这40多年当官也不是白混的，深知官场之道，尽量在皇帝面前收起自己的私心，他还自己总结，不能像海瑞那么刚直，皇帝不高兴，也不能像岳飞那么讲原则，要从皇帝本身的利益出发看问题，第三就是权力太大还不谨慎，历史上最倒霉的就是权臣。第四就是名声不能太好，大臣名声太好，皇帝名声就不好了。你如果太牛逼，皇帝就会想办法弄你了。所以要尽量让皇帝英明神武一点。万言万当不如一默，也就是你在牛逼，也不如把嘴闭上，少说话，后人对张廷玉的评价就是，很多事都是他跟皇帝一起促膝长谈商量出来的，但几乎没有一件好事记在了他的名下。他几乎把功劳都给了老板，这么一个职场老油条，最后结果又是怎样呢？可惜了两点，一个是他活的太长了，另一个是他碰上了乾隆。乾隆实在是太精明，这些大臣的权谋之术全都在乾隆的掌握之中，本来一开始乾隆的目光都在桀骜不驯的鄂尔泰身上，有个调皮捣蛋的，当然吸引了全部火力，所以张廷玉这边很安全，但谁成想鄂尔泰死的太早了，于是就把他暴露了。接下来乾隆的目光就全都投向了张廷玉，身居高位几十年一点问题没有，这是不可能的。所以张廷玉也是如履薄冰，后来果然乾隆下手了，先是让张廷玉退出早朝，也不让他参与核心政务，张廷玉逐渐被边缘化。这时的张廷玉已经快80了，都说老狐狸老狐狸，但狐狸太老了，有时候就也容易犯错误。他找了个机会，跟皇帝辞职，但乾隆不同意，当时乾隆想的是，虽然人老了，但仍然有很多经验，当个顾问还是好的，而且配享太庙也是雍正给的，所以不可能让他回家。</p><p>但是张廷玉接下来就犯了第一个错误，他说当年朱元璋就放刘伯温告老还乡，这下乾隆就不高兴了，张廷玉把乾隆比上了朱元璋，意思是不是卸磨杀驴呢？从乾隆的本意来说，他其实恭敬的只是雍正的遗诏，但对于张廷玉这个人来说，他反而希望抓住他的小辫子，以彰显自己英明神武超过雍正，用事实证明雍正看走眼了。所以乾隆，说了一句，你别比刘伯温，也看看人家诸葛亮，学学人家的鞠躬尽瘁。张廷玉一下就明白了，乾隆嫌他对自己不够忠诚。看不起幼主。之后乾隆更绝，把这一对话，昭告天下，这就相当于告诉所有人，我跟张廷玉的关系一般。</p><p>又过了几年，张廷玉更老了，牙都掉光了。这时候他再次跟乾隆提出辞职，这时候乾隆说实话，已经动了恻隐之心，后来乾隆给了一道旨意，说我实在不忍说再见，要走要留，张廷玉你自己定吧。实际上这已经是松口了，但是这可是给张廷玉出了一道难题，说走就说明彻底跟皇帝翻脸，说明没感情，说留又实在是不敢在待了。乾隆设想的是，这老小子肯定是两面做好人，一方面表现出不依不舍，最后还是选择了走，他也就顺水推舟放他一马完了，这样也算对得起雍正了，你看我留了，他非要走我也没办法。</p><p>但他万万没想到，张廷玉真是老糊涂了，立马就谢恩，说我马上就走。这让乾隆有点伤心了。但也不想再跟他较劲，但此时张廷玉的第三个昏招来了，他还想着配享太庙的事，怕自己一走，这个殊荣也吹了，于是舔着老脸去找乾隆，让皇上给他写个保证书。乾隆这个气啊，心想你还能要点逼脸吗？后来乾隆给他写了首诗，大意就是说，先皇让你配享太庙，本来这事没啥问题，现在你让我写保证书，是怕我说话不算数？老实说我也不知道先皇看上你哪好？这首诗重点在于没啥问题的意思上面，张廷玉如获至宝，心满意足的走了，可能是太高兴了，都忘了回来谢恩。这终于把乾隆的火给点燃了。大骂张廷玉。如果事情到这就完了，乾隆也顶多发发牢骚，张廷玉也算善终。但偏偏一个眼线把乾隆爷大怒的消息告诉了张廷玉，这时候张廷玉出了第四个昏招，他竟然去负荆请罪了。这下可完蛋的完了，这就是告诉皇帝，你身边有我的眼线，你的一举一动我都知道。这可是一个朋党的铁证。<br>乾隆和张廷玉4次交锋，张廷玉昏招百出，先是辞职把皇帝比成了杀功臣的朱元璋，后又一口答应乾隆的试探，没有表现一丝留恋，第三又去找皇帝写保证书还不谢恩，第四在得知皇帝大怒之后，主动请罪。告诉皇帝，你身边有我的眼线。这下皇帝怒了，直接列他四大罪状，说他只不过是个高级秘书，论功劳还不如鄂尔泰。但念你三朝老臣，也就不再问罪了。免了他的伯爵之位。让他赶紧滚蛋。</p><p>但张廷玉可能是之前把好运气都用完了，晚年实在是太背了。他选的离京日期偏偏又赶上了皇长子去世，张廷玉还当过皇长子老师所以必须参加葬礼，此时皇上心情本就很糟糕，而葬礼刚一过，张廷玉就来要求马上走人。所以这算是撞到枪口上了。他觉得这老头真是一点感情都不讲了。于是旧事重提，说张廷玉不配配享太庙，还把曾经配享太庙的名单发给张廷玉，让他自己说，配不配！这就是要你主动放弃，乾隆顺坡下驴，取消了你的资格。既然皇帝态度明确，群臣也跟着起哄，这帮人本来就是墙头草，纷纷认为张廷玉不够资格。于是皇帝顺应民意，取消了张廷玉的资格，最后老头只能灰溜溜回到了老家，什么爵位荣誉全都付诸东流。而家乡人知道张廷玉跟皇上的关系后，也不敢跟他太亲近。</p><p>这还不算完，过两年他的儿女亲家出事了，其实也就是一个母丧期间匿名赶考，结果被人家参了一本。这让乾隆又想起来张廷玉，说你为什么要跟这等小人结成亲家，随即收回了三代帝王给张廷玉的一切好处。不过执行任务的人，被乾隆再三叮嘱过，说是收回赏赐，实为抄家，皇帝就是要借机找到张廷玉的罪证，哪怕一句写在纸上的怨言，都可能致命。但结果却是毫无收获。张廷玉还是那个老油条，他的记载年谱，细致到了皇帝赞赏的每一句话，但对政治一句不提，自己的怨言更是一句不写。由于没啥进展，最后乾隆碰了一鼻子灰，只能把那个抄家的官员推出去顶罪，说是临时工，不代表我的意思。但最后就是骂骂完事了，很显然幕后真正的黑手就是乾隆。借着这次兴师问罪，张廷玉已经颜面扫地，朝廷党羽已经树倒猢狲散。乾隆完胜！在之后的五年，张廷玉甚至在家里都不说话，只是傻坐着。最终郁郁而终。等张廷玉的死讯传到乾隆那里，不知道是不是有点内疚，或者是觉得死人已经不再有任何威胁，最终乾隆竟然摆出了宽容，还是让张廷玉配享了太庙。然后还写了一首诗，主要意思说，虽然张廷玉生前有过，但我还是原谅了他，希望他在地底下也能感恩吧。</p><p>说完了乾隆对大臣的苛刻，我们看看他对百姓是怎么样的，他从小饱读诗书。那些先生交给他的帝王之术就是要爱惜子民，所以乾隆对于老百姓相当宽容和怜悯。特别是哪儿一闹灾，乾隆很是关切，比如安徽闹灾，说当地人吃一种黑米充饥，乾隆让地方官拿到北京，自己要亲自尝一尝，吃过之后潸然落泪。他还把黑米分给了皇子们，让他们尽可能多的了解民间疾苦。</p><p>山东有次下暴雨，灾民无数，管粮仓的官当时不在，这个官的母亲私自把粮仓打开赈济灾民，让上级巡抚知道了，随即要治罪。折子递到乾隆那，皇帝一看大怒，说这么好的亲妈还要治罪？最后罚了巡抚举荐不利，私开粮仓无须赔偿。最后因为这个妈，他儿子连升好几级。很快做到了督抚的大官。最后底下人都了解乾隆的秉性，所以一有灾情，大家都往大了说，谁也不敢隐瞒不报。他几乎把国库里的三分之一的粮食，全都拿出去救灾了。这在康熙雍正两朝都从没有过。</p><p>在乾隆帝的鼓励下，当时农民玩命开垦田地，因为根据乾隆的旨意，新开出了的耕地，不用交税。所以大家就有很大的动力，当时全国已经有10亿亩耕地，但收税的只有7亿亩。乾隆故意在这个事上糊涂，他自己说，民为邦本，庶富相因。百姓吃饱了富裕了，国家也就好了。此外，乾隆还把拖欠的农业税一次性都给免了。他也成为中国历史上给农民免税最多的皇帝。作者统计，乾隆少收了农民上亿两白银，折合人民币得有400亿之多，相当于一年财政收入的7-8%不要了，如果要按比例来计算，相当于说今天的个人所得税不收了。所以可想而知，老百姓能不说他好吗？</p><p>乾隆朝的60年中，人口增长了一倍，当然这也不全是他的功劳，而是世界进行了一场食物革命，红薯和玉米进入中国，这东西生长快产量大，农业产生了飞跃，粮食产量超过了2000亿斤，是唐宋的3倍，明朝的2倍，一下就解决了吃饭问题，都吃的饱了，所以才会玩命生孩子。</p><p>康雍乾三朝面对最大的敌人就是蒙古，康熙就打败过噶尔丹，让蒙古没能统一，但后来准噶尔部再次进攻雍正朝，结果双方打了个平手。到了乾隆朝，又是因为命好，这个敌人开始自我分裂，其中一部分主动归附清朝，这就是大家熟悉的东归英雄传，乾隆给与他们优厚的待遇，并通过这些人了解到了准噶尔丹的虚实，随即要趁虚而入，发动大规模的平准战争，但几乎没人支持他这个想法，大家都觉得天下太平了这么久打什么打啊，况且你打仗也不行啊，打个金川那样的弹丸之地都打不下来，更别说跟准噶尔丹打了。中原王朝一说跟少数民族打仗，就相当头疼，虽然大清也是满族人，但进关太久，八旗兵基本上也没什么战斗力了。大家觉得这是自找苦吃，属于明明没有困难，制造困难也要上的那种。</p><p>乾隆知道，他的一意孤行，干成了就是千古一帝，干不成就是昏君一个，但他觉得这是扫除边患的最佳时机。于是力排众议，决定打！不过问题还是有的，比如粮草就没有，乾隆说没事的，你们可以去抢嘛！先抢蒙古牧民的，然后我再给他们补偿。后来陕甘总督刘统勋，也就是刘罗锅他爸，坚决反对觉得这个太冒险，但被乾隆给骂回去了。</p><p>事实证明，乾隆这次判断确实正确，真让他给蒙对了，蒙古各部根本无心抵抗，就是一个劲跑。后来清军追到伊犁，发现没吃的了，只好撤走。留下降将守城，但没几年这个降将就造反了，乾隆不得不再次出兵平叛，还是老办法抢粮食吃。但这第二次可没那么顺利了，清军一来让蒙古部落雪上加霜，本来一些顺民也因为清军抢粮食而纷纷反叛，叛军越打越多。随后乾隆知道自己犯错了，于是改征讨为安抚，许下大量的好处。终于安抚住了蒙古，没有酿成大乱子。然后乾隆改变策略，这回带着粮食第三次出兵，一直把蒙古人追到了俄罗斯境内。准噶尔丹汗国就此覆灭，大清扫除了重要的边患。但这次战争没有乾隆想的那么成功，本来一场战争，结果变成了三场战争，本来一年解决，没想到打了三年。可以用惨胜来形容，军费又是花海了去了。另外，武力征服的蒙古人也让他头疼，除了东归那一部，其他的三部全都是一会反叛一会投降，乾隆感觉真是心累。随后乾隆下达必杀令，基本上是一种灭种的残酷镇压。屠城也是没少上演。第三次平准更是被乾隆称为围猎，他们打猎的对象不是动物，而是蒙古平民，几乎见人就杀，甚至投降的也不放过，把蒙古男人全部杀死，然后妇女小孩被分配做奴隶。这已经是一场侵略性质的非正义战争。最郁闷的是蒙古人，没想到曾经屠城闻名，几乎统一欧亚大陆的成吉思汗的子孙，也遭遇了被屠杀的命运。历史有时候也确实是莫大的讽刺。清朝在完成巨大版图统一的时候，付出了太多无辜平民生命的代价。</p><p>在平定准噶尔后，清朝经常使用全盛和盛世来形容乾隆的文治武功，甚至乾隆自己也飘飘然，觉得康熙雍正两朝没有完成的事，自己给搞定了。如果康熙叫盛世，我这肯定就是全盛。对内消灭朋党，对外更是乾纲独断，消除了多年边患，乾隆确实也有了吹牛的资本。<br>乾隆朝已经达到了全盛时期，那个时候，中国的经济也是很厉害，占了全球GDP的三分之一，比美国在今天的社会地位还要高。</p><p>乾隆虽然免了那么多税，也打了很多仗，但他仍然富得流油，康熙存款最高的时候是4900万两，雍正存款最高的时候6000万两，交给乾隆的时候只有3000万两，而乾隆在后期达到了8000万两存款。乾隆朝初期，人口是1.4亿，而到了乾隆60年，人口已经是2.9亿。无论从哪方面看，乾隆朝都是盛世的顶点。</p><p>乾隆朝的官僚体系运转相当高效，甚至英国使团马戛尔尼都给了当时清朝官员很高的评价，特别是对于和珅，英国人说，这位和中堂又高又帅，成熟老练风度翩翩，是一个非常成熟的政治家。简直就是大国宰相的风范，和电视剧里那个矮胖子小丑完全不一样。乾隆当时看到了贪腐抬头，随即开始反腐，连小规模的请客送礼也要抓，公款吃吃喝喝也不行。我们之前说了，乾隆一开始比较宽容，你贪赃被抓，只要补上亏空就行，后来大臣们更加肆无忌惮，后来规定只要贪污1000两，也就是现在的20万人民币，那么拉出去，不但咔嚓了，还得抄家，这个反腐力度如果乾隆说第二，敢说第一的也只有朱元璋了，当时大臣们想，如果贪污被抓到，不但人死了，贪污的钱没了，就连自己合法收入也都被没收了，所以相当不划算了。当然乾隆这么反腐的弊端就是，侵犯了公民财产权利，这与欧洲后来的法的精神保护个人财产格格不入。所以产权保护这个事，咱们还得重头来，毕竟是几千年的问题了。历史上所有的执政者，从来都没把老百姓的财产当回事过。制度可以确立，但观念还很难扭转。</p><p>乾隆早年间，光封疆大吏就杀了30几个，平均每年都要干掉一两个大官明正典刑。最讽刺的是，和珅当年刚被乾隆重用的时候，最主要的任务也是反腐。和珅26岁做了户部侍郎，也就是财政部副部长，33岁封大学士，跟宰相差不多了。当年他查办了云南总督李侍尧的贪腐问题，并亲自任云南总督整顿吏治。</p><p>乾隆朝也并非到处都是那么美好，虽然是盛世，但乾隆还是感觉到危机四伏，原因就是中国历史逃不掉的宿命，那就是一旦盛世，人口就激增，人口多了，粮食就不够，然后就是动乱。几乎每次都这样，乾隆这时候由于粮食变革，所以人口增长更多，老百姓很奇怪，特别愿意生孩子，即使降低生活质量也在所不惜。乾隆朝粮食虽然大大超过从前，是唐宋的2倍，明朝的3倍，但被人口一平均，还是不够。甚至处于了历史落后水平。据统计人均粮食，秦汉985斤，隋唐988斤，宋朝最富1457斤，明朝1192斤，到了清朝乾隆年间，人均只有780斤。大家别觉得一天一个人两斤很多，这里面还要养牲畜，而且没有油水全是粮食，所以根本吃不饱。只要一闹灾荒，基本当地人就没饭吃了。抗租抗税，甚至闹事的也不少。乾隆这个人虽然爱民如子，但仅限于良民顺民，对于闹事的，他下黑手可是够狠毒，不分首犯从犯，一律咔嚓了。有的农民工讨要欠薪，现在总要出动警力好说好商量的劝说，但乾隆可不是，他派兵过去，直接就是开枪镇压，乾隆还觉得办事不力，在批示里说，你就把他打伤打死了不就完了嘛！此等刁民，必须重罚，否则不足以吓唬其他的吃瓜群众。</p><p>乾隆最怕的就是聚众两个字，出现这两个字必然是重判，有人向官府请命希望平抑物价，但后来被抓了，给乾隆报送的奏折里就说这人聚众甚多，乾隆回复就是立即正法，结果这个请命的被活活打死在大堂之上。大家可以看出，乾隆这人是不许任何人挑战他的权威，我可以主动对你们好，但你不能要求我对你好。你敢要求我，我就弄死你。他更不允许越级上报，特别是民告官，他觉得这样会让整个官僚系统颜面扫地，还会让老百姓蹬鼻子上脸。所以只要是民告官的，不问是非对错，老百姓基本都被重罚。</p><p>甚至有一次，河南夏邑县老百姓告当地官员，结果原告也被严刑拷打。与此同时乾隆派出亲信去调查实情，调查结果跟原告说的差不多，夏邑水灾非同小可。老百姓已经卖儿卖女了，亲信还拿回了一张卖身契给乾隆看，显然乾隆已经认识到自己错了，但是他仍然死不认账，继续把原告交给山东巡抚查办，要求务必查出幕后主使。看到底是谁给老百姓出的主意。然后才对夏邑的地方官给予处理。这就是要告诉老百姓，这回是我明察秋毫，天恩浩荡，别看你们告对了，但仍然不会有好果子吃。后来，地方官查出来退休的大官彭家屏为幕后主使，他给老百姓指的道，而且他们家还藏有禁书。于是这下好了，乾隆下令，把那个替百姓出头的彭家屏给抓了，家也给抄了，他的土地全都分给平民，老百姓有的时候确实挺贱，面对这样的结局，竟然没人念彭家屏的好，还把他痛骂一番，因为自己分到了财主家的土地，所以全都觉得皇帝的做法无比正确。</p><p>乾隆还振振有词，他说这叫做规矩，地方官就是你父母，爹妈再不好，你也不能不孝。你今天敢对爹妈叫板，明天就敢跟爷爷对抗，谁是地方官的爹妈？老百姓的爷爷呢？当然指的就是乾隆自己。所以你爹妈混蛋，我可以骂他，但你不行。这就是我们的历史思维，一直以来我们都管官员叫做父母官，当爹妈看的，你现在说只是人民公仆，是我家的小保姆，这观念一时还真是改不过来，不光当官的不习惯，老百姓也不习惯。</p><p>在汉唐宋明时期，明君的标志就是广开言路，一些知识分子可以随便评论时政，有的时候还能因为写的好说的对，而登堂入室。但乾隆不是一个听得进去话的皇帝，对于给他进谏的他基本上全都残酷打压。连精神病都不放过，有一个是精神障碍，非得给太后写祝贺对联，结果让乾隆命人用棍子打死。还有一个疯子，到处说自己有才，是孔子的女婿。结果也被抓，这个疯子身体不好，乾隆怕他先死了，所以抓紧时间，提前把它凌迟处死，也就是千刀万剐。就连疯子的亲属也都被斩监侯，说白了就是死缓。这样的故事书里还提到很多，总之，乾隆对于知识分子的破坏可以用丧心病狂来形容。</p><p>为什么乾隆会这样呢？我们说了前期他还是比较宽仁的，只是在马朝柱案爆发后，他才心性大变，这是一个农民宣传白莲教，秘密组织山民反清，他还联系全国各地的白莲教，这事让乾隆相当紧张，后来清军不断围剿才扑灭起义。但这让乾隆认识到，安居乐业并不会消灭刁民，对他们太好，就会蹬鼻子上脸。后来他就越来越痴迷韩非子那套东西，法家跟儒家截然不同，他们认为人性本恶，所以君主要通过严刑峻法把吃瓜群众都吓得不敢动弹，不过法家这套东西，显然也不怎么样。乾隆都这么残忍了，但仍然没有解决教会之乱，各种教会帮会活动数百起，不停在各个省市闹事，乾隆也是一头雾水。所以最后就不管3721，只要觉得妖言惑众，就一律赶尽杀绝。管你是不是真的，只要妄议朝政，也视为居心叵测。</p><p>那么话说回来，当时的教会又怎么样呢？跟今天的传销差不多，也都是借着传教的名，然后敛财为生。一个教会如同一个王朝，有多层官吏，但实则都是发展下线，让老百姓交钱维持教会运转。所以天下乌鸦一般黑，乾隆如此残暴的迫害这些教会，基本属于黑吃黑性质。双方都不怎么样。对老百姓来说实则都是灾难。</p><p>除了教会和疯子之外，也确实有一些无厘头的冤案，比如有个举人做了一本字典，他说康熙字典的检索方式不如他的好，就这么一句话这哥们就被抓了。然后地方官也不知道该怎么处理，顶多算狂妄，本着错杀三千不放过一个的原则层层上报，报到了乾隆那彻底坏事了，乾隆看到这东西后大怒，原来上面在解释避讳的时候，列出了康熙雍正乾隆的名字，也就是玄烨，胤禛，弘历，提醒大家千万不能写这些字。这本来是个好意，但乾隆却火了，你不让别人写，你为啥自己写。他也不想想，要不写出来，别人怎么能知道呢？反正不管这么多，不但编纂的举人被抓，连一路上报的官员全都问罪。乾隆说他们有眼无珠，这么大的忤逆看不到。乾隆丧心病狂，杀人不眨眼，连个编字典的也杀，后来史学家解释，说当时乾隆正在谋划一场禁书的大运动，苦于找不到杀一儆百的案例，这个字典的事，正好撞到了枪口上。成为乾隆查抄禁书，掀起文化运动的借口。这个字典的作者叫做王锡侯，已经是以65岁的老人了，本打算写本字典卖钱混口饭吃，结果却被当成典型，判了一个凌迟处死，又是一个千刀万剐的死法，然后全家抄家，他的家里人不是死缓就是发配为奴，甚至上报这个案件的官员江西巡抚海成，也因为有眼无珠，被判了个死刑，后来乾隆还表现出仁慈，给改了个斩监侯的死缓。这件大案之后，全国上下可谓是人人自危。恐怖气氛浓重。这可能就是乾隆要的效果。</p><p>借着文字运动收缴禁书，堆积如山。主要就是记载清军入关多么残暴，要不就是什么蛮夷之类的内容，反正乾隆脆弱的小心脏看不了这个。清朝统治者就怕人家说他们的天下来路不正，所以特别心虚，谁说我不好，我就弄死谁。他们一直反复强调，我是从反贼李自成手里拿到的江山，是替大明报仇雪恨的，我们不是入侵。你们要恨就应该恨李自成，但其实根本不是这么回事，要不是你牵制了明军主力，李自成的乌合之众能有什么作为。另外，你帮人家报仇说的好听，那南边的半壁江山呢？还不是你清军打下来的，而且还上演了嘉定三屠的惨案，杀了近10万人，这一点不次于大家仇视的南京大屠杀，而在清刚入关的时候，根本就不拿汉人当人，俘获人口牲畜都是放在一起统计的。只是后来为了民族团结社会稳定，基本就不提了。康熙皇帝开始，逐渐的缓和和汉人的关系，把抓来的几百万奴隶都给释放了。但问题是这些已经留下了足够的历史证据，所以康雍乾三朝一直在企图毁灭证据，不断的烧掉书籍。形成了一场文化的浩劫，历史学家可以推算官方烧掉了多少书，但却无法估算百姓自行销毁了多少，大量的知识传承被中断。从中华文化的角度来讲，乾隆朝罪不可恕。</p><p>乾隆皇帝自己是个戏迷，就爱看戏。他还主抓了戏曲工作，把原来很多不能演的禁戏都给他复活了，但是有修改的复活。不光让演戏娱乐大家的生活，他还希望用戏台上的角色教育无知的百姓。大概只有五类戏不许唱，一类是政治类，第二是才子佳人类，第三是水浒类，第四是宫斗类，第五是凶杀暴力类。有人问了才子佳人为什么也不让唱，乾隆觉得他低俗黄色下流，红楼梦也属于这一类，所以能唱的戏也就只有三国和西游记了。反正就是要宣传，天下统一就是好。在乾隆的眼里是容不得那些理学家的，任何自命不凡的人都会遭到打击，甚至乾隆会通过严刑峻法逼你承认一些很低俗的事情，然后摘掉你的光环，在乾隆眼里，这个时代的圣人只有一个，那就是他自己。所有人在他眼里都是假道学，你越是装腔作势，我就要扒掉你的伪装。这么做的副作用就是，社会一下子失去了楷模，大家再也没有了精神支柱，不信天也不信地了，一个没有信仰的社会随即开始，后来人心越来越混乱，当官就为赚钱，甚至没有人再愿意去装那么一下道德。这个社会的道德，被乾隆彻底摧垮了。随着取代的就是各种互相污蔑，诬告。各种诋毁。每个人都高度恐惧之中。到了乾隆17年，皇帝也觉得世风日下人心不古，事情再这么搞下去，恐怕要乱，所以他高调处理了几起诬告案，这就是向外界宣布，文字狱到此为止，不要再扩大了。</p><p>在乾隆晚年的时候，他给自己写了个评语，说中国历史上活过70岁的皇帝不多，汉武帝晚年失政，梁武帝不得善终，唐明皇仓皇逃出长安，宋高宗只知道偏安一隅，能算得上伟大的皇帝的，只有元世祖忽必烈和明太祖朱元璋，但这两人都是只有武功没有文治，只有他自己乾隆，有文治又有武功。所以乾隆每到过大寿生日，全都要大办一场。比如八十岁的生日，他足足办了三个月。但偏偏有人砸场子，这期间有人上书声讨议罪银制度，这是乾隆的发明，说的是无论你犯了什么事，都可以拿银子来抵罪。这实际上就是包容了贪污鼓励大家去腐败捞钱。</p><p>其实乾隆心里非常清楚是怎么回事，这都是和珅搞的，他把议罪银制度化了，而罚上来的银子，都给了皇帝，变成了皇帝的小金库。换句话说，所谓议罪银就是拿钱行贿皇帝。皇帝成了最大的贪污受贿者。而且你拿人钱财就要给人消灾，处罚不处罚可不就皇帝一句话的事吗！所以这里面有乾隆的利益，他虽然不明说，也肯定不会高兴，于是他就批复上书的大臣，你说议罪银不好，你说这让国家利益受损，你说有人中饱私囊，用公家的钱保自己的命，那么你拿出证据来。乾隆这就属于较劲了，目的就是让大臣知难而退，其实他当然知道，很多公款都借着议罪银流入了他的小金库。</p><p>不过这哥们叫做尹壮图，内阁学士，礼部侍郎，最大的一个特点就是，确实有点愣，他说他在中国走了一圈，发现大清已经烂透了，各地都是贪污腐败，搜刮民脂民膏。他还说如果乾隆不信，可以派人跟我一块去调查取证。人家乾隆正在那说自己是千古一帝呢，你这就说全国上下已经烂透了，你这是什么意思，皇帝其实这时候已经起了杀心，只是这时候杀他，必然有损名声。所以得把它搞臭了再杀，于是乾隆公开了和尹壮图的书信往来，大意就是说，成！我跟你打个赌，你不是说我的治下，民不聊生贪污腐败吗？你去找，找到我就认输，我承认这几十年我白干了，从此不再吹牛逼。如果找不到，我再治你的罪，注意此时是乾隆晚年，他也急需给自己证明，要一个千古定论。其实当时吏治怎么样，已经不用多说，连朝鲜的李朝实录都有记载，当时就是乱七八糟，上下贪污，官官相护。跟尹壮图说的基本差不多。你想想大贪官和珅主政，还能有啥好。再加上乾隆岁数大了，年老体衰，听力下降视力也减退，所以很多事情其实他都不管了。而且记忆力也越来越差，经常记不得自己是不是吃过早饭了。后来又患上了失眠症，晚上睡不着，白天晕晕乎乎。根本没心思处理朝政。所以不服老不行，体力、智力、身体全都大不如前，但工作量一点都没少，你想想结果会怎么样。朝政很快就废弛了。而且越到晚年，脾气也越来越温和，没有了原来的残忍。自己也害怕死亡，所以对于底下人又开始重新宽容。乾隆13年，他复核的死刑基本全都是人头落地，而乾隆四十九年，他把几年来的死刑犯基本全都免死发配。到了乾隆55年，8000多人又一次免于死刑。议罪银制度就是在他晚年的时候出现的，啥罪不罪的，给点钱得了。</p><p>乾隆岁数大了之后，底下的人也都开始混日子，很多地方官都对政事不闻不问，能拖就拖。有些案子非常清晰，且人脏并货，但就是没人审理。然后各部门之间扯皮，踢皮球，你要找地方官打个官司，没有几年都审不下来。可见原来高效运转的官僚体系已经彻底崩溃，再加上人口激增，民怨开始越来越多。各地纷纷有出现了民变。</p><p>乾隆早期下江南，还是体察民情，而到了晚期再次南巡性质就变了，基本就是去找玩意的，乾隆走到哪，哪就变成了赛宝大会。地方官在民间寻找各种奇珍异宝，讨皇帝开心。我们之前说和珅，一开始出道是一位才子，是以反腐著名的，而乾隆何尝不是如此，他一开始也是拒绝别人进贡。但后来到了晚年，却酷爱别人进贡，从简朴的生活，到晚年极尽奢华，我们看到皇帝在生活面前，只要意志力稍微有所放松，同样会被腐蚀。当然乾隆可能也未必有所察觉，就跟我们现在很多官员一样。觉得收一些字画古董，这不能算是受贿，乾隆可能也是这么觉得，我有文化才会收集这些，顶多算个收藏。当然后来我们发明了个词，管这种现象叫做雅贿。</p><p>乾隆后来还给自己辩解，说这种行为，是大臣们自掏腰包，跟我联络感情，但用脚趾想也知道不可能，这些宝贝每个都价值连城，大臣们凭借俸禄根本就买不起。后来事实证明，向皇帝进贡最多的就是贪腐最多的，比如那个被和珅反腐的云南总督李侍尧，他就是进贡狂魔。一度成为乾隆宠臣。山东巡抚国泰也是进贡小能手，后来被查发现为了给皇帝进贡，这哥们玩命贪污，导致山东一个省亏空。</p><p>我们经常讲上行下效，乾隆都这么腐败了，那么官场必然也是腐败盛行，大家都是吃喝送礼。当年盛世的景象，完全不复存在。其实大体贪污受贿，都是以权力换钱这么简单。那么既然你有至高无上的权利，自然也就能捞到最多的钱，于是聪明人和珅就给乾隆的奢靡生活，量身制作了议罪银制度。还美其名曰，皇帝生活不能减，又不能增加百姓负担，那么就由大臣们出吧，还得是那种犯了罪的大臣。议罪银，也是乾隆后期为了维持奢靡的生活，由史上最大的贪官和珅，给乾隆量身定制的，说白了就是你犯事了，拿钱来赎罪的游戏。</p><p>和珅绝不是铁齿铜牙纪晓岚里王刚老师的那个形象，这人很厉害，乾隆皇帝快70岁的时候，和珅才26岁，还在当侍卫。虽然连个举人都没中过，学历不高，但这哥们智商和情商极高，竟然能当着皇帝把8年前的考卷都背出来，皇帝一下如获至宝，后来交给他几件事去办，全都相当漂亮，被皇帝发现的第二年他就平步青云，从一个侍卫，直接变成了侍郎，当上了财政部副部长。但他只干了3个月，就兼任内务府总理大臣，升到了正部级。这人相当有才，精通满汉蒙藏四种语言，经史典籍无不涉猎，文能提笔安天下，武能上马定乾坤。最重要的是了解皇帝心思，交给他办的事，从没让皇帝失望过。</p><p>和珅还是个投资理财的高手，他贪污来的钱，一小部分买地置业，更多的都投资在了工商业，矿山，金融，物流，医药等领域，他在京城里就有12家典当行，这也是乾隆看上和珅的重要一点，只要用和珅办事，就总能找到发财的办法，乾隆晚年，就几乎没为钱的事发过愁。在原来，官员犯了错误一般都是发俸禄，然后户部收缴入国库，和珅发现了这个东西，稍加改造，变成了议罪银，不但是俸禄，还要对你的错误额外罚钱，这个钱也不给户部了，直接收入皇帝的小金库，变成了乾隆家里的钱。赚多赚少，也不公开。</p><p>这个措施一出，大臣们纷纷眼前一亮。原来贪污受贿，都要被抓去咔嚓了，现在和中堂上台，交几个钱就没事了，这简直就是保护伞啊。于是玩命捞钱，钱捞的越多越安全，出了事大不了把钱都交了，然后重新捞钱。后来，大臣们更加无耻了，为了给皇帝主动行贿，他们竟然主动犯错，比如河南巡抚就说，我虽然抓到了犯人，但抓的不够快，所以我请求罚我2万两。大概就是400万人民币，这谁都明白，相当于白送给皇上这么多钱。这些人玩命表演，用这种小过错，主动行贿乾隆。到最后越来越不像话，还是这个河南巡抚，说我昨天不小心把香灰弄到了奏折上，惶惶不可终日，我再交3万两罚银。后来连皇帝都觉得有点不好意思了，没那么大事，别交那么多了，就交1万上来吧。</p><p>当然这里面还得有和中堂的事，和珅也会用这种议罪银敲诈底下的地方官，具体罚多少，往往是看你家有多少。而有人把皇帝惹怒了，要杀，和珅也会帮着说好话，交点议罪银的同时。和中堂的好处也是少不了的。</p><p>绝对的权力就等于绝对的腐败，这句话是英国思想史学家阿克顿勋爵说的，腐败跟道德无关，只跟权力大小有关。而在中国上千年的专制社会里皇权几乎没有制衡，所以只要皇帝伸手敛财，那么必然是满朝的腐败。这点在乾隆朝体现的特别明显，乾隆早期自己励精图治，也不搞歪的斜的，所以贪污的官员不多，被抓出来也就是贪污个几千数万白银，基本上抓住就杀。乾隆中后期，基本就全是大案了，没有10万两以下的案子了。而且这些都是小官所为，到了大官身上，比如王亶望浙江巡抚，甘肃布政使，趁着甘肃闹灾，于是请旨在当地搞募捐，只收钱不收粮食，一下子搞了几百万两白银。然后假装跟皇上说，老百姓都很感激您。结果是这笔钱一分钱也没用于救灾，都被上下各级贪官给私分了。皇上还以为他有功，给王亶望调到了浙江当巡抚，而继任者王廷赞依葫芦画瓢，继续这么贪污。</p><p>但这些跟和珅比都是小巫见大巫，和珅被嘉庆干掉，抄家了8亿到11亿两白银，是清政府15年财政收入的总和。这是不可想象的数字。如果要大不敬，拿今天类比，2016年财政收入16万亿，相当抓出一个大贪官，家里搜出了240万亿人民币。大概是37万亿美元。你算算和珅这得有多富，跟他比，比尔盖茨都弱爆了。注意这还是和珅自己的钱，还不算他掌握的贪污腐败集团，所能调动的财富。另外，当时也没有股市，这些也不是市值，而是实打实的钱，而实际上当时基本都是窝案，和珅党羽基本满朝都是。最后清朝的腐败案就是，查一个，带出一窝。一个省抓到一个，最后查来查去很可能一个省的官员没一个是干净的。就比如甘肃王亶望案，几乎甘肃所有的官员都该杀。最逗逼的是，就连抄家，还敢贪污，从王亶望家里查抄的东西根本就对不上账，乾隆也不傻一看就知道有问题。随即又派人重新调查，果然就是闽浙总督陈辉祖，见利忘义，看见王亶望好东西太多，自己给收了。这把乾隆气坏了，当然最后就是咔嚓了事。</p><p>不过这事并没有让乾隆形成清醒的认识，他觉得江山总体是好的，出几个败类只是个别现象，连续出现败类，也只是巧合而已。此时的乾隆已经是一种阿Q精神了，他更愿意把自己埋在过去的盛世当中，而不愿意承认失误。</p><p>我们还得说回乾隆对尹壮图的对赌，这就相当于皇帝的新衣被你给说破了，所以乾隆才会跟你玩命。而皇帝心里想的就是，你是晋升无门，所以才会想到傍明星博出位，最后企图达到名利双收的目的。最后乾隆给全国发通告，说让他光明正大的查，而且还告诉大家，我就是跟他打赌呢。这挺逗的，地方上的官一下就明白了，当然要站在皇帝这一边，明里暗里都对尹壮图百般刁难。尹壮图其实根本就不用去了，因为去了也白去，没人会跟皇帝翻脸。所以尹壮图这就是与天下人为敌。你所谓带出的人手，也没人会替你干活。最后耿直的尹壮图也不得不服软，说自己愚钝，道听途说，请皇帝原谅。这时候乾隆还来劲了，说不行，还打着赌呢。你现在是面服心不服，你别回来，接着查。这就有点无赖打架的意思，明知道你什么也查不出来，就是让你一直查下去。乾隆害怕尹壮图自杀，因为他死了，自己就说不清楚了，所以跟派出去的钦差大臣说，给我看好了他，绝不能让他自杀。</p><p>此时的尹壮图，就是猫手上的耗子，他知道自己接下来的路只有一条，那就是不断地写各种报告，歌功颂德，称赞皇帝是多么伟大的同时，也承认自己是多么的傻逼。最后，全国大检查之后，尹壮图彻底服软，表示全国上下全都没有短缺，于是乾隆得便宜卖乖，洋洋自得，我早就知道他是沽名钓誉。最后定了死罪，但乾隆还表现出了宽宏大量，赦免了他，革职留任。把敌我矛盾当成内部矛盾处理。不过这次尹壮图学乖了，一再请罪辞职。皇帝才让他滚蛋回家。</p><p>那么到底该怎么看待乾隆的盛世，作者说历史上的盛世，基本都是在极度混乱之后，考出的高分，比如文景之治，贞观之治，开元盛世，康雍乾盛世，基本都是这样，之前战乱让天下苦不堪言，稍微休养生息，就能得到一个太平的盛世局面。而盛世又很难保持，因为让老百姓休养生息，他们会先恢复生产，随后出现盛世，然后紧接着就是玩命生孩子，马上就又是粮食不够吃。粮食一不够吃，就又该闹事了。所以盛世之后，往往不久就会是由盛转衰，汉朝到汉武帝那是最高点，然后就衰落天下大乱。唐朝也在开元盛世之后，就安史之乱。而乾隆还没去世，就爆发了大规模的白莲教之乱。另外，从皇帝本身来说，由于盛世的出现，这就让皇帝极度自信，而极度自信之后，往往就会个人膨胀。也就为帝国由盛转衰埋下祸根。</p><p>就在我们自诩盛世天下的时候，西方正在悄悄的变革。而他们生产的工业产品，正是乾隆皇帝的最爱，他喜欢摆弄西方的钟表，甚至还对西洋乐器也感兴趣。乾隆晚年的时候，终于接到这么一封信函，说一个叫做英吉利国的地方要来朝贡。当然此时满朝文武，完全不知道英吉利到底在哪？但这都无所谓，乾隆就是要享受这种万邦来朝的感觉。于是英吉利人的船，被破例允许在天津登陆。但此时的英国对于中国却不陌生，他们早已经跟中国做了很多年的生意，在大航海时代后，英国战胜了西班牙已经成了海上第一强国，他们从中国大量进口茶叶，中国甚至成了英国第一大进口国。要知道，当时的英国已经逐渐进入工业社会，而中国还是小农社会，所以英国的财富都流往中国，而中国人却自给自足，并不需要英国人什么东西。英国的纺织业工业成果完全在中国用不上。洋布只被极少数土豪所接受，老百姓有自己的粗布穿，根本就不会买他们的商品。这让英国人感到很头疼，于是他们做出了错误的判断，以为是清朝政府从中阻挠。所以决定来中国看看，看看是不是能够通过一些外交，打开通商的口子。而这一来，就为鸦片战争埋下了祸根。</p><p>他们想通过正常的外交，跟大清合理合法的做生意。而在这之前，他们只能在广州，通过十三行的中介，一些半官半商的人来做买卖，大清嫌人家洋妞穿着太暴露，所以洋妞一律不让进来，而老百姓也不许和洋人直接沟通，否则就当汉奸论处。这让英国人很不爽，有的时候被十三行的人两头吃好处，压榨洋人，洋人也要向这些人行贿，而且是明码标价的行贿才行。这些中国政府也从来不管。中国对这些外商，一直都是很不礼貌。甚至拿他们当罪犯那么防着。另外，跟外国人做生意的中国人也被清政府仇视，当时荷兰人屠杀印尼雅加达的华侨，清政府知道了，回应说活该。这些人不在国内好好待着，私自出去到外国本就该杀。</p><p>正是鉴于此，英国人才急切的希望打开中国市场，他们知道这是一个3亿人的市场，他们需要把工业产品输出到中国。老是赔钱和赤字，他们确实很难受。他们先是找一个叫做洪仁辉的人代表英国上访，痛陈广东官员腐败。结果乾隆很重视，把广东反腐了个遍，主持反腐工作的就是后来的大贪官李侍尧。但是最后的结果却不是英国人想要的，那个上访的洪仁辉也被抓了，东印度公司根本就无力营救，而英国人自己也受到了更深的排挤。对外国商人的管控反而更严了。这让英国人相当郁闷。随后才有了著名的马戛尔尼使节团，这也是英国第一次正式访华。这个使团一共700多人，相当庞大，据说创下了欧洲之最，可见英国人对此相当重视。英国人想的挺好，他们希望建立大使馆，然后合法通商，最好能给我个附近的小岛，让我当仓库囤货。</p><p>使团也很有礼节，他们借口是给乾隆过80大寿。他们给皇帝带的礼物，小到望远镜，大到榴弹炮，甚至还带来个热气球，准备拉皇上上天去看看。整个使团坐着配有110门火炮的军舰就来了。从这些表现就能看出，英国人准备软硬兼施。</p><p>乾隆让人不断的催促贡品，而底下官员自然也明白皇帝的心思，所以一路护送使节团。英国人一开始还美呢，他们觉得这次来访有戏。皇帝看来很重视。但英国人万万没想到，乾隆重视的只是礼品本身。结果快到见皇帝的时候，双方才知道完全说岔了，乾隆以为英国人就是献礼朝圣，而英国人则觉得只是一次平等的外交访问。所以到底该怎么安排双方见面，宣读什么样的国书成了难题。</p><p>英国人拒绝行三跪九叩的大礼，最后双方各让一步，让英国人单膝跪地就可以了。但此事之后，英国人发现中国的态度变了，他们的伙食标准减少了三分之二，各级官员也对他们不再热情。乾隆在看了英国人的礼物之后也大失所望，并没有什么让他觉得兴奋的，这其中很多都是因为翻译问题，又或者是中国自然科学匮乏所造成的误会。比如英国人给皇帝送了地球仪，上面标注着新航路，准备展示英国大航海时代的海上霸权，但翻译没看懂，就以为是个普通的地球仪，英国人送了个放大镜，展示其物理学的成就，但他们研究半天，和中堂竟然用它点了烟斗。后来他们觉得英国人这些东西，只是小孩玩具，根本没什么用。</p><p>本来英国人还准备了两辆马车，具有弹簧座椅，四个减震轮胎。相比于中国木质轮子肯定要舒服的多。英国人很有信心的要让乾隆眼前一亮。但最后这马车根本就没送到乾隆眼前，官员们给的理由是这马车不符合清代的规制。原来英国的马车设计，我们现在能看到照片，就是赶车的在前面，但在中国就不行，你坐在皇帝前面，而且还背对着，坐的那么高，你想干什么？英国人听了之后，简直心里一万匹草拟马在狂奔。</p><p>乾隆皇帝的失望，让他冷静下来，他逐渐明白过来，英国人此次前来根本就不是给他过生日的，而是另有所求。随即乾隆对于英国的要求，做了回复，重要的就几个字，必不可行。意思就是说，跟中国做生意，还是按照老规矩来。我不但不会放开，可能还要收紧。</p><p>作者说，这是中国人失去了最后的机会，当时中国占世界经济的三分之一，体量巨大。但制度和科技已经远远落后，如果要开放通商，中国凭借巨大的市场必然能够迎头赶上。这样我们在之后的200年恐怕仍然是世界难以撼动的核心，但很可惜，中国主动选择了封闭，拒绝了来自世界的改变。等到外国人再来的时候，就是用大炮轰开你的国门，帮你改变的时候。鸦片战争之后，内忧外患再谈什么都晚了。1860年，英法联军冲进圆明园才发现，马戛尔尼进贡的全套欧洲货都所在了库房里，甚至里面还有当时依旧很先进的榴弹炮和大量炮弹，这些东西全都没有开过封。英国人都很纳闷，有这么多先进的武器，清朝为毛不用，竟然还是拿大刀长矛火绳枪这些200年前的武器跟他们作战。</p><p>来说说这次英国使团的马戛尔尼对于当时中国的印象吧，也是用四个字来形容，出乎意料。首先他们刚一登陆，就看见了乌央乌央的人，当时英国人觉得中国人虽然很多，但同样地方也大啊，所以应该比较平均，但一到中国才感受到了巨大的人口压力。然后英国人更纳闷的是，中国除了耕地就是耕地，似乎完全没有公共设施，竟然找不到一个公园，连条像样的公路都没有</p><p>其次，英国人看到了中国繁荣的商业，很多人都在做生意，当时的小县城里，也一片繁荣的景象。这让当时的英国人羡慕不已，所以才产生了中国是个巨大市场的错判。</p><p>第三，马戛尔尼来中国之前，被马可波罗的游记给骗了，马可波罗说中国遍地黄金，连房上的瓦也是金子，但马戛尔尼来了之后才发现，中国是个金矿贫乏的国家，否则也不会用白银当货币，后来白银也不够了，就开始用铜钱。所以贵金属在中国是很匮乏的。而中国人一点都不富裕，还很贫穷。英国人在他们的食物里，捡出了一些死亡的牲畜和变质的食物扔下了大海，于是岸上的中国人纷纷跳海去抢。这让英国人极为震惊，这帮中国人已经饥不择食。而更震惊的是，当他们到达京城发现，到处都是养不起的弃婴。而婴儿的尸体，甚至比野狗的尸体还要多。</p><p>第四，中国人的农业水平给欧洲人留下了很深刻的印象，马戛尔尼觉得中国的农业水平很高，中国麦子的收获率高达15:1，而欧洲最牛逼的农业就在英国，他们当时也只有10:1，但从另一个侧面也说明，这么高的农业水平，仍然让中国人这么饥饿，足以说明大清的空虚。</p><p>第五，英国人发现，中国社会是一个哑铃，富人真富，中国的官员奢靡生活给英国人留下了深刻的印象，即便在英国贵族也远远不如中国的官员大地主生活的滋润。而底层的老百姓却基本连饭都吃不上，在欧洲人的印象里，富人中产穷人，这是三个阶层，而在中国只有富人和赤贫，中间阶层几乎看不到。而且只要你穷，你什么权利都没有，就是富人的附庸，甚至过的还不如牲畜，富人和赤贫之间巨大的鸿沟，让普通人几乎失去任何翻身的机会，如果不靠动乱打仗获得军功，可能子子孙孙都只能赤贫下去。而科举制度，更多都是有钱人之间的游戏。</p><p>第六，在中国也没有产业传承，财产权根本就没有，所以大家传递的也就是土地，而没有任何工业实业。所以中国经常会有富不过三代的说法。主要就是因为没有能够传承的资产，再多的钱和土地，随着一次经济政治变革就有可能全部消亡，当然由于土地也不产生现金流，所以子孙无能，也只能靠卖地为生。这样慢慢的也就把家产败光了。所以这点也应该给现在的父母提个醒，你要留给子孙什么？一个是赚钱的能力，一个是能够赚钱的资产，这是财富，而很多父母就留给子孙钱或房子，这其实没什么用，反而会害了子孙。</p><p>第七，英国人对于中国的政治效率感到震惊，只要皇帝想干的事，多难都不叫事，英国人带来大量的礼品，他们认为在交接和运输过程中一定会有损耗，所以多准备出来了一些，但他们惊奇的发现，这批礼品被运到皇城的时候，竟然完好无损，一个都没损坏。而且让英国人无法想象的是，都是官场上的同事，上级不高兴，分分钟把你按地下揍屁股。中国人的奴性也随时写在脸上，只要有上级出现，下级官员就会满脸堆笑，而且笑的很恶心。是一种完全失去自我，失去自尊的笑。马戛尔尼最后说，清朝入关之后，让中国制度大踏步的倒退，当英国已经开始在艺术和科学不断前进的时候，中国却回到了半野蛮人的社会。</p><p>这次英国人访华后，妖魔化中国人的大门从此打开，在英国人眼里，这就是一个野蛮的空洞的，毫无生机的国家。之前的敬畏全部烟消云散。剩下的只是征服的野心。马戛尔尼报告最后的结论是如果不用武力，就无法打开中国的大门。所以鸦片战争的宿命其实在乾隆朝就已经定下。其实英国人的逻辑很简单，面对这么大的金矿，只有抢才是最简单直接的办法。<br>英国访华团回去之后，就写了报告，说要打开中国的国门，就必须揍他。那么英国人哪来的自信呢？这属于我们自己弄巧成拙了，乾隆也是一心要在英国人面前炫耀武力，所以英国人每到一个地方，乾隆就会让让他们检阅军队，以展现我军容整齐，训练有素。他想的是这样一支军队会让英国人吓破狗胆。</p><p>但是，英国人没有被吓到，反而快被笑死了。他们看见中国军队拿着大刀背着弓箭，手里拿着火绳枪，有的军人竟然不拿武器，却举着蒲扇。中国军队的武器装备，基本停留在欧洲的中世纪。而且他们的军事操练，更像是一场舞台表演。英国访华团的报告里说，当时清军的大炮极少，他们怀疑这些仅有的大炮都是从葡萄牙人那借来的古董货。清军好像根本就不会用。</p><p>英国人这次出访，其实跟刺探军情也差不了多少，根据英国的史料，他们详细的记载了中国的城防情况，说城墙高于民宅，守城武器就是几门破旧的熟铁炮，城门是双层的，军队的主要武器为弓箭，长矛火绳枪。这为后来英军作战提供了相当重要的情报。无论后来中国军民多么英勇作战，但在西洋热武器面前，都是不堪一击。</p><p>当然，英国也不是说打仗就打仗的，他们也知道打仗需要太多的利益统一，能有别的办法，他们还是不会选择战争这条路。那么能有什么办法解决跟中国的贸易逆差问题呢？在外交谈判未果之后，他们首先想到的就是鸦片。史书上记载，英国第一次向中国输入鸦片就是在乾隆年间，然后英国东印度公司就提出来一个丧尽天良的计划，在印度种鸦片，然后卖给中国。每箱鸦片有将近600%的利润，在利益驱动下， 乾隆三十八年，这项计划得以实施。在乾隆晚年，虽然也颁布了禁令，但当时的朝堂上下已经相当腐败，英国人用钱买通了海关和地方官吏，所以最后的结果就是鸦片仍然公开叫卖。</p><p>据说英国人也曾经受到良心的谴责，他们也没想把这个害人的买卖一直搞下去，希望尽快通过外交解决合法贸易的问题，但中国政府却屡屡驳回他们的请求，所以最后鸦片贸易就继续了下去，而且交易额越来越大。最后产生了恶劣的影响，在乾隆后期财政濒临破产，中国的顺差地位，一下变成了逆差，大量白银流出中国，据说每年流出1000万两。占清政府收入的四分之一，这么多的白银外流，让清朝出现了大面积的白银荒。所以最后林则徐才跟道光皇帝说，如果再不禁烟，那么以后中国将没有可用之钱，也没有御敌之兵。当然林则徐说的禁烟，只是禁止英国人的进口，他甚至还跟道光说，咱们自己可以种点鸦片，自己捞钱。从这点可以看出，林则徐也没那么高大上。而道光帝更是一个贪财的皇帝，一听自己能捞钱，就准了林则徐禁烟的主张。完全没想到英国人能够回来揍他。也更没想到，大清朝如此不堪一击。</p><p>1793年英国人跪着没得到的东西，1840年通过枪炮得到了，南京条约的5点要求，基本就是马戛尔尼当年提出的要求。所谓割让香港，就是他们当年要的那个能当仓库的小岛，而挑起这场战争的就是当年访华团里的一个孩子，小斯当东，他跟着老爸斯当东来到中国，亲眼目睹了中国的一切，所以1840年他极力主战，而当时的英国议会都觉得，跟中国干仗没什么问题，但问题是为了鸦片实在有点不好听，以至于当时议会投票的时候，主战和反战的各占一半。所以后来西方史学家就给改了，说英国是为了贸易权力而战，这一下就高大上了不少。所以，同样是一件龌龊的事，关键看你怎么说。</p><p>乾隆如果知道后面的事，一定会觉得这些英国佬就是白眼狼，虽然英国人给皇帝进贡，但皇帝赏赐给他们的更多，英国人自己的统计，说他们出使北京，中国为了招待他们至少花费了52万两白银，差不多合现在1个亿人民币。光基础的服务人员就多达1000人，然后他们走的时候，乾隆还用礼物把他们的船装满了。长长的礼单上，绫罗绸缎茶器古玩，什么玩意都有。好多都是乾隆内务府直供，也就是皇帝自己平时吃喝玩的东西。当然英国人带走的还不止这些，还包括一些茶树的树苗，一些蚕蛹，还有海防城防的测绘图，这为几十年后英军侵华打下了基础。</p><p>乾隆晚年身体越来越差，经常半夜就醒了，再也睡不着了。于是他觉得该给自己找个接班人了，此时他有17个儿子，其中大阿哥和三阿哥由于几十年前哭丧的时候不够悲痛，所以早早被取消了继承皇位的资格。以至于大阿哥直接被吓死了，这时候乾隆也有点后悔，所以对于大阿哥和他的后人，都给了优待。还有几个阿哥因为跟外臣有联系，而被早早的干掉了。而四，六两位阿哥过继给了亲王，所以也没有了继位的资格，十二阿哥的妈不招皇帝喜欢，所以这个皇子也pass了，最后算来算去就剩下8、11、15、17四个人。</p><p>老8是个艺术家，生性贪玩，这让乾隆很不爽，而且他脚上还有病，长得也不够帅。乾隆早早的给他封了个郡王，连个亲王都没给，就给打发了，老11呢，也是一个艺术家，而且造诣在老8之上，但乾隆也不满意，他觉得这孩子太柔弱了，而且太过于亲汉，脾气古怪，还特别抠门。乾隆又不喜欢了，觉得他没有帝王之相。老17是最完蛋的一个，不看书不学习，花花公子一个。经常出宫逛妓院。他一辈子最大的愿望就是，谁能把和珅搞掉，然后把和珅的房子分给他。最后把皇帝气的连个王都没给，封了个贝勒以示惩戒。也让他对皇位死了心吧。</p><p>于是矬子里拔将军，好像也就15阿哥像个人了。这孩子的娘是个汉人，所以出身不高贵。穷人的孩子早当家，所以他格外用功的读书。经常挑灯夜战，手不释卷。而且为人相当孝顺。勤俭节约，待人宽厚。其实乾隆在63岁那年，就看上这孩子了，那个时候嘉庆才13岁，就被秘密立储。23年以后，乾隆正式传位给嘉庆，自己退居二线。但其实权力并没有交接。嘉庆当然知道自己只是暂时扮演皇帝的角色而已，嘉庆元年不过就是乾隆六十一年，所以这场权力交接非常的平稳，因为权杖根本就没有落地，还在乾隆手里掌握着。所以嘉庆与其说是皇帝，不如说就是一个老皇帝的贴身秘书，他就在那一直装孙子，以至于乾隆认为，这是个十分满意的接班人，我的所有政策都应该能继续贯彻下去了。</p><p>嘉庆一直熬到乾隆挂了，才敢伸手去抓那个权杖，而他抓稳权杖的第一件事就是把乾隆的真爱和珅给勒死了。从而向天下宣布，我就是我晶晶亮，乾隆朝到这里就算结束了。以后天下爷说了算了。另外，嘉庆也非常高明，乾隆晚年白莲教起义不断，嘉庆也用诛杀和珅的方式甩锅，告诉天下人，都是和珅这个临时工干的，现在我上来了，就都没事了。吃瓜群众散了吧</p><p>最后，该怎么评价乾隆呢？他自己说自己是十全老人，有十全武功，比如平定准噶尔，平定大小和卓，2次金川之战，镇压台湾林爽文起义，缅甸之战，安南之战，还有两次抗击廓尔喀之战。总之就是相当威武，但其实你翻开历史书看看，这十次战争，好多都是一分为二，其中还有四次是失败的，金川之战即使胜了，也是惨胜。就跟你出门打一个5岁孩子，把人家打哭了，自己也弄一个乌眼儿青！所以根本就不是光彩的事。</p><p>到老了之后他就不断的发现自己的各种天下第一，比如什么第一个五世同堂的皇帝，第一个在位50年的皇帝，活到80岁的皇帝就三个，宋高宗，梁武帝，还有我，跟我比那两都是废物。所以他经常说自己中国古今第一完人，完美的完，不是完蛋的完。</p><p>但是人就肯定要完蛋的，89岁的乾隆走完了一生，他去世的时候，正赶上过年，所以老百姓不得不穿上丧服过年，嘉庆从此真正掌权，他借和珅案开始了全国反腐，因为他知道，白莲教闹事，主要跟腐败导致的民不聊生有关。所以平定白莲教，光靠绞杀肯定不行，重要的是得民心。在肃清人士关系后，果然镇压有了大起色。这时候老百姓看到了一个朝气蓬勃，比乾隆更加优秀的圣主即将出现。</p><p>接下来的几年，嘉庆做的最多的事情就是整肃吏治，直到嘉庆8年，新皇帝差点在宫里被刺杀，本来他们觉得这事肯定有人指使，但问来问去发现，这就是一个北京失业人员，对社会不满，趁着禁卫军没上班，混进宫里的刺杀事件，这让嘉庆相当郁闷，自信心也严重受挫，励精图治了几年，连皇宫的守备都还是如此松懈，可见全国政务废弛到了什么程度。此时的嘉庆一点都感受不到盛世，他感受的是满目疮痍，财政亏空，贪污腐败，玩忽职守，天灾人祸不断的送到他的案头，还真是心累啊。摆在嘉庆面前的只有两条路，一条是锐意改革，往前闯都是不确定的道路。另外一条路是回到原点上去混日子，但很可惜，太多的事情要做，他反而不知道该从哪下嘴了，于是他决定退回去混日子。还是用祖宗之法，处理朝政。不求有功但求无过。他当时一定是这么想的，我按照乾隆的方法治国，做好了是我的功劳，错了我也没什么责任，这就属于典型的溜肩膀不扛事，有一次宫里着火，太监们怕外面趁机进来坏人，就没敢开门，自行扑灭，后来嘉庆8天后，看到乾隆的规定是，只要宫里失火，就要开门让外面人进来，于是他反而把责任人给处罚了，可见此时的嘉庆已经全无原则，整个清朝，也在嘉庆这一代，彻底走向了无药可救。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;饥饿的盛世。作者是著名历史作家张宏杰先生。他这本书里描写了康雍乾盛世的真实情况，可能会完全颠覆掉您对于中国历史上盛世的印象。话不多说，我们看看在乾隆朝，到底发生了什么？是不是真像电视剧里演的那么繁荣昌盛。&lt;/p&gt;
&lt;p&gt;书里上来就介绍了康熙雍正乾隆的关系，祖孙三代，但是帝王</summary>
      
    
    
    
    <category term="history" scheme="https://github.com/categories/history/"/>
    
    
    <category term="history" scheme="https://github.com/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>数组，字符串和切片</title>
    <link href="https://github.com/2021/09/30/%E6%95%B0%E7%BB%84%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%88%87%E7%89%87/"/>
    <id>https://github.com/2021/09/30/%E6%95%B0%E7%BB%84%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%88%87%E7%89%87/</id>
    <published>2021-09-30T07:57:26.000Z</published>
    <updated>2021-10-01T15:33:42.666Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a [3]int                    // 定义长度为3的int型数组, 元素全部为0</span><br><span class="line">var b = [...]int&#123;1, 2, 3&#125;       // 定义长度为3的int型数组, 元素为 1, 2, 3</span><br><span class="line">var c = [...]int&#123;2: 3, 1: 2&#125;    // 定义长度为3的int型数组, 元素为 0, 2, 3</span><br><span class="line">var d = [...]int&#123;1, 2, 4: 5, 6&#125; // 定义长度为6的int型数组, 元素为 1, 2, 0, 0, 5, 6</span><br></pre></td></tr></table></figure><p>第一种方式是定义一个数组变量的最基本的方式，数组的长度明确指定，数组中的每个元素都以零值初始化。</p><p>第二种方式定义数组，可以在定义的时候顺序指定全部元素的初始化值，数组的长度根据初始化元素的数目自动计算。</p><p>第三种方式是以索引的方式来初始化数组的元素，因此元素的初始化值出现顺序比较随意。这种初始化方式和map[int]Type类型的初始化语法类似。数组的长度以出现的最大的索引为准，没有明确初始化的元素依然用0值初始化。</p><p>第四种方式是混合了第二种和第三种的初始化方式，前面两个元素采用顺序初始化，第三第四个元素零值初始化，第五个元素通过索引初始化，最后一个元素跟在前面的第五个元素之后采用顺序初始化。</p><p>Go语言中数组是值语义。一个数组变量即表示整个数组，它并不是隐式的指向第一个元素的指针（比如C语言的数组），而是一个完整的值。当一个数组变量被赋值或者被传递的时候，实际上会复制整个数组。如果数组较大的话，数组的赋值也会有较大的开销。为了避免复制数组带来的开销，可以传递一个指向数组的指针，但是数组指针并不是数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = [...]int&#123;1, 2, 3&#125; // a 是一个数组</span><br><span class="line">var b = &amp;a                // b 是指向数组的指针</span><br><span class="line"></span><br><span class="line">fmt.Println(a[0], a[1])   // 打印数组的前2个元素</span><br><span class="line">fmt.Println(b[0], b[1])   // 通过数组指针访问数组元素的方式和数组类似</span><br><span class="line"></span><br><span class="line">for i, v := range b &#123;     // 通过数组指针迭代数组的元素</span><br><span class="line">    fmt.Println(i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中b是指向a数组的指针，但是通过b访问数组中元素的写法和a类似的。还可以通过for range来迭代数组指针指向的数组元素。其实数组指针类型除了类型和数组不同之外，通过数组指针操作数组的方式和通过数组本身的操作类似，而且数组指针赋值时只会拷贝一个指针。但是数组指针类型依然不够灵活，因为数组的长度是数组类型的组成部分，指向不同长度数组的数组指针类型也是完全不同的。</p><p>可以将数组看作一个特殊的结构体，结构的字段名对应数组的索引，同时结构体成员的数目是固定的。内置函数len可以用于计算数组的长度，cap函数可以用于计算数组的容量。不过对于数组类型来说，len和cap函数返回的结果始终是一样的，都是对应数组类型的长度。</p><p>我们可以用for循环来迭代数组。下面常见的几种方式都可以用来遍历数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for i := range a &#123;</span><br><span class="line">    fmt.Printf(&quot;a[%d]: %d\n&quot;, i, a[i])</span><br><span class="line">&#125;</span><br><span class="line">for i, v := range b &#123;</span><br><span class="line">    fmt.Printf(&quot;b[%d]: %d\n&quot;, i, v)</span><br><span class="line">&#125;</span><br><span class="line">for i := 0; i &lt; len(c); i++ &#123;</span><br><span class="line">    fmt.Printf(&quot;c[%d]: %d\n&quot;, i, c[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用for range方式迭代的性能可能会更好一些，因为这种迭代可以保证不会出现数组越界的情形，每轮迭代对数组元素的访问时可以省去对下标越界的判断。</p><p>用for range方式迭代，还可以忽略迭代时的下标:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var times [5][0]int</span><br><span class="line">for range times &#123;</span><br><span class="line">    fmt.Println(&quot;hello&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中times对应一个[5][0]int类型的数组，虽然第一维数组有长度，但是数组的元素[0]int大小是0，因此整个数组占用的内存大小依然是0。没有付出额外的内存代价，我们就通过for range方式实现了times次快速迭代。</p><p>数组不仅仅可以用于数值类型，还可以定义字符串数组、结构体数组、函数数组、接口数组、管道数组等等:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 字符串数组</span><br><span class="line">var s1 = [2]string&#123;&quot;hello&quot;, &quot;world&quot;&#125;</span><br><span class="line">var s2 = [...]string&#123;&quot;你好&quot;, &quot;世界&quot;&#125;</span><br><span class="line">var s3 = [...]string&#123;1: &quot;世界&quot;, 0: &quot;你好&quot;, &#125;</span><br><span class="line"></span><br><span class="line">// 结构体数组</span><br><span class="line">var line1 [2]image.Point</span><br><span class="line">var line2 = [...]image.Point&#123;image.Point&#123;X: 0, Y: 0&#125;, image.Point&#123;X: 1, Y: 1&#125;&#125;</span><br><span class="line">var line3 = [...]image.Point&#123;&#123;0, 0&#125;, &#123;1, 1&#125;&#125;</span><br><span class="line"></span><br><span class="line">// 图像解码器数组</span><br><span class="line">var decoder1 [2]func(io.Reader) (image.Image, error)</span><br><span class="line">var decoder2 = [...]func(io.Reader) (image.Image, error)&#123;</span><br><span class="line">    png.Decode,</span><br><span class="line">    jpeg.Decode,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接口数组</span><br><span class="line">var unknown1 [2]interface&#123;&#125;</span><br><span class="line">var unknown2 = [...]interface&#123;&#125;&#123;123, &quot;你好&quot;&#125;</span><br><span class="line"></span><br><span class="line">// 管道数组</span><br><span class="line">var chanList = [2]chan int&#123;&#125;</span><br></pre></td></tr></table></figure><p>我们还可以定义一个空的数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var d [0]int       // 定义一个长度为0的数组</span><br><span class="line">var e = [0]int&#123;&#125;   // 定义一个长度为0的数组</span><br><span class="line">var f = [...]int&#123;&#125; // 定义一个长度为0的数组</span><br></pre></td></tr></table></figure><p>长度为0的数组在内存中并不占用空间。空数组虽然很少直接使用，但是可以用于强调某种特有类型的操作时避免分配额外的内存空间，比如用于管道的同步操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c1 := make(chan [0]int)</span><br><span class="line">go func() &#123;</span><br><span class="line">    fmt.Println(&quot;c1&quot;)</span><br><span class="line">    c1 &lt;- [0]int&#123;&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-c1</span><br></pre></td></tr></table></figure><p>在这里，我们并不关心管道中传输数据的真实类型，其中管道接收和发送操作只是用于消息的同步。对于这种场景，我们用空数组来作为管道类型可以减少管道元素赋值时的开销。当然一般更倾向于用无类型的匿名结构体代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c2 := make(chan struct&#123;&#125;)</span><br><span class="line">go func() &#123;</span><br><span class="line">    fmt.Println(&quot;c2&quot;)</span><br><span class="line">    c2 &lt;- struct&#123;&#125;&#123;&#125; // struct&#123;&#125;部分是类型, &#123;&#125;表示对应的结构体值</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-c2</span><br></pre></td></tr></table></figure><p>我们可以用fmt.Printf函数提供的%T或%#v谓词语法来打印数组的类型和详细信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(&quot;b: %T\n&quot;, b)  // b: [3]int</span><br><span class="line">fmt.Printf(&quot;b: %#v\n&quot;, b) // b: [3]int&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串</strong><br>一个字符串是一个不可改变的字节序列，字符串通常是用来包含人类可读的文本数据。和数组不同的是，字符串的元素不可修改，是一个只读的字节数组。每个字符串的长度虽然也是固定的，但是字符串的长度并不是字符串类型的一部分。由于Go语言的源代码要求是UTF8编码，导致Go源代码中出现的字符串面值常量一般也是UTF8编码的。源代码中的文本字符串通常被解释为采用UTF8编码的Unicode码点（rune）序列。因为字节序列对应的是只读的字节序列，因此字符串可以包含任意的数据，包括byte值0。我们也可以用字符串表示GBK等非UTF8编码的数据，不过这种时候将字符串看作是一个只读的二进制数组更准确，因为for range等语法并不能支持非UTF8编码的字符串的遍历。<br>Go语言字符串的底层结构在reflect.StringHeader中定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type StringHeader struct &#123;</span><br><span class="line">    Data uintptr</span><br><span class="line">    Len  int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串结构由两个信息组成：第一个是字符串指向的底层字节数组，第二个是字符串的字节的长度。字符串其实是一个结构体，因此字符串的赋值操作也就是reflect.StringHeader结构体的复制过程，并不会涉及底层字节数组的复制。在前面数组一节提到的[2]string字符串数组对应的底层结构和[2]reflect.StringHeader对应的底层结构是一样的，可以将字符串数组看作一个结构体数组。<br>我们可以看看字符串“Hello, world”本身对应的内存结构：<br><img src="/img/golang3.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var data = [...]byte&#123;</span><br><span class="line">    &#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;,&#x27;, &#x27; &#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串虽然不是切片，但是支持切片操作，不同位置的切片底层也访问的同一块内存数据（因为字符串是只读的，相同的字符串面值常量通常是对应同一个字符串常量）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s := &quot;hello, world&quot;</span><br><span class="line">hello := s[:5]</span><br><span class="line">world := s[7:]</span><br><span class="line"></span><br><span class="line">s1 := &quot;hello, world&quot;[:5]</span><br><span class="line">s2 := &quot;hello, world&quot;[7:]</span><br></pre></td></tr></table></figure><p>字符串和数组类似，内置的len函数返回字符串的长度。也可以通过reflect.StringHeader结构访问字符串的长度（这里只是为了演示字符串的结构，并不是推荐的做法）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(&quot;len(s):&quot;, (*reflect.StringHeader)(unsafe.Pointer(&amp;s)).Len)   // 12</span><br><span class="line">fmt.Println(&quot;len(s1):&quot;, (*reflect.StringHeader)(unsafe.Pointer(&amp;s1)).Len) // 5</span><br><span class="line">fmt.Println(&quot;len(s2):&quot;, (*reflect.StringHeader)(unsafe.Pointer(&amp;s2)).Len) // 5</span><br></pre></td></tr></table></figure><p>根据Go语言规范，Go语言的源文件都是采用UTF8编码。因此，Go源文件中出现的字符串面值常量一般也是UTF8编码的（对于转义字符，则没有这个限制）。提到Go字符串时，我们一般都会假设字符串对应的是一个合法的UTF8编码的字符序列。可以用内置的print调试函数或fmt.Print函数直接打印，也可以用for range循环直接遍历UTF8解码后的Unicode码点值。</p><p>下面的“Hello, 世界”字符串中包含了中文字符，可以通过打印转型为字节类型来查看字符底层对应的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(&quot;%#v\n&quot;, []byte(&quot;Hello, 世界&quot;))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[]byte&#123;0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0xe4, 0xb8, 0x96, 0xe7, \</span><br><span class="line">0x95, 0x8c&#125;</span><br></pre></td></tr></table></figure><p>分析可以发现0xe4, 0xb8, 0x96对应中文“世”，0xe7, 0x95, 0x8c对应中文“界”。我们也可以在字符串面值中直指定UTF8编码后的值（源文件中全部是ASCII码，可以避免出现多字节的字符）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(&quot;\xe4\xb8\x96&quot;) // 打印: 世</span><br><span class="line">fmt.Println(&quot;\xe7\x95\x8c&quot;) // 打印: 界</span><br></pre></td></tr></table></figure><p>下图展示了“Hello, 世界”字符串的内存结构布局:<br><img src="/img/golang2.png"><br>Go语言的字符串中可以存放任意的二进制字节序列，而且即使是UTF8字符序列也可能会遇到坏的编码。如果遇到一个错误的UTF8编码输入，将生成一个特别的Unicode字符‘\uFFFD’，这个字符在不同的软件中的显示效果可能不太一样，在印刷中这个符号通常是一个黑色六角形或钻石形状，里面包含一个白色的问号‘�’。</p><p>下面的字符串中，我们故意损坏了第一字符的第二和第三字节，因此第一字符将会打印为“�”，第二和第三字节则被忽略，后面的“abc”依然可以正常解码打印（错误编码不会向后扩散是UTF8编码的优秀特性之一）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(&quot;\xe4\x00\x00\xe7\x95\x8cabc&quot;) // �界abc</span><br></pre></td></tr></table></figure><p>不过在for range迭代这个含有损坏的UTF8字符串时，第一字符的第二和第三字节依然会被单独迭代到，不过此时迭代的值是损坏后的0：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for i, c := range &quot;\xe4\x00\x00\xe7\x95\x8cabc&quot; &#123;</span><br><span class="line">    fmt.Println(i, c)</span><br><span class="line">&#125;</span><br><span class="line">// 0 65533  // \uFFFD, 对应 �</span><br><span class="line">// 1 0      // 空字符</span><br><span class="line">// 2 0      // 空字符</span><br><span class="line">// 3 30028  // 界</span><br><span class="line">// 6 97     // a</span><br><span class="line">// 7 98     // b</span><br><span class="line">// 8 99     // c</span><br></pre></td></tr></table></figure><p>如果不想解码UTF8字符串，想直接遍历原始的字节码，可以将字符串强制转为[]byte字节序列后再行遍历（这里的转换一般不会产生运行时开销）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i, c := range []byte(&quot;世界abc&quot;) &#123;</span><br><span class="line">    fmt.Println(i, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是采用传统的下标方式遍历字符串的字节数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const s = &quot;\xe4\x00\x00\xe7\x95\x8cabc&quot;</span><br><span class="line">for i := 0; i &lt; len(s); i++ &#123;</span><br><span class="line">    fmt.Printf(&quot;%d %x\n&quot;, i, s[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go语言除了for range语法对UTF8字符串提供了特殊支持外，还对字符串和[]rune类型的相互转换提供了特殊的支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(&quot;%#v\n&quot;, []rune(&quot;世界&quot;))              // []int32&#123;19990, 30028&#125;</span><br><span class="line">fmt.Printf(&quot;%#v\n&quot;, string([]rune&#123;&#x27;世&#x27;, &#x27;界&#x27;&#125;)) // 世界</span><br></pre></td></tr></table></figure><p>从上面代码的输出结果来看，我们可以发现[]rune其实是[]int32类型，这里的rune只是int32类型的别名，并不是重新定义的类型。rune用于表示每个Unicode码点，目前只使用了21个bit位。<br>字符串相关的强制类型转换主要涉及到[]byte和[]rune两种类型。每个转换都可能隐含重新分配内存的代价，最坏的情况下它们的运算时间复杂度都是O(n)。不过字符串和[]rune的转换要更为特殊一些，因为一般这种强制类型转换要求两个类型的底层内存结构要尽量一致，显然它们底层对应的[]byte和[]int32类型是完全不同的内部布局，因此这种转换可能隐含重新分配内存的操作。<br>下面分别用伪代码简单模拟Go语言对字符串内置的一些操作，这样对每个操作的处理的时间复杂度和空间复杂度都会有较明确的认识。<br>for range对字符串的迭代模拟实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func forOnString(s string, forBody func(i int, r rune)) &#123;</span><br><span class="line">    for i := 0; len(s) &gt; 0; &#123;</span><br><span class="line">        r, size := utf8.DecodeRuneInString(s)</span><br><span class="line">        forBody(i, r)</span><br><span class="line">        s = s[size:]</span><br><span class="line">        i += size</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for range迭代字符串时，每次解码一个Unicode字符，然后进入for循环体，遇到崩坏的编码并不会导致迭代停止。<br>[]byte(s)转换模拟实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func str2bytes(s string) []byte &#123;</span><br><span class="line">    p := make([]byte, len(s))</span><br><span class="line">    for i := 0; i &lt; len(s); i++ &#123;</span><br><span class="line">        c := s[i]</span><br><span class="line">        p[i] = c</span><br><span class="line">    &#125;</span><br><span class="line">    return p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟实现中新创建了一个切片，然后将字符串的数组逐一复制到了切片中，这是为了保证字符串只读的语义。当然，在将字符串转为[]byte时，如果转换后的变量并没有被修改的情形，编译器可能会直接返回原始的字符串对应的底层数据。</p><p>string(bytes)转换模拟实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func bytes2str(s []byte) (p string) &#123;</span><br><span class="line">    data := make([]byte, len(s))</span><br><span class="line">    for i, c := range s &#123;</span><br><span class="line">        data[i] = c</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hdr := (*reflect.StringHeader)(unsafe.Pointer(&amp;p))</span><br><span class="line">    hdr.Data = uintptr(unsafe.Pointer(&amp;data[0]))</span><br><span class="line">    hdr.Len = len(s)</span><br><span class="line"></span><br><span class="line">    return p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为Go语言的字符串是只读的，无法直接同构构造底层字节数组生成字符串。在模拟实现中通过unsafe包获取了字符串的底层数据结构，然后将切片的数据逐一复制到了字符串中，这同样是为了保证字符串只读的语义不会受切片的影响。如果转换后的字符串在生命周期中原始的[]byte的变量并不会发生变化，编译器可能会直接基于[]byte底层的数据构建字符串。<br>[]rune(s)转换模拟实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func str2runes(s string) []rune&#123;</span><br><span class="line">    var p []int32</span><br><span class="line">    for len(s)&gt;0 &#123;</span><br><span class="line">        r,size:=utf8.DecodeRuneInString(s)</span><br><span class="line">        p=append(p,int32(r))</span><br><span class="line">        s=s[size:]</span><br><span class="line">        &#125;</span><br><span class="line">        return []rune(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为底层内存结构的差异，字符串到[]rune的转换必然会导致重新分配[]rune内存空间，然后依次解码并复制对应的Unicode码点值。这种强制转换并不存在前面提到的字符串和字节切片转化时的优化情况。<br>string(runes)转换模拟实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func runes2string(s []int32) string &#123;</span><br><span class="line">    var p []byte</span><br><span class="line">    buf := make([]byte, 3)</span><br><span class="line">    for _, r := range s &#123;</span><br><span class="line">        n := utf8.EncodeRune(buf, r)</span><br><span class="line">        p = append(p, buf[:n]...)</span><br><span class="line">    &#125;</span><br><span class="line">    return string(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样因为底层内存结构的差异，[]rune到字符串的转换也必然会导致重新构造字符串。这种强制转换并不存在前面提到的优化情况。<br><strong>切片</strong><br>单地说，切片就是一种简化版的动态数组。因为动态数组的长度是不固定，切片的长度自然也就不能是类型的组成部分了。数组虽然有适用它们的地方，但是数组的类型和操作都不够灵活，因此在Go代码中数组使用的并不多。而切片则使用得相当广泛，理解切片的原理和用法是一个Go程序员的必备技能。</p><p>我们先看看切片的结构定义，reflect.SliceHeader：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type SliceHeader struct &#123;</span><br><span class="line">    Data uintptr</span><br><span class="line">    Len  int</span><br><span class="line">    Cap  int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出切片的开头部分和Go字符串是一样的，但是切片多了一个Cap成员表示切片指向的内存空间的最大容量（对应元素的个数，而不是字节数）。下图是x := []int{2,3,5,7,11}和y := x[1:3]两个切片对应的内存结构。<br><img src="/img/golang1.png"><br>让我们看看切片有哪些定义方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">    a []int               // nil切片, 和 nil 相等, 一般用来表示一个不存在的切片</span><br><span class="line">    b = []int&#123;&#125;           // 空切片, 和 nil 不相等, 一般用来表示一个空的集合</span><br><span class="line">    c = []int&#123;1, 2, 3&#125;    // 有3个元素的切片, len和cap都为3</span><br><span class="line">    d = c[:2]             // 有2个元素的切片, len为2, cap为3</span><br><span class="line">    e = c[0:2:cap(c)]     // 有2个元素的切片, len为2, cap为3</span><br><span class="line">    f = c[:0]             // 有0个元素的切片, len为0, cap为3</span><br><span class="line">    g = make([]int, 3)    // 有3个元素的切片, len和cap都为3</span><br><span class="line">    h = make([]int, 2, 3) // 有2个元素的切片, len为2, cap为3</span><br><span class="line">    i = make([]int, 0, 3) // 有0个元素的切片, len为0, cap为3</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>和数组一样，内置的len函数返回切片中有效元素的长度，内置的cap函数返回切片容量大小，容量必须大于或等于切片的长度。也可以通过reflect.SliceHeader结构访问切片的信息（只是为了说明切片的结构，并不是推荐的做法）。切片可以和nil进行比较，只有当切片底层数据指针为空时切片本身为nil，这时候切片的长度和容量信息将是无效的。如果有切片的底层数据指针为空，但是长度和容量不为0的情况，那么说明切片本身已经被损坏了（比如直接通过reflect.SliceHeader或unsafe包对切片作了不正确的修改）。</p><p>遍历切片的方式和遍历数组的方式类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for i := range a &#123;</span><br><span class="line">    fmt.Printf(&quot;a[%d]: %d\n&quot;, i, a[i])</span><br><span class="line">&#125;</span><br><span class="line">for i, v := range b &#123;</span><br><span class="line">    fmt.Printf(&quot;b[%d]: %d\n&quot;, i, v)</span><br><span class="line">&#125;</span><br><span class="line">for i := 0; i &lt; len(c); i++ &#123;</span><br><span class="line">    fmt.Printf(&quot;c[%d]: %d\n&quot;, i, c[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实除了遍历之外，只要是切片的底层数据指针、长度和容量没有发生变化的话，对切片的遍历、元素的读取和修改都和数组是一样的。在对切片本身赋值或参数传递时，和数组指针的操作方式类似，只是复制切片头信息（reflect.SliceHeader），并不会复制底层的数据。对于类型，和数组的最大不同是，切片的类型和长度信息无关，只要是相同类型元素构成的切片均对应相同的切片类型。</p><p>如前所说，切片是一种简化版的动态数组，这是切片类型的灵魂。除了构造切片和遍历切片之外，添加切片元素、删除切片元素都是切片处理中经常遇到的问题。</p><p>添加切片元素</p><p>内置的泛型函数append可以在切片的尾部追加N个元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a []int</span><br><span class="line">a = append(a, 1)               // 追加1个元素</span><br><span class="line">a = append(a, 1, 2, 3)         // 追加多个元素, 手写解包方式</span><br><span class="line">a = append(a, []int&#123;1,2,3&#125;...) // 追加一个切片, 切片需要解包</span><br></pre></td></tr></table></figure><p>不过要注意的是，在容量不足的情况下，append的操作会导致重新分配内存，可能导致巨大的内存分配和复制数据代价。即使容量足够，依然需要用append函数的返回值来更新切片本身，因为新切片的长度已经发生了变化。</p><p>除了在切片的尾部追加，我们还可以在切片的开头添加元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = []int&#123;1,2,3&#125;</span><br><span class="line">a = append([]int&#123;0&#125;, a...)        // 在开头添加1个元素</span><br><span class="line">a = append([]int&#123;-3,-2,-1&#125;, a...) // 在开头添加1个切片</span><br></pre></td></tr></table></figure><p>在开头一般都会导致内存的重新分配，而且会导致已有的元素全部复制1次。因此，从切片的开头添加元素的性能一般要比从尾部追加元素的性能差很多。</p><p>由于append函数返回新的切片，也就是它支持链式操作。我们可以将多个append操作组合起来，实现在切片中间插入元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a []int</span><br><span class="line">a = append(a[:i], append([]int&#123;x&#125;, a[i:]...)...)     // 在第i个位置插入x</span><br><span class="line">a = append(a[:i], append([]int&#123;1,2,3&#125;, a[i:]...)...) // 在第i个位置插入切片</span><br></pre></td></tr></table></figure><p>每个添加操作中的第二个append调用都会创建一个临时切片，并将a[i:]的内容复制到新创建的切片中，然后将临时创建的切片再追加到a[:i]。</p><p>可以用copy和append组合可以避免创建中间的临时切片，同样是完成添加元素的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = append(a, 0)     // 切片扩展1个空间</span><br><span class="line">copy(a[i+1:], a[i:]) // a[i:]向后移动1个位置</span><br><span class="line">a[i] = x             // 设置新添加的元素</span><br></pre></td></tr></table></figure><p>第一句append用于扩展切片的长度，为要插入的元素留出空间。第二句copy操作将要插入位置开始之后的元素向后挪动一个位置。第三句真实地将新添加的元素赋值到对应的位置。操作语句虽然冗长了一点，但是相比前面的方法，可以减少中间创建的临时切片。</p><p>用copy和append组合也可以实现在中间位置插入多个元素(也就是插入一个切片):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = append(a, x...)       // 为x切片扩展足够的空间</span><br><span class="line">copy(a[i+len(x):], a[i:]) // a[i:]向后移动len(x)个位置</span><br><span class="line">copy(a[i:], x)            // 复制新添加的切片</span><br></pre></td></tr></table></figure><p>稍显不足的是，在第一句扩展切片容量的时候，扩展空间部分的元素复制是没有必要的。没有专门的内置函数用于扩展切片的容量，append本质是用于追加元素而不是扩展容量，扩展切片容量只是append的一个副作用。</p><p>删除切片元素</p><p>根据要删除元素的位置有三种情况：从开头位置删除，从中间位置删除，从尾部删除。其中删除切片尾部的元素最快:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = []int&#123;1, 2, 3&#125;</span><br><span class="line">a = a[:len(a)-1]   // 删除尾部1个元素</span><br><span class="line">a = a[:len(a)-N]   // 删除尾部N个元素</span><br></pre></td></tr></table></figure><p>删除开头的元素可以直接移动数据指针：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = []int&#123;1, 2, 3&#125;</span><br><span class="line">a = a[1:] // 删除开头1个元素</span><br><span class="line">a = a[N:] // 删除开头N个元素</span><br></pre></td></tr></table></figure><p>删除开头的元素也可以不移动数据指针，但是将后面的数据向开头移动。可以用append原地完成（所谓原地完成是指在原有的切片数据对应的内存区间内完成，不会导致内存空间结构的变化）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = []int&#123;1, 2, 3&#125;</span><br><span class="line">a = append(a[:0], a[1:]...) // 删除开头1个元素</span><br><span class="line">a = append(a[:0], a[N:]...) // 删除开头N个元素</span><br></pre></td></tr></table></figure><p>也可以用copy完成删除开头的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = []int&#123;1, 2, 3&#125;</span><br><span class="line">a = a[:copy(a, a[1:])] // 删除开头1个元素</span><br><span class="line">a = a[:copy(a, a[N:])] // 删除开头N个元素</span><br></pre></td></tr></table></figure><p>对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用append或copy原地完成:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = []int&#123;1, 2, 3, ...&#125;</span><br><span class="line"></span><br><span class="line">a = append(a[:i], a[i+1:]...) // 删除中间1个元素</span><br><span class="line">a = append(a[:i], a[i+N:]...) // 删除中间N个元素</span><br><span class="line"></span><br><span class="line">a = a[:i+copy(a[i:], a[i+1:])]  // 删除中间1个元素</span><br><span class="line">a = a[:i+copy(a[i:], a[i+N:])]  // 删除中间N个元素</span><br></pre></td></tr></table></figure><p>删除开头的元素和删除尾部的元素都可以认为是删除中间元素操作的特殊情况。</p><p>切片内存技巧</p><p>在本节开头的数组部分我们提到过有类似[0]int的空数组，空数组一般很少用到。但是对于切片来说，len为0但是cap容量不为0的切片则是非常有用的特性。当然，如果len和cap都为0的话，则变成一个真正的空切片，虽然它并不是一个nil值的切片。在判断一个切片是否为空时，一般通过len获取切片的长度来判断，一般很少将切片和nil值做直接的比较。</p><p>比如下面的TrimSpace函数用于删除[]byte中的空格。函数实现利用了0长切片的特性，实现高效而且简洁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func TrimSpace(s []byte) []byte &#123;</span><br><span class="line">    b := s[:0]</span><br><span class="line">    for _, x := range s &#123;</span><br><span class="line">        if x != &#x27; &#x27; &#123;</span><br><span class="line">            b = append(b, x)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实类似的根据过滤条件原地删除切片元素的算法都可以采用类似的方式处理（因为是删除操作不会出现内存不足的情形）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func Filter(s []byte, fn func(x byte) bool) []byte &#123;</span><br><span class="line">    b := s[:0]</span><br><span class="line">    for _, x := range s &#123;</span><br><span class="line">        if !fn(x) &#123;</span><br><span class="line">            b = append(b, x)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片高效操作的要点是要降低内存分配的次数，尽量保证append操作不会超出cap的容量，降低触发内存分配的次数和每次分配内存大小。</p><p>避免切片内存泄漏</p><p>如前面所说，切片操作并不会复制底层的数据。底层的数组会被保存在内存中，直到它不再被引用。但是有时候可能会因为一个小的内存引用而导致底层整个数组处于被使用的状态，这会延迟自动内存回收器对底层数组的回收。</p><p>例如，FindPhoneNumber函数加载整个文件到内存，然后搜索第一个出现的电话号码，最后结果以切片方式返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func FindPhoneNumber(filename string) []byte &#123;</span><br><span class="line">    b, _ := ioutil.ReadFile(filename)</span><br><span class="line">    return regexp.MustCompile(&quot;[0-9]+&quot;).Find(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码返回的[]byte指向保存整个文件的数组。因为切片引用了整个原始数组，导致自动垃圾回收器不能及时释放底层数组的空间。一个小的需求可能导致需要长时间保存整个文件数据。这虽然这并不是传统意义上的内存泄漏，但是可能会拖慢系统的整体性能。</p><p>要修复这个问题，可以将感兴趣的数据复制到一个新的切片中（数据的传值是Go语言编程的一个哲学，虽然传值有一定的代价，但是换取的好处是切断了对原始数据的依赖）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func FindPhoneNumber(filename string) []byte &#123;</span><br><span class="line">    b, _ := ioutil.ReadFile(filename)</span><br><span class="line">    b = regexp.MustCompile(&quot;[0-9]+&quot;).Find(b)</span><br><span class="line">    return append([]byte&#123;&#125;, b...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的问题，在删除切片元素时可能会遇到。假设切片里存放的是指针对象，那么下面删除末尾的元素后，被删除的元素依然被切片底层数组引用，从而导致不能及时被自动垃圾回收器回收（这要依赖回收器的实现方式）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a []*int&#123; ... &#125;</span><br><span class="line">a = a[:len(a)-1]    // 被删除的最后一个元素依然被引用, 可能导致GC操作被阻碍</span><br></pre></td></tr></table></figure><p>保险的方式是先将需要自动内存回收的元素设置为nil，保证自动回收器可以发现需要回收的对象，然后再进行切片的删除操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a []*int&#123; ... &#125;</span><br><span class="line">a[len(a)-1] = nil // GC回收最后一个元素内存</span><br><span class="line">a = a[:len(a)-1]  // 从切片删除最后一个元素</span><br></pre></td></tr></table></figure><p>当然，如果切片存在的周期很短的话，可以不用刻意处理这个问题。因为如果切片本身已经可以被GC回收的话，切片对应的每个元素自然也就是可以被回收的了。</p><p>切片类型强制转换</p><p>为了安全，当两个切片类型[]T和[]Y的底层原始切片类型不同时，Go语言是无法直接转换类型的。不过安全都是有一定代价的，有时候这种转换是有它的价值的——可以简化编码或者是提升代码的性能。比如在64位系统上，需要对一个[]float64切片进行高速排序，我们可以将它强制转为[]int整数切片，然后以整数的方式进行排序（因为float64遵循IEEE754浮点数标准特性，当浮点数有序时对应的整数也必然是有序的）。</p><p>下面的代码通过两种方法将[]float64类型的切片转换为[]int类型的切片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// +build amd64 arm64</span><br><span class="line"></span><br><span class="line">import &quot;sort&quot;</span><br><span class="line"></span><br><span class="line">var a = []float64&#123;4, 2, 5, 7, 2, 1, 88, 1&#125;</span><br><span class="line"></span><br><span class="line">func SortFloat64FastV1(a []float64) &#123;</span><br><span class="line">    // 强制类型转换</span><br><span class="line">    var b []int = ((*[1 &lt;&lt; 20]int)(unsafe.Pointer(&amp;a[0])))[:len(a):cap(a)]</span><br><span class="line"></span><br><span class="line">    // 以int方式给float64排序</span><br><span class="line">    sort.Ints(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func SortFloat64FastV2(a []float64) &#123;</span><br><span class="line">    // 通过 reflect.SliceHeader 更新切片头部信息实现转换</span><br><span class="line">    var c []int</span><br><span class="line">    aHdr := (*reflect.SliceHeader)(unsafe.Pointer(&amp;a))</span><br><span class="line">    cHdr := (*reflect.SliceHeader)(unsafe.Pointer(&amp;c))</span><br><span class="line">    *cHdr = *aHdr</span><br><span class="line"></span><br><span class="line">    // 以int方式给float64排序</span><br><span class="line">    sort.Ints(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种强制转换是先将切片数据的开始地址转换为一个较大的数组的指针，然后对数组指针对应的数组重新做切片操作。中间需要unsafe.Pointer来连接两个不同类型的指针传递。需要注意的是，Go语言实现中非0大小数组的长度不得超过2GB，因此需要针对数组元素的类型大小计算数组的最大长度范围（[]uint8最大2GB，[]uint16最大1GB，以此类推，但是[]struct{}数组的长度可以超过2GB）。</p><p>第二种转换操作是分别取到两个不同类型的切片头信息指针，任何类型的切片头部信息底层都是对应reflect.SliceHeader结构，然后通过更新结构体方式来更新切片信息，从而实现a对应的[]float64切片到c对应的[]int类型切片的转换。</p><p>通过基准测试，我们可以发现用sort.Ints对转换后的[]int排序的性能要比用sort.Float64s排序的性能好一点。不过需要注意的是，这个方法可行的前提是要保证[]float64中没有NaN和Inf等非规范的浮点数（因为浮点数中NaN不可排序，正0和负0相等，但是整数中没有这类情形）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="golang" scheme="https://github.com/categories/golang/"/>
    
    
    <category term="go" scheme="https://github.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>ettercap内网渗透</title>
    <link href="https://github.com/2021/09/29/ettercap%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <id>https://github.com/2021/09/29/ettercap%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</id>
    <published>2021-09-29T08:56:11.000Z</published>
    <updated>2021-09-29T14:16:30.642Z</updated>
    
    <content type="html"><![CDATA[<p>ARP欺骗之ettercap图形化界面<br>ARP欺骗原理：</p><p>在每台主机中都有ARP缓存表，缓存表中记录了IP地址与MAC地址的对应关系，而局域网数据传输依靠的是MAC地址(网络设备之间互相通信是用MAC地址而不是IP地址)</p><p> 一、ARP欺骗#<br>工具：ettercap（中间人攻击）<br>配置ip转发功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><p>ettercap -G 进入图形界面 （sudo -E ettercap -G）<br>Sniff -&gt; Unified sniffing  指定网卡<br><img src="/img/kali1.png"><br>Hosts -&gt; Scan for hosts 开始扫描局域网内主机<br><img src="/img/kali3.png"><br>将目标添加target1 路由添加target2<br><img src="/img/kali2.png"><br>嗅探远程连接<br><img src="/img/kali4.png"><br>最后打开driftnet -i eth0<br>监听目标访问流量图片（效果不是很好最多一些http的可以）</p><p><strong>dns欺骗</strong><br>修改etc/ettercap/ettercap.dns 指定A记录指向本机<br><img src="/img/kali5.png"><br>接下来你可以自己制作一个页面，放在本机启动：<br>编辑文件/var/www/html/index.html ,添加字段，保存退出。使用命令service apache2 start开启apache服务。<br>可以启动一个nginx代理本机所有请求到某网站，nginx简单配置：<br><img src="/img/kali7.png"><br>接下来当目标机去访问qq.com我们可以看到日志变化，所有的请求都被转发到<a href="http://www.baidu.com/">www.baidu.com</a><br><img src="/img/kali8.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ARP欺骗之ettercap图形化界面&lt;br&gt;ARP欺骗原理：&lt;/p&gt;
&lt;p&gt;在每台主机中都有ARP缓存表，缓存表中记录了IP地址与MAC地址的对应关系，而局域网数据传输依靠的是MAC地址(网络设备之间互相通信是用MAC地址而不是IP地址)&lt;/p&gt;
&lt;p&gt; 一、ARP欺骗#</summary>
      
    
    
    
    <category term="kali" scheme="https://github.com/categories/kali/"/>
    
    
    <category term="kali" scheme="https://github.com/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>wsl2安装kali linux以及图形界面kex</title>
    <link href="https://github.com/2021/09/29/wsl2%E5%AE%89%E8%A3%85kali-linux%E4%BB%A5%E5%8F%8A%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2kex/"/>
    <id>https://github.com/2021/09/29/wsl2%E5%AE%89%E8%A3%85kali-linux%E4%BB%A5%E5%8F%8A%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2kex/</id>
    <published>2021-09-29T08:44:43.000Z</published>
    <updated>2021-09-29T09:45:18.328Z</updated>
    
    <content type="html"><![CDATA[<p>先决条件<br>运行Windows 10版本2004或更高版本<br>使用Windows终端机<br>在WSL2中安装Kali Linux<br>以管理员身份打开PowerShell并运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p>重新开始<br>以管理员身份打开PowerShell并运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><p>重新开始</p><p>从此处下载并安装WSL2 Linux内核：https 😕/aka.ms/wsl2kernel</p><p>以管理员身份打开PowerShell并运行： wsl –set-default-version 2</p><p>从Microsoft Store安装Kali Linux</p><p>注意：要升级现有的WSL1 kali-linux安装，请输入： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-version kali-linux 2</span><br></pre></td></tr></table></figure><p>运行Kali并完成初始设置</p><p>安装Win-KeX<br>通过以下方式安装win-kex：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kali@kali:~$ sudo apt update</span><br><span class="line">kali@kali:~$</span><br><span class="line">kali@kali:~$ sudo apt install -y kali-win-kex</span><br></pre></td></tr></table></figure><p>要在具有声音支持的窗口模式下启动Win-KeX，请运行<br>kex –win -s</p><p>要在具有声音支持和手臂解决方法的增强会话模式下启动Win-KeX，请运行<br>kex –esm –ip -s</p><p>To start Win-KeX in Seamless mode with sound support, run(简略模式启动)<br>kex –sl -s<br>如果有足够的空间，为什么不安装“ Kali with the lot”呢？： sudo apt install -y kali-linux-larg</p><p>解决kali联网问题<br>Create a file: /etc/wsl.conf.<br>Put the following lines in the file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[network]</span><br><span class="line">generateResolvConf = false</span><br></pre></td></tr></table></figure><p>In a cmd window, run wsl –shutdown<br>Restart WSL2<br>Create a file: /etc/resolv.conf. If it exists, replace existing one with this new file.<br>Put the following lines in the file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>Repeat step 3 and 4. You will see git working fine now.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先决条件&lt;br&gt;运行Windows 10版本2004或更高版本&lt;br&gt;使用Windows终端机&lt;br&gt;在WSL2中安装Kali Linux&lt;br&gt;以管理员身份打开PowerShell并运行：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="kali" scheme="https://github.com/categories/kali/"/>
    
    
    <category term="kali" scheme="https://github.com/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>pi4安装kali linux</title>
    <link href="https://github.com/2021/09/29/pi4%E5%AE%89%E8%A3%85kali-linux/"/>
    <id>https://github.com/2021/09/29/pi4%E5%AE%89%E8%A3%85kali-linux/</id>
    <published>2021-09-29T06:01:45.000Z</published>
    <updated>2021-09-29T07:06:06.812Z</updated>
    
    <content type="html"><![CDATA[<p>硬件配置：<br>Raspberry Pi 4 (4GB)<br>ups电源<br>sd卡（64G）一般16G就够了，sd读卡器<br>3.5寸LCD触摸屏<br>飞鼠mini键盘<br><img src="/img/pi4-2.jpg"></p><p>软件配置：</p><pre><code> 1.kali-linux img镜像。地址:https://www.offensive-security.com/kali-linux-arm-images/ 2.LCD屏驱动 地址:https://github.com/goodtft/LCD-show 3.Win32DiskImager磁盘写入工具。 4.win10自带diskpart（sd卡写入失败后的清理工具）</code></pre><p>辅助工具：</p><pre><code> 1.个人pc,我这边是win10系统。 2. Win32DiskImager刻录工具。 3.附带hdmi接口的显示器一个。 4.xshell远程登陆工具，xftp远程传输工具。</code></pre><p>开始进入正文，操作很简单：1.下载kali镜像（.img结尾的）2.电脑安装Win32DiskImager然后写入sd卡中。</p><p><img src="/img/pi4-1.jpg"></p><p>3.将SD卡插入树莓派中，连上鼠标键盘显示器（hdmi显示器），接通电源。注：这里不是LCD触摸屏，因为驱动还未安装。</p><p>4.修改sshd,vim /etc/ssh/sshd_config 允许远程登陆，将 PermitRootLogin的注释取消掉，并将后面的内容写为yes，将 PasswordAuthentication yes 那行的注释取消掉。重启并且开机自启：service ssh restart<br>update-rc.d ssh enable</p><p>5.连接wifi或者插入网线，打开终端输入ifconfig查看ip地址。本机电脑xshell远程登陆，老版本默认用户名密码root toor，最新版本为kali/kali。用xftp或者rz等上传LCD触摸屏驱动。解压开然后执行./LCD35-show。这边也可以根据github上的操作<a href="https://github.com/goodtft/LCD-show%E3%80%82">https://github.com/goodtft/LCD-show。</a></p><p>6.关机开始组装第一层是pi4主板,这里接不了内置小风扇了。第二层接入ups电源。第三层是LCD触摸屏。</p><p><img src="/img/pi4-3.jpg"></p><p>7.还差最后一步，这里的kali包并不完全。我们更换下源：</p><p>root@kali:~# vim /etc/apt/sources.list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">#中科大</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"> #aliyun</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"> #清华</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"> #浙大</span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure><p>然后更新源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><p>安装所有工具包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install kali-linux-full</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;硬件配置：&lt;br&gt;Raspberry Pi 4 (4GB)&lt;br&gt;ups电源&lt;br&gt;sd卡（64G）一般16G就够了，sd读卡器&lt;br&gt;3.5寸LCD触摸屏&lt;br&gt;飞鼠mini键盘&lt;br&gt;&lt;img src=&quot;/img/pi4-2.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;软件配置：&lt;/p&gt;</summary>
      
    
    
    
    <category term="树莓派" scheme="https://github.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://github.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>go语言大纲</title>
    <link href="https://github.com/2021/09/29/go%E8%AF%AD%E8%A8%80%E5%A4%A7%E7%BA%B2/"/>
    <id>https://github.com/2021/09/29/go%E8%AF%AD%E8%A8%80%E5%A4%A7%E7%BA%B2/</id>
    <published>2021-09-29T01:22:39.000Z</published>
    <updated>2021-09-29T05:58:36.674Z</updated>
    
    <content type="html"><![CDATA[<p>工作区：<br>src子目录：放置源码文件<br>pkg子目录：放置归档文件<br>bin子目录：放置可执行文件</p><p>基本（值）字面量：<br>布尔字面量：true/false<br>整数字面量：123<br>字符字面量：’中’<br>浮点数字面量：3.14<br>复数字面量：1.2e-3i<br>字符串字面量： “中国”<br>复合（值）字面量：<br>数组字面量：[3]int{1,2,3}<br>切片字面量：[]int{1,2,3}<br>字典字面量：map[int]string{1:”a”,2:”b”,3:”c”}<br>函数字面量：func(x,y int) int {return x+y}<br>结构体字面量：struct {<br>name string<br>age uint<br>}{“郝林”，36}</p><p><img src="/img/golang1.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工作区：&lt;br&gt;src子目录：放置源码文件&lt;br&gt;pkg子目录：放置归档文件&lt;br&gt;bin子目录：放置可执行文件&lt;/p&gt;
&lt;p&gt;基本（值）字面量：&lt;br&gt;布尔字面量：true/false&lt;br&gt;整数字面量：123&lt;br&gt;字符字面量：’中’&lt;br&gt;浮点数字面量：3.14&lt;br</summary>
      
    
    
    
    <category term="golang" scheme="https://github.com/categories/golang/"/>
    
    
    <category term="go" scheme="https://github.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>kafka集群核心配置</title>
    <link href="https://github.com/2021/09/28/kafka%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://github.com/2021/09/28/kafka%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/</id>
    <published>2021-09-28T14:57:58.000Z</published>
    <updated>2021-09-28T15:35:06.049Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Broker参数</strong><br>首先 Broker 是需要配置存储信息的，即 Broker 使用哪些磁盘。那么针对存储信息的重要参数有以下这么几个：log.dirs：这是非常重要的参数，指定了 Broker 需要使用的若干个文件目录路径。要知道这个参数是没有默认值的，这说明什么？这说明它必须由你亲自指定。log.dir：注意这是 dir，结尾没有 s，说明它只能表示单个路径，它是补充上一个参数用的。这两个参数应该怎么设置呢？很简单，你只要设置log.dirs，即第一个参数就好了，不要设置log.dir。而且更重要的是，在线上生产环境中一定要为log.dirs配置多个路径，具体格式是一个 CSV 格式，也就是用逗号分隔的多个路径，比如/home/kafka1,/home/kafka2,/home/kafka3这样。如果有条件的话你最好保证这些目录挂载到不同的物理磁盘上。这样做有两个好处：提升读写性能：比起单块磁盘，多块物理磁盘同时读写数据有更高的吞吐量。能够实现故障转移：即 Failover。这是 Kafka 1.1 版本新引入的强大功能。要知道在以前，只要 Kafka Broker 使用的任何一块磁盘挂掉了，整个 Broker 进程都会关闭。但是自 1.1 开始，这种情况被修正了，坏掉的磁盘上的数据会自动地转移到其他正常的磁盘上，而且 Broker 还能正常工作。还记得上一期我们关于 Kafka 是否需要使用 RAID 的讨论吗？这个改进正是我们舍弃 RAID 方案的基础：没有这种 Failover 的话，我们只能依靠 RAID 来提供保障。下面说说与 ZooKeeper 相关的设置。首先 ZooKeeper 是做什么的呢？它是一个分布式协调框架，负责协调管理并保存 Kafka 集群的所有元数据信息，比如集群都有哪些 Broker 在运行、创建了哪些 Topic，每个 Topic 都有多少分区以及这些分区的 Leader 副本都在哪些机器上等信息。<br>Kafka 与 ZooKeeper 相关的最重要的参数当属zookeeper.connect。这也是一个 CSV 格式的参数，比如我可以指定它的值为zk1:2181,zk2:2181,zk3:2181。2181 是 ZooKeeper 的默认端口。现在问题来了，如果我让多个 Kafka 集群使用同一套 ZooKeeper 集群，那么这个参数应该怎么设置呢？这时候 chroot 就派上用场了。这个 chroot 是 ZooKeeper 的概念，类似于别名。如果你有两套 Kafka 集群，假设分别叫它们 kafka1 和 kafka2，那么两套集群的zookeeper.connect参数可以这样指定：zk1:2181,zk2:2181,zk3:2181/kafka1和zk1:2181,zk2:2181,zk3:2181/kafka2。切记 chroot 只需要写一次，而且是加到最后的。我经常碰到有人这样指定：zk1:2181/kafka1,zk2:2181/kafka2,zk3:2181/kafka3，这样的格式是不对的。第三组参数是与 Broker 连接相关的，即客户端程序或其他 Broker 如何与该 Broker 进行通信的设置<br>有以下三个参数：listeners：学名叫监听器，其实就是告诉外部连接者要通过什么协议访问指定主机名和端口开放的 Kafka 服务。advertised.listeners：和 listeners 相比多了个 advertised。Advertised 的含义表示宣称的、公布的，就是说这组监听器是 Broker 用于对外发布的。host.name/port：列出这两个参数就是想说你把它们忘掉吧，压根不要为它们指定值，毕竟都是过期的参数了。我们具体说说监听器的概念，从构成上来说，它是若干个逗号分隔的三元组，每个三元组的格式为&lt;协议名称，主机名，端口号&gt;。这里的协议名称可能是标准的名字，比如 PLAINTEXT 表示明文传输、SSL 表示使用 SSL 或 TLS 加密传输等；也可能是你自己定义的协议名字，比如CONTROLLER: //localhost:9092。<br>一旦你自己定义了协议名称，你必须还要指定listener.security.protocol.map参数告诉这个协议底层使用了哪种安全协议，比如指定listener.security.protocol.map=CONTROLLER:PLAINTEXT表示CONTROLLER这个自定义协议底层使用明文不加密传输数据。至于三元组中的主机名和端口号则比较直观，不需要做过多解释。不过有个事情你还是要注意一下，经常有人会问主机名这个设置中我到底使用 IP 地址还是主机名。这里我给出统一的建议：最好全部使用主机名，即 Broker 端和 Client 端应用配置中全部填写主机名。 Broker 源代码中也使用的是主机名，如果你在某些地方使用了 IP 地址进行连接，可能会发生无法连接的问题。<br>第四组参数是关于 Topic 管理的。我来讲讲下面这三个参数：auto.create.topics.enable：是否允许自动创建 Topic。unclean.leader.election.enable：是否允许 Unclean Leader 选举。auto.leader.rebalance.enable：是否允许定期进行 Leader 选举。<br>auto.create.topics.enable参数我建议最好设置成 false，即不允许自动创建 Topic。在我们的线上环境里面有很多名字稀奇古怪的 Topic，我想大概都是因为该参数被设置成了 true 的缘故。你可能有这样的经历，要为名为 test 的 Topic 发送事件，但是不小心拼写错误了，把 test 写成了 tst，之后启动了生产者程序。恭喜你，一个名为 tst 的 Topic 就被自动创建了。所以我一直相信好的运维应该防止这种情形的发生，特别是对于那些大公司而言，每个部门被分配的 Topic 应该由运维严格把控，决不能允许自行创建任何 Topic。第二个参数unclean.leader.election.enable是关闭 Unclean Leader 选举的。何谓 Unclean？还记得 Kafka 有多个副本这件事吗？每个分区都有多个副本来提供高可用。在这些副本中只能有一个副本对外提供服务，即所谓的 Leader 副本。那么问题来了，这些副本都有资格竞争 Leader 吗？显然不是，只有保存数据比较多的那些副本才有资格竞选，那些落后进度太多的副本没资格做这件事。好了，现在出现这种情况了：假设那些保存数据比较多的副本都挂了怎么办？我们还要不要进行 Leader 选举了？此时这个参数就派上用场了。如果设置成 false，那么就坚持之前的原则，坚决不能让那些落后太多的副本竞选 Leader。这样做的后果是这个分区就不可用了，因为没有 Leader 了。反之如果是 true，那么 Kafka 允许你从那些“跑得慢”的副本中选一个出来当 Leader。这样做的后果是数据有可能就丢失了，因为这些副本保存的数据本来就不全，当了 Leader 之后它本人就变得膨胀了，认为自己的数据才是权威的。这个参数在最新版的 Kafka 中默认就是 false，本来不需要我特意提的，但是比较搞笑的是社区对这个参数的默认值来来回回改了好几版了，鉴于我不知道你用的是哪个版本的 Kafka，所以建议你还是显式地把它设置成 false 吧。第三个参数auto.leader.rebalance.enable的影响貌似没什么人提，但其实对生产环境影响非常大。设置它的值为 true 表示允许 Kafka 定期地对一些 Topic 分区进行 Leader 重选举，当然这个重选举不是无脑的，它要满足一定的条件才会发生。严格来说它与上一个参数中 Leader 选举的最大不同在于，它不是选 Leader，而是换 Leader！比如 Leader A 一直表现得很好，但若auto.leader.rebalance.enable=true，那么有可能一段时间后 Leader A 就要被强行卸任换成 Leader B。你要知道换一次 Leader 代价很高的，原本向 A 发送请求的所有客户端都要切换成向 B 发送请求，而且这种换 Leader 本质上没有任何性能收益，因此我建议你在生产环境中把这个参数设置成 false。<br>最后一组参数是数据留存方面的，我分别介绍一下。log.retention.{hours|minutes|ms}：这是个“三兄弟”，都是控制一条消息数据被保存多长时间。从优先级上来说 ms 设置最高、minutes 次之、hours 最低。log.retention.bytes：这是指定 Broker 为消息保存的总磁盘容量大小。message.max.bytes：控制 Broker 能够接收的最大消息大小。先说这个“三兄弟”，虽然 ms 设置有最高的优先级，但是通常情况下我们还是设置 hours 级别的多一些，比如log.retention.hours=168表示默认保存 7 天的数据，自动删除 7 天前的数据。很多公司把 Kafka 当作存储来使用，那么这个值就要相应地调大。其次是这个log.retention.bytes。这个值默认是 -1，表明你想在这台 Broker 上保存多少数据都可以，至少在容量方面 Broker 绝对为你开绿灯，不会做任何阻拦。这个参数真正发挥作用的场景其实是在云上构建多租户的 Kafka 集群：设想你要做一个云上的 Kafka 服务，每个租户只能使用 100GB 的磁盘空间，为了避免有个“恶意”租户使用过多的磁盘空间，设置这个参数就显得至关重要了。最后说说message.max.bytes。实际上今天我和你说的重要参数都是指那些不能使用默认值的参数，这个参数也是一样，默认的 1000012 太少了，还不到 1MB。实际场景中突破 1MB 的消息都是屡见不鲜的，因此在线上环境中设置一个比较大的值还是比较保险的做法。毕竟它只是一个标尺而已，仅仅衡量 Broker 能够处理的最大消息大小，即使设置大一点也不会耗费什么磁盘空间的。</p><p><strong>Topic 级别参数</strong><br>retention.ms：规定了该 Topic 消息被保存的时长。默认是 7 天，即该 Topic 只保存最近 7 天的消息。一旦设置了这个值，它会覆盖掉 Broker 端的全局参数值。retention.bytes：规定了要为该 Topic 预留多大的磁盘空间。和全局参数作用相似，这个值通常在多租户的 Kafka 集群中会有用武之地。当前默认值是 -1，表示可以无限使用磁盘空间。上面这些是从保存消息的维度来说的。如果从能处理的消息大小这个角度来看的话，有一个参数是必须要设置的，即max.message.bytes。它决定了 Kafka Broker 能够正常接收该 Topic 的最大消息大小。我知道目前在很多公司都把 Kafka 作为一个基础架构组件来运行，上面跑了很多的业务数据。如果在全局层面上，我们不好给出一个合适的最大消息值，那么不同业务部门能够自行设定这个 Topic 级别参数就显得非常必要了。在实际场景中，这种用法也确实是非常常见的。<br>创建 Topic 时进行设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic transaction --partitions 1 --replication-factor 1 --config retention.ms=15552000000 --config max.message.bytes=5242880</span><br></pre></td></tr></table></figure><p>修改topic</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-configs.sh --zookeeper localhost:2181 --entity-type topics --entity-name transaction --alter --add-config max.message.bytes=10485760</span><br></pre></td></tr></table></figure><p>说到 JVM 端设置，堆大小这个参数至关重要。虽然在后面我们还会讨论如何调优 Kafka 性能的问题，但现在我想无脑给出一个通用的建议：将你的 JVM 堆大小设置成 6GB 吧，这是目前业界比较公认的一个合理值。我见过很多人就是使用默认的 Heap Size 来跑 Kafka，说实话默认的 1GB 有点小，毕竟 Kafka Broker 在与客户端进行交互时会在 JVM 堆上创建大量的 ByteBuffer 实例，Heap Size 不能太小。JVM 端配置的另一个重要参数就是垃圾回收器的设置，也就是平时常说的 GC 设置。<br>如果你依然在使用 Java 7，那么可以根据以下法则选择合适的垃圾回收器：如果 Broker 所在机器的 CPU 资源非常充裕，建议使用 CMS 收集器。启用方法是指定-XX:+UseCurrentMarkSweepGC。否则，使用吞吐量收集器。开启方法是指定-XX:+UseParallelGC。当然了，如果你在使用 Java 8，那么可以手动设置使用 G1 收集器。在没有任何调优的情况下，G1 表现得要比 CMS 出色，主要体现在更少的 Full GC，需要调整的参数更少等，所以使用 G1 就好了。现在我们确定好了要设置的 JVM 参数，我们该如何为 Kafka 进行设置呢？有些奇怪的是，这个问题居然在 Kafka 官网没有被提及。其实设置的方法也很简单，你只需要设置下面这两个环境变量即可：KAFKA_HEAP_OPTS：指定堆大小。KAFKA_JVM_PERFORMANCE_OPTS：指定 GC 参数。比如你可以这样启动 Kafka Broker，即在启动 Kafka Broker 之前，先设置上这两个环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export KAFKA_HEAP_OPTS=--Xms6g  --Xmx6g</span><br><span class="line">export KAFKA_JVM_PERFORMANCE_OPTS= -server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true</span><br><span class="line">bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure><p><strong>操作系统参数</strong><br>最后我们来聊聊 Kafka 集群通常都需要设置哪些操作系统参数。通常情况下，Kafka 并不需要设置太多的 OS 参数，但有些因素最好还是关注一下，比如下面这几个：文件描述符限制文件系统类型Swappiness提交时间<br>首先是ulimit -n 设置最大值就行。<br>其次是文件系统类型的选择。这里所说的文件系统指的是如 ext3、ext4 或 XFS 这样的日志型文件系统。根据官网的测试报告，XFS 的性能要强于 ext4，所以生产环境最好还是使用 XFS。对了，最近有个 Kafka 使用 ZFS 的数据报告，貌似性能更加强劲，有条件的话不妨一试。第三是 swap 的调优。网上很多文章都提到设置其为 0，将 swap 完全禁掉以防止 Kafka 进程使用 swap 空间。我个人反倒觉得还是不要设置成 0 比较好，我们可以设置成一个较小的值。为什么呢？因为一旦设置成 0，当物理内存耗尽时，操作系统会触发 OOM killer 这个组件，它会随机挑选一个进程然后 kill 掉，即根本不给用户任何的预警。但如果设置成一个比较小的值，当开始使用 swap 空间时，你至少能够观测到 Broker 性能开始出现急剧下降，从而给你进一步调优和诊断问题的时间。基于这个考虑，我个人建议将 swappniess 配置成一个接近 0 但不为 0 的值，比如 1。最后是提交时间或者说是 Flush 落盘时间。向 Kafka 发送数据并不是真要等数据被写入磁盘才会认为成功，而是只要数据被写入到操作系统的页缓存（Page Cache）上就可以了，随后操作系统根据 LRU 算法会定期将页缓存上的“脏”数据落盘到物理磁盘上。这个定期就是由提交时间来确定的，默认是 5 秒。一般情况下我们会认为这个时间太频繁了，可以适当地增加提交间隔来降低物理磁盘的写操作。当然你可能会有这样的疑问：如果在页缓存中的数据在写入到磁盘前机器宕机了，那岂不是数据就丢失了。的确，这种情况数据确实就丢失了，但鉴于 Kafka 在软件层面已经提供了多副本的冗余机制，因此这里稍微拉大提交间隔去换取性能还是一个合理的做法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Broker参数&lt;/strong&gt;&lt;br&gt;首先 Broker 是需要配置存储信息的，即 Broker 使用哪些磁盘。那么针对存储信息的重要参数有以下这么几个：log.dirs：这是非常重要的参数，指定了 Broker 需要使用的若干个文件目录路径。要知道这个</summary>
      
    
    
    
    <category term="kafka安装与配置" scheme="https://github.com/categories/kafka%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="kafka" scheme="https://github.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>LRU缓存淘汰算法</title>
    <link href="https://github.com/2021/09/28/LRU%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95-1/"/>
    <id>https://github.com/2021/09/28/LRU%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95-1/</id>
    <published>2021-09-28T03:16:33.000Z</published>
    <updated>2021-09-29T07:01:58.958Z</updated>
    
    <content type="html"><![CDATA[<p>常用策略：<br>FIFO（先进先出调度器） 、Capacity Scheduler（容量调度器）和 Fair Sceduler（公平调度器）。</p><p>为了直观地对比，我画了一张图。从图中我们看到，数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。<br><img src="https://static001.geekbang.org/resource/image/d5/cd/d5d5bee4be28326ba3c28373808a62cd.jpg" alt="内存分布"></p><p>链表结构五花八门，今天我重点给你介绍三种最常见的链表结构，它们分别是：单链表、双向链表和循环链表。我们首先来看最简单、最常用的单链表。我们刚刚讲到，链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“结点”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。如图所示，我们把这个记录下个结点地址的指针叫作后继指针 next。<br><img src="https://static001.geekbang.org/resource/image/b9/eb/b93e7ade9bb927baad1348d9a806ddeb.jpg" alt="单链表"></p><p>在进行数组的插入、删除操作时，为了保持内存数据的连续性，需要做大量的数据搬移，所以时间复杂度是 O(n)。而在链表中插入或者删除一个数据，我们并不需要为了保持内存的连续性而搬移结点，因为链表的存储空间本身就不是连续的。所以，在链表中插入和删除一个数据是非常快速的。仅考虑链表插入和删除操作的时间复杂度，不考虑查找定位到该位置的时间复杂度。<br><img src="https://static001.geekbang.org/resource/image/45/17/452e943788bdeea462d364389bd08a17.jpg"></p><p>循环链表是一种特殊的单链表。实际上，循环链表也很简单。它跟单链表唯一的区别就在尾结点。我们知道，单链表的尾结点指针指向空地址，表示这就是最后的结点了。而循环链表的尾结点指针是指向链表的头结点。从我画的循环链表图中，你应该可以看出来，它像一个环一样首尾相连，所以叫作“循环”链表。<br><img src="https://static001.geekbang.org/resource/image/86/55/86cb7dc331ea958b0a108b911f38d155.jpg"></p><p>单向链表只有一个方向，结点只有一个后继指针 next 指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。<br><img src="https://static001.geekbang.org/resource/image/cb/0b/cbc8ab20276e2f9312030c313a9ef70b.jpg"></p><p><strong>删除操作</strong><br>在实际的软件开发中，从链表中删除一个数据无外乎这两种情况：删除结点中“值等于某个给定值”的结点；删除给定指针指向的结点。对于第一种情况，不管是单链表还是双向链表，为了查找到值等于给定值的结点，都需要从头结点开始一个一个依次遍历对比，直到找到值等于给定值的结点，然后再通过我前面讲的指针操作将其删除。尽管单纯的删除操作时间复杂度是 O(1)，但遍历查找的时间是主要的耗时点，对应的时间复杂度为 O(n)。根据时间复杂度分析中的加法法则，删除值等于给定值的结点对应的链表操作的总时间复杂度为 O(n)。</p><p>对于第二种情况，我们已经找到了要删除的结点，但是删除某个结点 q 需要知道其前驱结点，而单链表并不支持直接获取前驱结点，所以，为了找到前驱结点，我们还是要从头结点开始遍历链表，直到 p-&gt;next=q，说明 p 是 q 的前驱结点。但是对于双向链表来说，这种情况就比较有优势了。因为双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历。所以，针对第二种情况，单链表删除操作需要 O(n) 的时间复杂度，而双向链表只需要在 O(1) 的时间复杂度内就搞定了！同理，如果我们希望在链表的某个指定结点前面插入一个结点，双向链表比单链表有很大的优势。双向链表可以在 O(1) 时间复杂度搞定，而单向链表需要 O(n) 的时间复杂度。你可以参照我刚刚讲过的删除操作自己分析一下。除了插入、删除操作有优势之外，对于一个有序链表，双向链表的按值查询的效率也要比单链表高一些。因为，我们可以记录上次查找的位置 p，每次查询时，根据要查找的值与 p 的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。现在，你有没有觉得双向链表要比单链表更加高效呢？这就是为什么在实际的软件开发中，双向链表尽管比较费内存，但还是比单链表的应用更加广泛的原因。如果你熟悉 Java 语言，你肯定用过 LinkedHashMap 这个容器。如果你深入研究 LinkedHashMap 的实现原理，就会发现其中就用到了双向链表这种数据结构。实际上，这里有一个更加重要的知识点需要你掌握，那就是用空间换时间的设计思想。当内存空间充足的时候，如果我们更加追求代码的执行速度，我们就可以选择空间复杂度相对较高、但时间复杂度相对很低的算法或者数据结构。相反，如果内存比较紧缺，比如代码跑在手机或者单片机上，这个时候，就要反过来用时间换空间的设计思路。还是开篇缓存的例子。缓存实际上就是利用了空间换时间的设计思想。如果我们把数据存储在硬盘上，会比较节省内存，但每次查找数据都要询问一次硬盘，会比较慢。但如果我们通过缓存技术，事先将数据加载在内存中，虽然会比较耗费内存空间，但是每次数据查询的速度就大大提高了。所以我总结一下，对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；而消耗过多内存的程序，可以通过消耗更多的时间（时间换空间）来降低内存的消耗。<br>双向循环链表<br><img src="https://static001.geekbang.org/resource/image/d1/91/d1665043b283ecdf79b157cfc9e5ed91.jpg"></p><p>CPU在从内存读取数据的时候，会先把读取到的数据加载到CPU的缓存中。而CPU每次从内存读取数据并不是只读取那个特定要访问的地址，而是读取一个数据块(这个大小我不太确定。。)并保存到CPU缓存中，然后下次访问内存数据的时候就会先从CPU缓存开始查找，如果找到就不需要再从内存中取。这样就实现了比内存访问速度更快的机制，也就是CPU缓存存在的意义:为了弥补内存访问速度过慢与CPU执行速度快之间的差异而引入。<br>对于数组来说，存储空间是连续的，所以在加载某个下标的时候可以把以后的几个下标元素也加载到CPU缓存这样执行速度会快于存储空间不连续的链表存储。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常用策略：&lt;br&gt;FIFO（先进先出调度器） 、Capacity Scheduler（容量调度器）和 Fair Sceduler（公平调度器）。&lt;/p&gt;
&lt;p&gt;为了直观地对比，我画了一张图。从图中我们看到，数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://github.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="algorithms" scheme="https://github.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github博客搭建记录</title>
    <link href="https://github.com/2021/09/28/hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/2021/09/28/hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</id>
    <published>2021-09-28T01:04:40.000Z</published>
    <updated>2021-09-29T07:01:09.955Z</updated>
    
    <content type="html"><![CDATA[<p>1.安装Git nodejs npm<br>2.设置国内镜像 npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>3.npm install -g hexo-cli<br>4.初始化 hexo init<br>5.输入hexo g生成静态网页，然后输入hexo s打开本地服务器<br>6.github创建用户 生成 ssh-keygen -t rsa -C “youremail”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxxx&quot;</span><br><span class="line">git config --global user.email &quot;xxxxxxx&quot;</span><br></pre></td></tr></table></figure><p>7.github添加id_rsa.pub<br>8.hexo修改_config.yaml 添加git地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/atlassianss/atlassianss.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>9.安装deploy-git npm install hexo-deployer-git –save</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>10.github –&gt;settings  –&gt; page –&gt;修改域名<br>11.hexo的source目录下新增CNAME文件写入域名（推送的时候不会自动修改域名了）<br>12.新建文章 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章&quot;</span><br></pre></td></tr></table></figure><p>新建page</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#hexo new [layout] &lt;title&gt;</span><br><span class="line">#系统会自动给你在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，这样你访问的newpage对应的链接就是http://xxx.xxx/newpage</span><br><span class="line">hexo new page newpage</span><br></pre></td></tr></table></figure><p>新建草稿</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</span><br><span class="line">nexo new draft newdraft</span><br><span class="line">预览草稿</span><br><span class="line">hexo server --draft</span><br><span class="line">发布草稿</span><br><span class="line">hexo publish draft newdraft</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.安装Git nodejs npm&lt;br&gt;2.设置国内镜像 npm config set registry &lt;a href=&quot;https://registry.npm.taobao.org/&quot;&gt;https://registry.npm.taobao.org&lt;/a&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="hexo安装与配置" scheme="https://github.com/categories/hexo%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Hexo" scheme="https://github.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>光荣与梦想 第四部</title>
    <link href="https://github.com/2021/09/27/%E5%85%89%E8%8D%A3%E4%B8%8E%E6%A2%A6%E6%83%B3-%E7%AC%AC%E5%9B%9B%E9%83%A8/"/>
    <id>https://github.com/2021/09/27/%E5%85%89%E8%8D%A3%E4%B8%8E%E6%A2%A6%E6%83%B3-%E7%AC%AC%E5%9B%9B%E9%83%A8/</id>
    <published>2021-09-27T15:11:01.000Z</published>
    <updated>2021-09-27T15:12:13.476Z</updated>
    
    <content type="html"><![CDATA[<p>光荣与梦想的第四部，也就是1960年到1972年。第三部末尾我们说到了，约翰肯尼迪赢得了美国1960年的大选，民主党重新上台，美国也进入了肯尼迪时代。肯尼迪给大家的先期印象就是忠于职守，雷厉风行。他对当总统这个事，很有干劲，事必躬亲，对很多事情抓的很急，总统这种工作态度，让白宫的工作人员都感到很不适应。甚至有人抱怨，说总统一天要工作26个小时。但我们却只有24个小时。</p><p>在就职后的2个月内，肯尼迪就发布了32项政府咨文和立法建议，而他的上一任艾森豪威尔，当年才发布了5项，此外他还发表了12次演讲，签署了22项行政命令和公告。给外国政要发了28封信 召开了7次记者会。很多细节他都不放过，比如运往越南军队的卡宾枪，他都要亲手测试。白宫的杂草，他也提醒园丁赶紧除掉。</p><p>肯尼迪的行动，带动了整个政府，很多领导都每天早上7点半就上班。杜鲁门政府扶持将军，尼克松偏爱大亨，而肯尼迪政府则对学者青睐有加，他的顾问团队，全都是专家学者。大学教授。但这也为他埋了一个雷。</p><p>1961年肯尼迪就要面对一个大事情，就是艾森豪威尔遗留的古巴困局，当时古巴旅还前途未卜。有人说，卡斯特罗即将收到来自苏联的米格战斗机，如果让他们拥有这种战斗机，那么古巴旅将被全歼。后来中央情报局也发来消息，古巴旅已经一切就绪，力求一战，古巴的解放，在等肯尼迪一声令下。</p><p>但此时，肯尼迪始终保持犹豫，后来他到处询问专家，而他身边的顾问，都告诉他这是一支1400人的精锐，很快就会战胜卡斯特罗，甚至他们一旦发起战斗，卡斯特罗的军队就会瓦解。这时候肯尼迪，勉强同意了。于是古巴旅被运送到登陆地点。但是肯尼迪也下令，美国自己的军队，坚决不可以对卡斯特罗发起进攻。否则会给苏联和中国以借口。</p><p>但其实肯尼迪被骗了，实际上古巴旅根本不是什么精锐，他们甚至很久没接收过训练了，而且连士兵都称不上，很多人的职业都是职员，律师，银行家，医生等等，甚至还有60岁以上人，好多人连步枪都不会用。另外，中央情报局在另一边，也把这些古巴旅给骗了，这些人也并不知道有多艰难，甚至告诉他们美国军队会在你们之后很快支援。你们只是去走个过场。</p><p>所以可见，这是一次多么荒谬的任务。任务一开始，美国让古巴流亡者驾驶二战古董B26轰炸机去打掉卡斯特罗的空军，随后传来消息，空袭成功，卡斯特罗的空军被全面摧毁，但这又是个假消息，卡斯特罗手上，还有12架飞机。而且中央情报局，还用了一艘破的不能再破的船去给整个战斗送补给。</p><p>当时他们制定的战略是声东击西，并且里应外合，在另一个地方佯装登陆吸引卡斯特罗的注意，还要在内部通过地下组织制造混乱，但是声东击西的部队，压根就没露面，而制造混乱的地下组织也都被破坏，原因是头一天的空袭打草惊蛇，让卡斯特罗提前有了防备。</p><p>这些失败，古巴旅的登陆部队根本就都还不知道，最逗逼的是，登陆部队到达现场，一抬头，看见海滩上灯火通明，按照中央情报局的情报，这里叫做猪湾，应该是沼泽地才对，没想到卡斯特罗当政后，几年时间，给改成了公园，而且还正准备举行盛大的开幕式，所以现在面前全都是人。只看得秘密登陆的反叛者们，一脸懵逼。</p><p>肯尼迪知道这一情况后，也是想死的心都有了，顿时感叹，这身边用都是什么人啊！但是这还不是最糟糕情况，这帮指挥战斗的人，竟然让古巴旅在夜间登陆，这就犯了兵家大忌。他们刚放上指示灯，就引来了巡逻队，双方马上就交火了，随后敌军不断驰援。现在突袭已经不可行了，只能强行登陆，而整个登陆活动也非常蹩脚，刚到岸上，他们就已经发现了敌军的电台，也就是说卡斯特罗已经知道了这里发生的一切。随即上万人的军队，马上向这个地方集结，卡斯特罗空军也赶过来轰炸。很快弹药和补给船，全都被炸沉。整个登陆活动惨败收场。</p><p>卡斯特罗马上向联合国抗议，说被美国袭击，而此时其实美国外交官也不知道到底发生了什么事，所以他言之凿凿的坚决不承认是美国干的。他说轰炸古巴的都是叛军，用的老式B26轰炸机，也是卡斯特罗的。但是后来，还是真相大白了。肯尼迪的声望大幅下降，甚至很多人都在怀疑他的道德有问题。</p><p>古巴旅还是非常顽强的，补给船沉了，船队撤退了，只留下他们在海岸上作战，他们实际只有370人，但却逼退了上千人的敌人，甚至还有20辆坦克的进攻。而此时美国人还在骗他们，说援军很快就来了。但肯尼迪根本不允许美国军队干预古巴。</p><p>在美国国内也兴起了一场运动，公平对待古巴，社会各界纷纷上书，要求总统不要入侵古巴。而卡斯特罗方面，其实也根本就没有发力，他们只是希望控制住叛军即可。他们希望叛军把美国的舰艇叫回来。然后再抓贼抓脏，叛军确实也在这么做，但是美国人早就不见踪影。</p><p>这时候有人建议肯尼迪，要想救出古巴旅就得动用空军，总统妥协了，批准猪湾不远的航空母舰，发起行动，用6架无标记的飞机去阻止卡斯特罗的空军。同时让古巴旅的飞机去袭击环形阵地，然后自己突围。计划不错，但是却犯了低级的错误，由于航母所处的位置和猪湾有1小时时差，而指挥官竟然忘了对表，所以他们的飞机去轰炸环形阵地的时候，美国空军还没起飞。而卡斯特罗的空军赶来，就把他们全都歼灭了。叛军也集体被擒。这些人被长期监禁。不过后来有人评价，这次在猪湾发生的猪一样的军事行动，对于美国来说是个好事，以最小的代价，让肯尼迪明白，专家是不可信的。很快肯尼迪就调整了他的队伍。为后来的导弹危机打下了基础。</p><p>此时的苏联，赫鲁晓夫也观察着一切，他认为肯尼迪如果不打古巴，或者干脆消灭卡斯特罗，都是可以理解的，但是他却在这么一个国家身上吃了回憋，这就难免让人瞧不起，所以在看到肯尼迪稚嫩的表现后，也准备痛打落水狗。他要跟肯尼迪好好谈谈。此时他正在极力推动，取消联合国。另外，他比较在意的就是柏林的问题，他希望将柏林收入囊中。希望西方国家撤出。他甚至再次强硬的恐吓肯尼迪，要么放弃柏林，要么就准备战争吧。</p><p>而西方国家都觉得这就是赫鲁晓夫虚张声势，虽然当时苏联已经有了很多核武器，但是美国人手里同样也有不少，所以核威胁摆在那，苏联人绝不敢发动核战争。后来两人私人见面了，赫鲁晓夫把肯尼迪气坏了。他一步都不退。肯尼迪也明白，就是因为在猪湾事件中自己的拙劣表现，让对方自信心爆棚。所以他这次，必须要保持足够的勇气。</p><p>肯尼迪回到美国之后，马上对国会提出申请，随时准备战争，拨款32亿美元，扩充兵源。而苏联，马上宣布，说我们现在有1亿吨TNT当量的原子弹，而美国听说后，马上开始修建大量的防空洞。</p><p>而柏林方面也发生了骚乱，7月的时候3万名难民从东部逃往西部，进入民主国家阵营，这让苏联相当不满，于是他们采取紧急行动，8月13日，出动坦克部队，停在了东西柏林的边界线上，同时大量卡车运来了工人，一夜之间，建起了一座著名的柏林墙。4天后彻底完工，还没来得及跑过去的人，就都被囚禁在了东柏林。在接下来的一个月里，苏联进行了30次核试验，大量的放射性物质被释放出来。从第二次大战结束以后，这段时间是距离战争最近的时候。</p><p>但是后来，赫鲁晓夫又开始有所缓解，他说对他来说柏林不是什么大事，至于最后通牒，也就不再提了。甚至赫鲁晓夫，还公开称赞了肯尼迪成熟稳重，看起来好像是西方胜利了，但是就结果来看，很不好说。</p><p>通过这件事，肯尼迪则已经感觉到了敌意和威胁，他认为必须吸取猪湾事件，既想当婊子又想立牌坊的教训，下一步就是必须要证明自己有多横。于是他把目光投向了中南半岛，这里正在发生军事冲突的地区，就是在中南半岛的越南，很多人都不明白，为什么美国对越南这么感兴趣，这里距离美国7000英里，跟美国毫不相关，但是肯尼迪则表示，美国已经失掉了中国，绝不能允许再失掉中南半岛。而早在艾森豪威尔时期，美国就曾经承诺过，会帮助越南政府成为一个自由而强大的国家。</p><p>当时美国副总统约翰逊认为，如果我们匆忙撤出，那么就说明美国不信守约定，不支持朋友。如果美国不保护南越，任何亚洲其他国家都不会再相信美国。另外， 在美国国内，大家都担心南越的领导人，吴庭艳会成为第二个老蒋。他非常轻视越共这个对手，也不打算要美国军队支援，但肯尼迪对此人不放心，还是先派出了400人的特种部队。</p><p>1961年越共游击队已经很成气候了，而吴庭艳政府却不断地贪污腐败。这就让美国人越来越不放心，当时美国国内已经开始进行沙盘推演，认为大概十几万军队，就能平息越南之乱。而肯尼迪在经过调查之后，又派了685名美国军事顾问前往西贡支持。并对吴庭艳的2万政府军，提供武器装备。</p><p>但是这并没有让吴庭艳的军队强大起来，游击队竟然打下了一个省，政府军却节节败退。后来在越南的军事顾问给肯尼迪发来报告，说需要8000人的步兵团。这让很多人想到了朝鲜战场。尽管有很多人支持，但是肯尼迪却并不认可，他认为越南是个无底洞，如果要派军队，可能就没完没了了，当时有人测算，可能需要30万人，这让肯尼迪一听就疯了，而且越南人，跟韩国人不一样，韩国人对美国很友好，越南人即便是政府军这边，对美国人也不受欢迎。</p><p>后来在越南指挥的美国人，又开始报喜不报忧，为了自己的政治前途，基本上坏消息都不再向上报告。甚至新闻都报道的失败，他们也指责这些都是谎言。 </p><p>另一方面，肯尼迪还在加大投入去探索太空，美国人已经找到了一个体积更小，重量更轻的火箭方式。这也是一个战场，他的对手，就是苏联。当时已经上升到了生死存亡的程度。赢得太空技术，就能够赢得那些小兄弟的支持，如果在空间技术上，美国输给苏联，也就意味着导弹技术输给苏联，那么就会引起那些中间世界国家发生转向。有人把这个称之为，天体政治学。</p><p>1961年4月，苏联宣布，世界上第一艘载人宇宙飞船东方号，已经进入了绕地球飞行的轨道。这让苏联全民亢奋。赫鲁晓夫在红场发布讲话，把这位航天员与哥伦布发现新大陆相媲美。而美国人对此，却气的咬牙切齿，也十分的沮丧。认为肯尼迪十分不给力。</p><p>肯尼迪找来专家询问对策，得到的回答是，如果美国要想洗刷耻辱，就必须得登上月球。其他领域苏联全都有巨大的优势。如果为了达到这个目标，可能需要一场堪比原子弹曼哈顿计划的科学大跃进，费用至少是200-400亿美元，如果这么搞，10年内，美国人就很有可能登上月球。肯尼迪则表示，太贵！最好找点便宜的事。</p><p>后来宇航局先发射了一枚运载火箭，虽然跟苏联的技术还没法比，但是美国人对此也表示了亢奋，这个激烈的反应让肯尼迪下了决心，持续投入航空航天事业。而国会在全国舆论的推动下， 也批准了这个计划。1962年，他们就已经做到，将宇航员送上了太空。而且这个宇航员，还在太空上，向民众直播他的失重感受和所见所闻。这引发了整个美国人的关注。而这个宇航员回归之后，也跟苏联一样，成为了国家英雄。受到了万民迎接，甚至肯尼迪也来亲自迎接。随后就是全国演讲，甚至到其他自由世界国家去演讲。美国总算在航天领域扳回一城。此时美国顺势发布了阿波罗计划，并目标1968年实现。接着美国很多公司也开始纷纷发射民用卫星。</p><p>这段时间，美国还爆发了自由乘客事件，一些黑人想争取更多的权力，故意去乘坐公共汽车，然后要求法律规定的平等权力，但这就属于没事找事了，法律规定是一回事，大家习惯是另一回事，睁一只眼闭一只眼大家都好过，一旦较真，就必然引发的的冲突，结果很多人被激怒了，爆发了大的冲突。有的自由有乘客遭到了暴打。肯尼迪则提出，自由乘客和反对者，都要克制，也就是说，大家各退一步。但是双方都已经杀红了眼，没人听他的。</p><p>肯尼迪把自由乘客送到了亚拉巴马州，但是这反而引发了更大的冲突。而警察也基本不怎么管，他们也不想去帮助那些黑人。甚至连总统私人代表都被打成重伤。后来法院都不得不动用法警来维持秩序。</p><p>但当时很有意思的是，有人递交了一份民权主义报告，鲍勃肯尼迪也就是当时的司法部长，据此做出了预测，20世纪末有黑人将当选美国总统，而现实情况是，20世纪末没有出现，但是21世纪初，奥巴马确实成为了美国总统。而且干的还相当不错。甚至把美国从金融危机中拯救了出来。</p><p>当时有个标志性的事件，一个黑人学生叫做梅雷迪斯，他要入学注册牛津市密西西比大学，整个华盛顿都在关注，甚至派出了法警和军队，配枪护送，但是这哥们去了4趟学校，都没有成功，都被反对人群给冲散了。这些人就是不让黑人入学，肯尼迪还真不信这个邪，他决定非得要促成此事不可。最后，肯尼迪说服了州长巴尼特，动用飞机让黑人梅雷迪斯直接入学。</p><p>但是后来事情还是泄露了，愤怒的人们围攻了学校大楼，甚至投掷了燃烧弹，直接跟法警爆发了严重的冲突。而且还有狙击手混入其中，有166名法警受伤，还有两人丧生，而肯尼迪的命令是，不能还击。后来官方又派出了108装甲师，逮捕了200多暴民，其中还包括一名少将，他们之中只有24人是真学生，其他都是来自美国南方各州。最后，战场平息了之后，学校宣布梅雷迪斯已经获得正式入学资格。这确实显得极为滑稽。但对于约翰肯尼迪来说，这也成为他短暂执政生涯中的一个巨大的闪光点。但也有人批评他，说他的做法太过激烈，最终造成了更大的骚乱。</p><p>不过，此时其实已经有人惦记要他的命了，在对待古巴问题上，肯尼迪的猪湾事件，让两方面的人都对他表示不满，左派认为，他就不该去招惹古巴，而右派则认为，他应该干脆把卡斯特罗灭了，所以双方都想收拾他。</p><p>这一年的7月，古巴武装部长，卡斯特罗的弟弟访问了莫斯科，然后很多不明船只驶向古巴，与之同时而来的，就是苏联的技术专家。后来情报来了，说苏联正在古巴安装安有核弹头的远程导弹。这有点不可想象，卡斯特罗在美国人眼中是个极端分子，如果他要有核武器，也许后果将不可收拾。此时他们也不太相信，苏联和古巴走到一起。</p><p>但后来又有消息说，这就是普通的地对空防守导弹，不是什么核武器，美国人还是不放心，派出侦察机去拍摄了影像。而当他们拿到照片后，着实吓了一跳，虽然没有直接看到导弹本身，但是古巴正在部属的工程，都与远程导弹非常相似。随即向总统报告，确认古巴正在安装进攻性导弹。</p><p>肯尼迪对这个消息非常震惊，然后马上部属，一边继续侦查，另一方面他们也在积极部属军事力量，希望尽快能解决这个威胁。比如通过空袭，炸毁这些导弹基地。</p><p>第二天，新的证据出现了，飞机侦查已经拍到了明显而清晰的导弹影像，苏联在古巴一个星期之内，布置了16个或者32个导弹发射场，攻击范围1000英里到2000英里，中央情报局预计，苏联可以从这里向美国发射40颗核弹头。现在他们在思考，到底该怎么空袭，因为一旦炸到苏联人，那么将挑起与苏联的战争。</p><p>第三天，时间更加紧迫了，古巴的导弹正在对准美国，一旦发射，800万美国人瞬间灰飞烟灭。而根据情报显示，18个小时之内就有可能发射。所以现在是必须拿主意的时候，当时有人告诉总统，一旦古巴导弹基地被炸，苏联也不会有反应。但是肯尼迪不太相信。即使苏联不在古巴反击，也一定会在其他地方反击。美国骑虎难下，不先动手，就有可能被古巴的导弹攻击，如果先动手，可能会惹毛苏联。后来他们想了一个稳妥的办法，就好比我们应对新型冠状病毒的做法，隔离封锁。</p><p>海军180艘军舰，开到了加勒比海域，飞机和装甲师也全面行动，做好战斗准备。接着美国外交官，全面出击，向全世界说明情况，最有意思的是，苏联的驻美大使，似乎并不知道古巴发生了什么，北约组织也全面了解了真相，美国还申请召开联合国安理会特别会议。</p><p>这个事一公开，全世界哗然，肯尼迪顺水推舟，对全世界发表演讲。说我们正在遭受到苏联人的核威胁，美国已经将该区域封锁，任何古巴发射的导弹，都将被视为苏联的入侵，美国必将给予核反击。任何企图通过封锁线的船只，美国海军也将毫不客气的将他们击沉</p><p>事情暴露后，赫鲁晓夫有点猝不及防，莫斯科方面完全没有动静。美国的封锁隔离任务，已经全面开始，苏联向古巴的航道被全面切断，苏联商船很多都掉头返航。但古巴人似乎也很倔强，他们的导弹基地依旧在如火如荼的建设当中。美国也发出最后的条件，必须对方拆除导弹基地，否则没得谈。</p><p>后来，赫鲁晓夫终于挺不住了，他承认了在古巴设计了导弹，现在他提议，苏联拆除导弹，美国也必须承认，不再入侵古巴。对于这个提议，肯尼迪肯定是可以接受的，不过后来赫鲁晓夫又反悔了，他又加了一条，让美国拆除在土耳其的导弹基地。这个美国就不能接受了，因为土耳其的导弹基地，表明了美国对于土耳其的态度，如果拆除，意味着美国将不再关心西方安全。也不再遵守对于土耳其的承诺。所以，绝不能拿来做苏联的交换条件。否则会失了人心。这时候更坏的消息传来，美国侦查飞机，在古巴上空被击毁，这意味着古巴导弹基地已经准备就绪。所以大战一触即发。</p><p>肯尼迪决定，用赫鲁晓夫最初的提议回复苏联，并向全世界宣布，他已经答应了苏联撤出导弹，他就不打古巴的建议。然后同时做好空袭准备。第二天，就是最后时限，如果赫鲁晓夫拒绝，那么恐怕第三次世界大战就会打响。当时美国政府很多高官，已经开始考虑写遗书料理后事的问题了。</p><p>不过苏联在最后时刻，还是怂了。他们决定拆除进攻性装备，并装箱撤回苏联。而美国也马上下令，停止一切武力展示，肯尼迪为了不激怒赫鲁晓夫，通知全国，不发任何关于美国胜利的言论。古巴导弹危机，就这样在命悬一线之后，重新峰回路转。这次危机可把美苏双方，都吓的够呛。</p><p>1963年，黑人民权运动还在持续，500名黑人在伯明翰被逮捕，甚至政府方面动用了凶猛的警犬，去撕咬黑人妇女。而肯尼迪又一次调动军队，武力平息暴动，然后再让双方谈判。关键当时很多州长也在支持种族隔离，这已经成了一个政治主张，打着种族牌的州长们，更容易获得白人的支持。为此，这些州长，不惜与肯尼迪直接对抗。这就是美国社会，为了讨好选民， 他们敢直接反对总统，因为他十分清楚，他的权力来自于选民，而不来自于总统，这点咱们刚好相反，我们的干部权力来自领导，而不来自选民，所以绝不可能为了人民对抗领导。</p><p>亚拉巴马州的州长华莱士，为了拒绝两名黑人学生入学，甚至直接带着警察，堵在学校门口，阻止这两名学生进入学校。后来，国民警卫队的军官，接到总统命令，驱车赶到现场，调走了华莱士州长身边的警察部队，华莱士一看自己变成了光杆司令，也只好作罢。这才化解了这次冲突。</p><p>但民权运动还远没有结束，南方的一些极端分子，甚至开始了暗杀活动，随后20多万名权运动者，在华盛顿聚集。进行了一场盛大的游行。这次游行还留下了一段经典的语录，就是马丁路德金在林肯纪念堂前的那段演讲，我有一个梦想。</p><p>当时肯尼迪处理种族问题的时候，引发了很多人的不满，有的国会议员，虽然表面支持，但是他们也把自己的孩子送进了私立学校。有人说这时候肯尼迪去参加竞选，那么他估计就够呛了。在南方尤其如此，比如上面提到的伯明翰市，几乎没白人会选择肯尼迪。但这种支持率的时高时低其实很正常，古巴导弹危机之后，他的支持率达到了83%，后来因为民权运动降到了59%，而在跟苏联签订核试验禁令，支持率又回来了。</p><p>这段时间，美苏关系全面改善，甚至白宫和克里姆林宫之间，设立了热线电话。赫鲁晓夫也开始逐渐欣赏这位对手。另一方面，在1963年10月，中苏关系破裂，其实就是因为谁将成为老大的问题，弄得双方领袖不快。而赫鲁晓夫则借口，他不赞同中国不惜牺牲几百万人生命，也要在核试验上与西方世界对决。这等于，苏联就跟美国站在了一起，而把中国彻底孤立了。美苏之间也开始有了些许的经贸往来。</p><p>肯尼迪的目标就是发展经济，他要使经济增长率达到5.6%，为此他要大幅减税。向国会提交了107份提案。其中73份转成了正式法案。包括建立医疗体系，扶贫，支持农业，保护资源等等。</p><p>在对待越南的态度上，美国也分成了鹰派和鸽派，支持美国参与越战的都是一些将领，军官，而不支持的就有他的哥哥当时的司法部长，罗伯特肯尼迪。而越南的矛盾已经不可调和，必然会发生一次大战。1963年5月，战争就爆发了。佛教徒的聚会，被政府军遣散，随后爆发了流血事件，而吴庭艳政府拒绝道歉，随即开始了一场巨大的示威活动，这些和尚竟然集体自焚。引发了国际社会的哗然。美国人则给吴庭艳压力，让他尽快平息。肯尼迪还是在尽可能的维持和平。</p><p>但后来，吴庭艳就背弃了对肯尼迪的承诺，逮捕了那些和尚，这就令吴庭艳政府中很多人的不满，已经有人憋着造反了。而吴庭艳则加紧了控制，压制这些反对派。造反的人，一直找不到机会。而肯尼迪派出了两路调查员，去越南调查情况，一路回来告诉他吴庭艳表现的好极了，另一路则说，吴庭艳政权已经到了崩溃的边缘，这就让肯尼迪郁闷的想骂人。你们这两个该死的家伙，去的是同一个国家吗？</p><p>肯尼迪当时并不想无条件支持吴庭艳政府，或者仅仅因为反共就支持这么一个腐败的政府，他还是坚信只有得到人民的支持，战争才会胜利。他也向吴庭艳政府喊话，可以提供帮助，但是你自己得做出改变。必须想办法得到越南人民的支持。10月初，美国停发了越南的工资，之前，他们每月给吴庭艳政府，带来1000万美元的支援，现在不给了。这就让吴庭艳愤怒的指责肯尼迪。还派人到美国来做演讲，但是很显然这就有点不要脸了。在哈佛大学演讲的时候，遭到了学生的示威。</p><p>随后吴庭艳更愤怒了，他们扬言要跟河内结盟，把美国人赶出越南。他甚至开始攻击学校，抓捕学生。这一下也把美国人激怒了，真是烂泥扶不上墙，美国马上告诉越南政府的反对派，只要他们发动政变，美国人就会给予支持。</p><p>11月1日，越南海军陆战队果然发动政变，开始攻击吴庭艳政府所在的嘉隆宫，后来吴庭艳兄弟被抓，然后被乱枪打死。消息传到了华盛顿，肯尼迪虽然感到震惊，但是也觉得没什么大不了。只有副总统约翰逊比较沮丧，他之前跟吴庭艳是朋友。越南的问题似乎告一段落。这个地方只要不打仗，全世界都可以暂时消停一会了。</p><p>那一年柯达公司，推出了傻瓜相机，宝丽来公司研制出了彩色胶卷，而大家拿着相机到处拍照，有一次，一个业余摄影师冲进了肯尼迪的车队，这让特勤局吓了一跳，万一这个人不是拿的相机而是步枪，那么后果将不可设想。当时美国社会越来越开放，甚至黄色杂志到处都是，很多女孩主动把自己的裸照寄给花花公子杂志，这也让校园性行为越来越无拘无束。</p><p>在1963年美国人口达到了1.89亿，其中就业人数为7000万。失业率是5%，当时发生了人口向西移动的现象，而婴儿潮的出现，让美国人年龄中位数下降到了29.5岁。工会已经大势已去，蓝领工人数量减少了400万，白领数量增加了1000万。生产工人，一周工作40小时，周薪是100美元，40%的美国家庭，年收入超过7000美元。这个时代，美国几乎消灭了无产阶级。60年代美国的经济社会情况。当时40%的美国家庭，年收入达到7000美元，大家觉得物价在上涨，但其实是他们生活水平在不断提高。美国有60-70%的家庭，进入了中产。40%的青年人可以上大学，欧洲的外交官都十分感慨，美国经济已经变得十分的强大，当年还感慨德国奇迹，但现在更大的奇迹在美国发生。60年代美国已经有了9万名百万富翁，是上个10年的3倍，而且数字还以每年5000人的速度增长。美国的海外投资已经由120亿美元，增长到800亿美元，通用汽车一年的销售额，就是联邦德国国民生产总值的三分之一。纽约交易所， 投资额已经从二战结束后的460亿美元，增加到了4110亿美元。道琼斯指数也涨到了732点。而当时美国人一定不知道，直到1991年，道指才突破1000点大关。</p><p>美国的经济从火车中受益，而现在美国人更倾向于坐飞机，坐火车和坐飞机的旅客比例为1：3.美国的电视机总量，达到5640万台，超过90%的家庭拥有收音机，所以美国人随时都可以接受信息。</p><p>不过悲剧就在这样的一派祥和中发生了，1963年11月22日，肯尼迪为了调节民主党内部的矛盾，去了达拉斯，结果在达拉斯当地，三发子弹射向了肯尼迪总统，第一颗子弹打中喉咙，第二颗子弹打中头部，还有一颗子弹射偏。而事件发生后，全国很多电视台，都中断了电视剧，开始了大直播。三大广播公司为该事件，更是做了三天三夜的直播报道，中间没有插播一条商业广告。直到总统下葬才算结束。当时美国人一开始是不信的，因为绝大多数人，都是从其他人那里听说的，但后来新闻一一解开了疑问。</p><p>下午1点半左右发生的枪击，到2点半就传来正式噩耗，肯尼迪总统不治身亡。凶手叫做奥斯瓦尔德，他狙击了总统后不久又枪杀了一名警察，下午3点左右，他在一个电影院里被拘捕。这才知道，他是教科书仓库的管理员，而教科书仓库也是他狙击总统的地点。随后，副总统林登约翰逊在空军1号上接任了美国新总统。</p><p>这时候另外一起枪击事件爆发了，刺杀总统的枪手，被移送到另外一家监狱的途中，被一个夜总会老板开枪打死。而且这事就发生在70名警察面前。甚至还有电视台正在直播，所以全世界的人，都眼睁睁的看到这起枪杀。</p><p>随后全国兴起了一场纪念活动，把很多地方都改名成为肯尼迪，比如肯尼迪机场，肯尼迪中心，肯尼迪中学，还有肯尼迪山。在随后的几十年里，人们都在不断地争论，到底是谁策划了这次谋杀，有人说是卡斯特罗，但是卡斯特罗并不承认。而更可怕的是，在刺杀事件之后的短短三年里，18名关键证人全都意外死亡。甚至有人怀疑，当时刺杀肯尼迪的还另有其人，并不只是仅仅一名枪手。但出人意料的是，即便是强大如美国，竟然50多年了，依然没有破案。</p><p>约翰逊跟当年的杜鲁门一样，莫名其妙坐上了总统之位，而当时他根本就没有准备好，甚至外交政策他完全都不了解。甚至他又请回了艾森豪威尔，来咨询该怎么当总统。这是一个很自恋的人，他在浑身上下，都带着总统徽章，好像就怕别人忘了他是总统一样，甚至他一边演讲，一边在数着台下的掌声。他习惯于夸夸其谈，好大喜功，并且极力隐藏自己的缺点。但是你越是这样，大家就越是嘲笑你，很多人都像当年嘲笑胡佛一样，嘲笑约翰逊。</p><p>约翰逊其实也很郁闷，他一直活在肯尼迪的阴影之下，肯尼迪的所有商品，都能很快销售一空，而现任总统的东西却完全没人要。甚至他媳妇美国第一夫人，都要活在肯尼迪夫人的影响之下。而且更郁闷的是，很多人认为，是约翰逊干掉了肯尼迪。尽管当时大法官已经宣布，就是奥斯瓦尔德刺杀了肯尼迪，并且没有同党。</p><p>而肯尼迪的弟弟，当时的司法部长，罗伯特肯尼迪，他组织了一个流亡政府，希望可以倒逼约翰逊，让他成为副总统，但是这根本不可能，这两人，根本就尿不到一个壶里去，约翰逊早就很烦小肯尼迪了，所以他直接就拒绝了小肯尼迪作为他的竞选伙伴。</p><p>约翰逊要面临新的美国大选，而他的对手共和党人戈德华特则一直在讽刺他对于共产主义太过于懦弱，这就让约翰逊有点要证明自己的意思，而唯一热冲突的地方就是中南半岛的越南，一次美军和北越鱼雷艇的摩擦中，约翰逊要求全力还击，并且启动飞机，其实根本就没有必要，但是约翰逊就是要秀一下肌肉。反击一下共和党，所以北越的舰队就跟着倒霉。最后炸毁了北越35艘舰艇和90%的油料库。这就是东京湾事件，或者北部湾事件。其实就是美国人欠招非得到人家那收集情报，人家过来轰他走，他还把人家打了，而且还告诉世界，自己是受害者。不过这让约翰逊在国内的支持率有所上升。支持政府开战的人，占了大多数。</p><p>这时候美国国内，黑人又闹事了，其实就是鸡毛蒜皮的小事，一个清洁工闲的蛋疼，用水管对黑人男孩滋水，结果激怒了黑人，就追着他拿刀砍，警察来了没有制止麻烦，便开枪射杀了黑人，结果全国引发大暴动。纽约，新泽西，费城，芝加哥全都迎来了暴乱。</p><p>原来黑人四分之三都在南方，后来南方对他们不友好，这些黑人就往北方移动，而黑人生育率比白人高40%，所以美国人口增长主要都是黑人贡献，这样黑人就越来越多。当时大量的黑人参与了1964年密西西比州的自由之夏。这又是一场民权运动。而他们的对手是三K党，极其凶残，尽然用私人飞机往黑人的住宅里扔炸药包，他们拥有很多致命武器。很多警察还知法犯法，逮捕黑人然后交给暴民，任其把黑人杀死后又掩埋尸体。那会杀掉黑人，法律并不好定性，因为陪审团也全都是白人。</p><p>整个案件拖了3年才终于宣判白人有罪，期间大法官甚至还被威胁，但这也依旧很有进步意义，因为在此之前，白人陪审团，从没有判罚过白人有罪。这时候共和党并不乐观，有点如履薄冰，共和党的党员减少了三分之一，而且还有大量的中间派存在。而这次总统选举，他们拿出了善于演讲戈德华特。他原来是个空军少将，也是个极端的技术爱好者。而他的粉丝，都是非常铁杆。不过戈德华特却并不怎么具有党内凝聚力，共和党那些元老们，并不怎么喜欢他。这个人甚至主张使用原子弹，让大家突然感到不安。这也成为了民主党重点攻击他的一个点。最后连媒体也逐渐转向了民主党的约翰逊。</p><p>后来民调显示，约翰逊支持率高达65%，而戈德华特支持率只有29%。所以这场选举，似乎没什么悬念。所以美国人基本都不怎么关心这次大选，反而都在关注国际事件，当时全世界发生了三件大事，一个是赫鲁晓夫被赶下了台，第二个是中国爆炸了原子弹，英国最后一个君主指定的首相垮台。</p><p>11月，林登约翰逊又赢得了一个任期，其实并非是约翰逊有多优秀，只是对手的衬托。而尼克松此时已经无心政治，他正在忙着赚钱。美国社会男性开始流行穿着牛仔装，而女性的裙子则一点一点的缩短。甚至裸胸装大幅流行。到了60年代中期，半裸已经成为了流行时尚。而美国校园里，也兴起了一场言论自由运动，很多孩子，在学校里举着一个写着fuck的牌子到处游行。这其实是一种新的生活方式，和道德方式的兴起。</p><p>当时还有很多人做起了单身年女的生意，比如单身俱乐部，单身公寓等等，也有人效仿，在老年人群体中，建起了退休城，也取得了成功。当时婚姻制度已经开始遭遇挑战。从滑板到自行车，成为了年轻人最爱的玩具。</p><p>约翰逊此时正在极力推动，医保法案，其实杜鲁门当年就做过类似的努力但是没有成功，而现在约翰逊也受到了同样的阻力，医生们的利益受到了损失，所以美国医协雇佣23名专职人员，专门和约翰逊对抗。</p><p>约翰逊推行医保法案，但是遭遇到了医生协会的反对，当时这个压力可是不小，因为65岁以上的老年人口，比杜鲁门时期翻了一倍，经过了反复的争取之后，1965年7月30日，约翰逊才正式胜利，签署了该法案，第二年7月1日正式实施，16万老年病人被纳入医保补贴计划。医保计划出台后，住院率增加了3%，每星期大约都有10万新病人入院。</p><p>下一步，约翰逊又提交了一个大梦想，那就是教育法案。他决定将所有学校都纳入教育法案，而且态度强硬，不接受任何修改，此计划要为大学和教会学校拨款10亿美元。实现全民受教育机会。此外还有选举法案，以及扶贫计划。还有为失业人员提供的工作机会计划等等，在这些法案通过后的第二年，约翰逊获得了人民，特别是底层人民的巨大支持。只有一些知识分子，总在辱骂约翰逊，而且全都是人身攻击。主要是因为他们对约翰逊撒谎不满，也有的是因为还在怀念肯尼迪，所以至今不接受约翰逊。而约翰逊自己也不知道到底是哪出了问题，其实当时他给与的和人们想要的不太统一，美国当时的问题是富裕，而不再是贫穷，就像我们很多人一味地给父母钱，以为这样就是孝顺一样，但其实他们要的是陪伴，而并非财富。所以答案就有了，当时美国人要的是更多的自由，而并非是保障。</p><p>东京湾事件之后，越南地区的摩擦仍在发生。游击队经常骚扰美军，一次炮击炸死了5名军事顾问，76人受伤，另一次在酒店安放炸弹，2名美军士兵丧生，58人受伤，这让约翰逊很不爽，他决定要报复。他准备对北越进行一场轰炸，但是也有人提出反对，因为越南太穷了，你轰炸工业城市，打掉他的发电厂，他就瘫痪了，但越南都是茅草屋，你轰炸不轰炸意义不大，而且一旦轰炸， 就意味着美国将全面卷入战争。所以到底要不要轰炸，基本上55开，大家下不了决心。</p><p>但是后来，帮助美国人下决心的却是北越，他们又一次袭击了美军基地，炸毁了16架直升机和四架飞机，8名美军士兵死亡，126人受伤。这一举动让华盛顿非常愤怒，约翰逊命令三艘航空母舰出击，并用舰载飞机对北越军事基地进行轰炸。还宣称，美军是否要战略升级，取决于北越的侵略者。但是随后，越共又炸了美军军营的饭店，又是23人死亡， 21人受伤。</p><p>这下约翰逊不单单再下发轰炸指令，而是要做一个更加周密的战争计划。随即一个叫做滚雷的计划出台，美军调来了两个营，3500名海军陆战队也加入战斗。这引发了国际社会的争议，很多人示威抗议。</p><p>因为南越政府实在是太招人恨了，了解南越的人，无一例外都反对这场战争，据说当时美国军队的补给都被他们卖到了黑市，富裕家庭就可以免除兵役，所以你美国人出兵，跟这种人为伍，自然也就失去了正义的属性。而且南越还不断的爆发政变，一共2-3年，发生了9次政变。所以你说这都是一群什么玩意。弄得约翰逊都不知道在帮助谁。所以都说不怕神一样的对手，就怕猪一样的队友，这话太对了，南越就是猪一样的队友，让约翰逊没少招骂。</p><p>很快，美国在西贡的大使馆，被汽车炸弹袭击，17名使馆工作人员丧生。而第二天美国飞机又轰炸了北越雷达站。越南战争的表现形式就是你偷偷的爆炸我，我就拿飞机狠狠的炸你。似乎美军的损失要明显更大，而且也防不胜防。</p><p>美国自始至终对于这种游击战很不适应，而越南打击美军的办法就是恐怖袭击。而美国没办法只能持续增兵，后来已经加到了2.5万人，但是仍然节节败退，甚至连游击队都没找到。战场不顺利，反战的人也就越来越多，最要命的是，约翰逊在竞选的时候，提倡的是和平，而现在他却如此好战，而且好战还打不赢，约翰逊也感受到了巨大的压力。</p><p>于是他准备转变一下策略，对全国人民讲话，说要开展无条件和谈，希望可以进行一场亚洲的马歇尔计划，向国会申请10亿美元，用于给亚洲人民买粮食。但说是一方面，做又是一方面，约翰逊并没有这么去做，他的做法依旧是实施他的滚雷计划，而且还信心满满的认为，轰炸就会让北越军队，主动过来求和。于是他持续增兵，将美军驻越南人数提高到5万。</p><p>而北越也很强硬，他们已经杀入了南越境内。而且美国打击越狠，他们就越猖獗，事实上，美军轰炸对于北越的影响微乎其微。而当时美国国防部长麦克纳马拉则认为越南战争会在1967年6月30日结束，因为他认为这是个完美的时机，自己的预算刚好可以平衡。</p><p>当时很多经济学家还要求增税，要让全民进入战争状态，经济学家们还威胁约翰逊，如果不增税，你可能无法完成战争计划，社会计划，以及抑制通货膨胀。但是约翰逊却十分清楚，他很难说服国会，为战争越南增税。所以他仍然希望用廉价的方式，换取胜利。以至于他在从中做手脚，在经济顾问委员会提交增税报告后，他虚报了战争花费的数字，所以增税计划就更不可能通过了。而这就引发了大麻烦</p><p>当时联邦政府财政赤字达到98亿美元，而越南战争，每月花费就达到20-30亿美元，那一年越南战争的实际花费是270亿美元，美国赤字在随后瞬间暴涨到了230亿美元，约翰逊的蒙骗，使得美国爆发了恶性通货膨胀，这场通胀，将影响深远，甚至让美国差点完蛋。熟悉美国股市的人都知道，它更是让整个70年代，成为美国投资历史最黑暗的时代。</p><p>1965年9月，美国军队投入越南战场已经超过了20万。而当时政府根本就没有任何明确的数字，而在美国国内，10月份掀起了和平示威游行，他们反对把美国青年人送往越南战场，甚至还有极端人士进行自焚抗议。但是，更有意思的是，还有一股力量，在进行反示威游行，他们的口号却是轰炸河内。指责那些和平运动者为叛国者。</p><p>在战场上，美军的一些二战精锐，竟然被越共打的惨败，比如101空降旅，绿色贝雷帽突击队，美军第一骑兵师，北越军队采取的战术就是，近身肉搏，这样美国的武器优势就完全丧失。虽然从数字上看，越南军队损失的人数比美军人数要多，但其实并不能简单这么对比。毕竟越南人从一开始就做好了为国捐躯的准备，而美国人则牺牲不起。胡志明手下大将武元甲从一开始就算好了，这就是一场人力与装备的对决。他也知道不可能打赢美国人，而胜利的唯一希望就是打疼你，让美国的公众舆论占到自己这方来，所以他就选择尽可能的杀伤美军士兵的生命。他相信，美国人民不可能容忍这种损失。美国其实很想和谈，但是胡志明就是避而不谈。这就是一种拼命的打法，让美国人头疼不已。上一次遭遇这么顽强的对手，还是在朝鲜战场。</p><p>当时在美国国内，，马丁路德金发现，很多黑人没有去登记成为选民，所以他就发动了一场选民登记运动，但是其实黑人对选民权力根本不感兴趣。所以这些黑人领袖，就得找一些极端的案例，然后才能刺激黑人的反应，也就是我们常说的，要没事找事。后来终于让他等到了这个机会，一个进行选民登记的黑人，被一伙白人杀害了，于是这些民权领袖就借题发挥，搞了一场巨大的示威游行活动，又是在亚拉巴马州，跟警察爆发了重大冲突。后来约翰逊谴责当地那些官员。而当地州长华莱士，则对此表示非常愤慨，他把这些示威比作了共产主义行动，说这有可能会颠覆政权。</p><p>整个游行活动，最后又25000人参与，而就在游行结束后，白人暴徒开始实行报复暗杀活动。多名黑人遭到谋杀。而在审判中，白人陪审团，多判这些暴徒无罪。最后政府不得不干预，才将罪犯绳之以法，这次大的骚乱叫做塞尔玛事件，客观上推动了选举法案的制定。而约翰逊也说，这个功劳应该归于马丁路德金。不过这也透露了一个美国社会的问题，那就是60年代中期，美国整个社会越来越暴力，很多事都希望通过暴力来解决问题。</p><p>加利福尼亚州的公路巡警，抓到了一个黑人青年，并以酒驾的名义逮捕了他，但这一举动，却让他惹祸上身。这个事件随后引发了暴力冲突，最后形成了2000名暴徒，开始到处打砸抢。直到早上，暴乱才稍微平息。但谁承想，一天以后，暴乱又开始了，而且已经接近了叛乱的程度。最后洛杉矶政府不得不调动国民警卫队。</p><p>这时候暴徒数量已经达到5000人。这些人开始抢劫放火。就连黑人开的店也不放过。甚至跟警察发生了枪战。这场暴乱一共持续了6天，最后34人死亡，898人受伤，4000人被捕，损失高达4500万美元。这种种族暴乱，在各地时有发生。各大城市皆难以幸免。截至1966年底，美国一年遭受了43起种族骚乱的破坏。</p><p>后来有黑人还是比较冷静的，他们觉得黑人毕竟是少数，只占11%，所以不太可能彻底夺权，所以他们提出，从街头转向谈判桌。有事好好说，但是马丁路德金并不同意。因为当时的这些黑人，其实更多都只是为了暴乱而暴乱，他们并不想做任何妥协。</p><p>此时的美国，简直内忧外患，实在是倒霉，国内暴乱不断，而越南战场损失也是十分惨重，1966年4800名美国士兵丧生，第二年5月，美军死亡人数超过1万人，而平民的死亡人数也上升到53000人，这就让美国政府承担着巨大的舆论压力。而北越方面，似乎人却越打越多，武元甲每月输送8800名北越士兵进入南越，全年超过10万人。最后国防部长麦克纳马拉非常纳闷，他也想不明白，为啥美国引以为傲的轰炸对北越毫无作用，其实他不理解的是，这就不是一个工业国家，越南没什么工业设施，他的武器装备也不是自己造，都是靠老大哥们支持，所以你轰炸一点意义都没有，根本无法让他的军事系统瘫痪。反而让对方士气越来越强。</p><p>后来他们也觉得这么下去不是事，决定最好改变一下策略。但是参谋长联系会议，却始终不同意改变，这些坐在家里的将军们，反而认为现在已经取得了进展。到了1967年4月，越南战场人数已经超过了48万人，比朝鲜战争顶峰还要多。但前线指挥官觉得还不够，他希望增加到68万人。他告诉约翰逊总统，只有足够的人数，才能让我们在两年内，结束这场战斗。</p><p>总统鼻子气歪了，他说我们增加军队，敌人不会增加吗？如果把武元甲打急眼了，又去找中国志愿军，这场战争，该如何收场？这个问题问的前线指挥官，哑口无言。</p><p>美国卷入越南战争的时间，已经超过了二战和朝鲜战争，而且更要命的是，在越南战场，美国基本都在做无用功，很多地方都是得而复失又失而复得。所以美国政府中，越来越多的人，开始反对这场战争。甚至有人把这场战争说成是纳粹行为。大学生们还发起了55000人的反战示威运动，反抗征兵。而当时最流行的一本书，就是如何躲避征兵的技巧。甚至有人为了逃避征兵，去吸毒或者移民加拿大，这就让美国很多年轻人大幅流失。但此时仍然有支持战争的愤青，就像我们这也一样，宁可土地不长草也要收复钓鱼岛，这种人太多了。这帮人也就天天在那喊喊，你真让他上战场保证秒怂。</p><p>而林登约翰逊此时又展现了他两面三刀的人性，一方面他表示大家都有表达自己的权力，另一方面他认为不赞成战争的都不是美国人。甚至当面训斥那些反战的高层。甚至说他们都是苏联派来的。但是后来，很多人为了表达不满，纷纷离开了约翰逊，从政府中辞职。</p><p>约翰逊的公众形象越来越差，只有36%的人，认同他在总统任期内的做法。而此时的约翰逊已经采取了孤立办法， 他已经不敢走进人群，甚至不敢走出白宫，随时警惕着他身边的人。</p><p>1965年11月9日，美国公共设施发生了一次重大故障，8万英里的地方，出现了大断电。主要就是一个水力发电站的发电设备发生了故障，于是电网中其他线路就负载增加，随即其他电路都启动自我保护，纽约附近全部断电。最郁闷的就是飞机，由于整个城市断电，机场跑道的信号灯已经消失不见。而地铁也停在了原地。医院里只能用手电筒继续手术。整个城市都乱套了。</p><p>人们都陷入了恐慌，甚至以为是有外星人入侵。也有谣言说是受到了核攻击。但是断电其实并没有等太久，有的地方30分钟就恢复了，也有的地方一天以后才恢复。不过这个事之后，全民表现的却很乐观，大家都在半开玩笑的谈论着那晚上的奇遇。</p><p>当时也发生了一场反对技术的运动，他们认为技术的进步让工人更忙了，是为了增加利润而牺牲工人利益的举动。当时大家其实不可能否定电器了，主要是反对使用计算机。当时很多人害怕自己被计算机所主导。技术革命确实正在发生， 1955年美国只有1000台计算机，而到了67年已经增加到了4万台。这就让美国人文主义感到不安。他们生怕这些计算机抢了自己的饭碗，跟现在害怕人工智能抢了我们的饭碗差不多。而当时美国还有一个问题，就是技术越发展，他们的国民负债比例也就越高。</p><p>这个时代，基本实现了充分就业，而国民已经习惯了过度消费，广告商不断地诱惑着年轻人进行消费。但也正是因为大家都在过度消费，透支消费，所以通货膨胀也即将到来。另外，对于个人来说，也没办法去做职业规划，因为10年时间，就会发生巨大变化。当时社会上的热销商品，几乎在十年前都还没有出现，工人不再只是从事生产行业，而是进入更加广阔的服务娱乐和休闲行业，有人描写，原来的经济逻辑就是，人面对材料，然后生产出新的东西，60年代的新经济模式是，人面对其他人，劝说他采取行动的方式。可见服务业逐渐取代了制造业，成为社会经济的主要驱动力量。</p><p>当时的民众，还曾经一度把不满的情绪发泄到商人身上，他们认为正是这些商人生产了汽油弹才造成了越南战争，而这其实也并不全都是无厘头，当年美国军事工业综合体，确实一直在发展，有些企业亦公亦私，基本上就是计划经济的产物。跟整个美国社会，格格不入。比如兰德公司所有预算都是美国空军承包，而IBM的最大客户就是五角大楼，而这就让企业的创新动力不足。或者说这些大企业只为政府的需要创新，而很少针对人民的需求进行创新。</p><p>另外，这也引发了一个问题，就是政府主导了企业的发展方向，政府每年对企业研发的投入高达150亿美元。大企业相应的交出了自己的自治权。所以大家也就不难理解，为什么在那段时间，上演漂亮50热了。其实也可以理解成为一场美国的国进民退，或者是大企业进小企业退。</p><p>1965年，40%的美国年轻人可以上大学，美国政府在教育上的投入是300亿美元，上学成为了美国最大的产业，但是学生也令美国人特别的头疼，比如反对越南战争最激烈的就是学生群体。而美国大学生的举动，也通过各种通信手段影响着全世界，所以美国大学生的暴动，也纷纷传递到欧洲和亚洲。在那边也经常发生类似的运动。从这点来说，文化方面，美国已经成为全球的风向标。</p><p>美国的大学生，显得非常暴力，他们总是想着用暴力去解决问题，比如当时很多人都认为，朝着警察扔石头和瓶子很正常，这并不算是暴力手段。只要学校的安排，不如学生的意，他们就会聚集起来抗议，游行。而且手段很极端。有的大学校长就感慨，原来设想的象牙塔，如今已经成为了散兵坑。其实读到这的时候，这些当年不受管制的学生，也就有了反抗精神，他们勇于向当前一切的东西提出抗议，并用极端手段摧毁他们，这也就造成了一代人的个性。而当年的乔布斯和比尔盖茨，差不多10几岁，应该也感受到了这种文化的洗礼，所以才有后来的改变世界。这就是我们所说的，太乖的孩子没前途，太乖的一代孩子，也注定不会给国家带来希望。叛逆也许并非是什么坏事。</p><p>美国有一半人口都在30岁以下，人口结构特别年轻。全社会都在崇拜年轻，即使上了岁数的人，也想要年轻，甚至不惜去整容。而年轻人，则纵情享受。广告商则小心翼翼，生怕得罪年轻人，因为美国十几岁的年轻人，虽然还不赚钱，但却一年消费高达250亿美元。</p><p>而青少年犯罪率也在大幅上升，美国因为凶杀，强奸，抢劫，故意伤害，入室行窃而被逮捕的人，18岁以下的青少年几乎占到了一半。而且超过一半的青少年，有喝酒的习惯，甚至很多已经到了酗酒的程度。关键是酒品还不怎么好，喝多了就闹事，拥有很强的破坏性。而抓到他们的时候，理由也很简单，就是为了好玩。而且最逗逼的事，不光是砸毁其他人的财物，有的狠起来连自己家都砸。有家庭富裕的学生，在一场聚会后，把家里的别墅都给砸了。</p><p>这段时间，妇女解放运动也有明显的发展，原来有些工作是专门男性做的，也有另一些工作是女性做的但是在科技进步后，打破了工作上的男女界限，女性也可以做很多男性的工作，甚至承担了家庭生活中养家糊口，体力劳动的地位，所以就要求更多的权力，很多女性也染上了比如酗酒，斗殴，赌博以前只是男性身上才有的恶习。所以妇女解放运动，本质上就是妇女工作地位变化所引发的社会变革。他们经济独立了，自然也就人格独立了。</p><p>当时有统计，纽约大学女生中，有三分之一的人承认，曾经和完全陌生的人有过一夜情，60年代数据显示，婚前性行为比例高达65%，整个社会越来越宽容，而他们担心的性病传染，也极少发生，避孕措施越来越多，也彻底打消了女性的后顾之忧。唯一的阻力就是道德，而这一代美国年轻人，最不想被束缚的恰恰就是道德。甚至当时过了16岁的美国女孩，如果还没有跟男朋友发生关系，就会被别人所瞧不起。甚至在一些高中，女学生怀孕很常见，学校甚至允许他们生完孩子再来上课。当时非婚生子十分普遍，40%的少女十几岁就当妈了。当时的社会文化读物，很多也都在大肆宣传这些价值观。让大家觉得，这就是常态。甚至已经发生到了滥交的程度。而如果一个女孩到了结婚还是处女，则有人就会怀疑他是不是有吸毒的瘾君子。</p><p>这段时间，药品也发生了明显的革命，医生每年开出价值20亿美元的处方药。很多药物甚至并没有怎么认真审核就放出来了，结果造成了生育畸形儿，后来才被叫停。</p><p>当时还有人研究出了LSD，这是一种迷幻剂，和兴奋剂，吃了这个药，其实就是毒品，会让人产生幻觉，让人欲罢不能，所以整个美国的一代人，都开始消费毒品。吸毒的习惯，在美国年轻人中非常普遍，这点我们曾经在乡下人的悲歌这本书里也讲过，在作者父母那一代就是60年代的这波年轻人。吸毒成为很多年轻人的生活方式之一。甚至我们知道的乔布斯，他也是有抽大麻和吃迷魂药的习惯，有人要他戒掉毒品的时候，他也是大发雷霆。当时贩毒也十分普遍，而利润也十分可观。当时有统计，每年美国就有68000人吸毒上瘾。有美国医学会毒瘾调查显示，60年代初，美国人只有几十万人抽大麻，但到了60年代末，这个人数就增加到了800万人。但这还是最为保守的估计，美国公共卫生署当时给出的数据是2000万人。还有统计说，47%的美国大学生都抽过大麻，收入越高的家庭，他们的孩子抽大麻越普遍。</p><p>嬉皮士，本来是形容反抗习俗的年轻人，但是在当时已经变味了，嬉皮士更多来描写长发，肮脏的吸毒者，这帮人活的像一群流浪汉。但其实他们并不是真的流浪汉，甚至家庭条件还都不错。所以这帮嬉皮士纯属是一群神经病，让当时的美国家长完全不可理解。还有一些精神分裂的，周一至周五是正常人，周末变成了嬉皮士一族，放纵自己。</p><p>更让人头疼的是，嬉皮士和真正流浪的黑人，为了抢地盘，而发生了激烈的冲突，爆发了很多的命案。以旧金山附近最为严重。作者还记录了一个故事，一个上流社会女孩叫做琳达，父母都很有钱，但他却过着人格分裂的生活，在家人面前他有教养，懂礼仪，喜欢骑马，画画这些高雅的爱好，但是最后他欺骗了父母，私下里却跟一帮嬉皮士鬼混，甚至吸毒。并在一个非常肮脏的仓库里滥交，最后被一些暴徒轮奸后杀害。而当他死后，除了父母很伤心外，其他跟他鬼混在一起的穷人，却并不上心。在这次恶性事件之后，嬉皮士运动由盛转衰，嬉皮士们逐渐消失了。</p><p>到了1968年，国防部预算达到了720亿美元，从这个数据来看，就知道当时的美国并不乐观。而美国的汽车已经相当普及，接近了1亿辆，近8成家庭至少有一辆车，四分之一的家庭有两辆车，整个美国都陷入了大拥堵之中。这年发生了一件事，美国的船只被朝鲜扣押了，这是150年来的首次，二战的时候，德国都没敢干的事，让朝鲜给干了，这让美国极度愤怒。但最后还是克制住了，通过谈判解决了问题，因为他们实在打不起仗了。越南战争已经把他们拖入了泥潭</p><p>在越南，北越军队发动了最大规模的一次攻势。美军以为，北越要攻打自己的军事碍口，所以他们加强了军事力量，把全部精力都放在了这次决战上。但是，武元甲这个人深得游击战法精髓，他这只是疑兵之计，他真正的目的是袭击南越人口聚集的城市。就在农历新年这天，北越军队潜入其中，趁着守军不备发起进攻，警察局，军事基地，政府大楼，广播站，发电站全都被炸毁，共有6万越共士兵参加此次行动，打完就跑，不跟你正面冲突。对于南越和美国来说，损失惨重，这些人口中心城市70%的房屋都被炸成了废墟。约翰逊宣布，敌人的损失比我们大，所以我们赢了。但是这种观点，被很多美国人嘲笑了。反正你胸大，说什么都对。</p><p>真实情况是，1968年4月，美国驻扎在越南的军队人数已经上升到了近55万人，死亡人数达到了22951人，这个完全跟美国人不挨边的越南战争，甚至比美国独立战争持续的时间还要久，虽然约翰逊也把自己的两个女婿送到了越南，但是这并不能换来人民的谅解。为别人家的事情，拼掉自己的老本，死伤自己的孩子，这事大家越来越接受不了。</p><p>而此时驻越美军司令还要求加兵20万人，这就让美国政府忍无可忍，他们决定换人，撤换了驻越美军总司令，他们此时需要的是一个能够谈判，并组织撤退的人。随即和谈开始，但是越南态度很是强硬，甚至一边谈一边打，美国的损失越来越大，一个月美国就损失2000名士兵。此时约翰逊还是嘴硬，但是别人提醒他，大哥，你还是克制一点，面对现实吧。你现在打人家一个小兄弟都打不赢，万一人家老大哥也过来抽你，到时候就不可收拾了。</p><p>也是在这一个月，马丁路德金被枪杀了，这下可坏事了，黑人的愤怒到达了几点，出现了巨大的骚乱。168个城市遭到破坏，华盛顿损失惨重。在这里发生了711起纵火事件。美国政府动用了5500名警察来维持秩序。最后2600人被逮捕，21270人受伤。后来那个枪手被抓，判了99年监禁，但是这绝不是最后一次谋杀，另一场阴谋对准了当时最有希望获得民主党总统候选人的罗伯特肯尼迪，也就是上届总统约翰肯尼迪的弟弟。当时在民主党的党内竞选中，以绝对优势的票数领先。按照这个趋势，他十分有可能成为约翰逊之后的下一任美国总统。</p><p>他在一次活动中，被挤在人群中的枪手开枪射杀，枪手一口气开了8枪，6个人中弹，罗伯特肯尼迪中了两枪，生命垂危。其中有一颗子弹，爆头了。这个凶手被当场抓住，他是个土生土长的约旦人，他仇视以色列，而他选择刺杀的这天，就是以色列和阿拉伯之战的一周年纪念日。而罗伯特肯尼迪则一直同情以色列。</p><p>很快，罗伯特肯尼迪就不治死亡。肯尼迪家族真是倒霉透顶，两个优秀的政治人物，本应该成为美国政治舞台上的一道风景，但却先后被刺杀。而这两兄弟之死，也直接改变了美国和全世界的进程。<br>民主党总统竞选人呼声最高的人选，小肯尼迪也遇刺身亡，而这种暴力事件就是整个美国社会那个阶段的缩影，1968年上半年，全美爆发了221次大规模游行示威，遍及101所大学，39000名学生。一些名校也位列其中。大学生开始要求政治权力。</p><p>甚至有的大学内部，发生了造反行动，比如哥伦比亚大学，里面就有一个学生争取民主社会组织，他们甚至扣押了教务长，还反对校长，闯进校长办公室，甚至说这个校长领导下的大学管理层像纳粹一样罪恶。而学生们就两个诉求，一个是哥伦比亚大学退出防务分析研究所，也就是不再替美国政府分析战争局势，这其实就是一个反战的请求，另外一个是要停建体育馆，因为学生们觉得这是一个标志着等级制度的设施。只为富人服务，而侵害穷人利益。只要学校不妥协，就坚决不退缩。后来学校决定，武力平叛。最后698人被捕，很多学生被停学。但是后来调查报告出来之后，剧情反转了，报告认为，相比于警察的暴力执法，学生的暴力抗议不值一提。学生只是表达对越南战争和种族主义表达不满而已。</p><p>在约翰逊的任期结束的时候， 全国经济已经一塌糊涂，建筑业经常要延期6个月以上，你在机场等待取行李，却被告知，行李已经被错运到了另外一个城市，还有牛奶公司经常断货，公共汽车和火车，也经常打乱时间表。总之就是全国上下，非常没有秩序。这一切都跟越南战争不无关系，大家把所有的心思都用在了如何躲避征兵上，美国的人才都移民到了加拿大，而留下的那些年轻人，还有一半都在吸毒。不吸毒的大多还酗酒。而成年美国人，却都在忙着罢工，从而发泄对世道的不满。所以美国人已经不再有艰苦奋斗的精神。逃避和得过且过成为每个人的心态。</p><p>这一年尼克松准备参加第二次总统竞选，此时他已经是共和党的头号总统竞选人。他的竞选搭档叫做阿格纽，这个人根本就没人知道。尼克松选他，就是因为听话。就像尼克松当年被艾森豪威尔选中一样。另一方面，民主党的选举则非常不顺利，由于呼声最高的小肯尼迪遇刺，所以这次竞选的警卫是最为严密的，每次活动都有着严格的检查。这次竞选还有个小插曲，一些年轻人带来了一头猪，宣布要推选这头猪来当美国总统，后来警察逮捕了他们。又爆发了一场冲突。 据说全国8900万人，观看了这场民主党选举的闹剧，这其中就包括兴高采烈的尼克松。</p><p>最后民主党选出的总统竞选人，叫做汉弗莱，这个人跟约翰逊并不对付。虽然都是民主党，但是他们两个人也是相互拆台。而根据盖洛普调查，尼克松明显领先于汉佛莱。这届大选，尼克松显然已经胜券在握，而且他还故弄玄虚，说我有一个十拿九稳可以顺利结束越南战争的计划，但是现在不能透露。这就吊足了美国人的胃口。</p><p>最终选举结果是，尼克松获得了301票，汉佛莱191票，尼克松终于坐上了总统的位置。实现了王者归来。而且此时民主党也控制了国会。</p><p>摆在尼克松面前，最大的问题，就是尽快从越南撤出，这场战争打到现在美国已经损失了24291人。这个损失太大了，而且他引发了一系列的社会问题。全社会的暴力心态，都是源于这场本就不该参与的战争。尼克松现的任务就是给约翰逊擦屁股，退出越战，维持美元稳定，还要平衡预算，缓和种族矛盾。</p><p>尼克松政府比较单调，基本都是商人，也都是白人，而且都来自共和党选区，这倒不是因为他没有胸襟，是因为没人鸟他，他想让民主党加入，但人家不干，他也想让黑人加入，3名黑人领袖断然拒绝。当时他的政府之内，只有一个人在后来赫赫有名，这就是基辛格，当时他担任的是总统助理。</p><p>尼克松就任6个月后，就赶上了一个好事，肯尼迪当时设计的登月计划，终于有了结果，全国5.28亿观众，收看了登月节目，1969年7月，阿波罗11号，在肯尼迪中心发射。三个宇航员分别是机长阿姆斯特朗，空军军官奥尔德林，空军中校柯林斯。后来的事大家都知道，7月20日，阿姆斯特朗成为登月第一人。并留下了那句经典，对于一个人来说这是一小步，但对于整个人类来说这是巨大的一步，奥尔德林跟着走出太空舱，但就因为比阿姆斯特朗晚了19分钟，所以绝大多数人，根本不记得他。这次登月，美国人将国旗插在了月球上。并收集了月球表面的物质，并且测量了相关温度，当时他们测量的数据是，月球表面温度差异巨大，有太阳照射是零上112度，而没有太阳照射的地方是零下137度。要是没有价值30万美元的宇航服，人的身体根本就承受不了，他们在月球上待了总共21小时37分钟，然后发动引擎，开始返回地球。60个小时候，他们乘坐的哥伦比亚舱，着陆在海洋里。尼克松则在航空母舰上，亲自迎接。</p><p>随后，尼克松访问亚洲，向各个国家表示友好。甚至连罗马尼亚这样的红色国家，他也去了。这说明他的态度正在发生转变，准备争取广泛的国家支持。他的目的就是希望，尽快退出越南战争。他回到美国后，就马上提出税制改革，减少越南驻兵，将冲绳归还给了日本。</p><p>尼克松的生活比较奢侈，当时他的年薪是29万美元，但是他却用最大的按揭程度，买了两套25万美元的房子，以便和朋友在游艇上欢度周末后能有个去处。他还加州购买别墅，花钱修游泳池，建设高尔夫球场。而他的家人，出门消遣，基本都是搭乘政府专机，有5架波音707,11架喷气飞机，和16架直升机，专门伺候他。他还在戴维营有射箭场，游泳池，保龄球馆。后来有财富杂志给尼克松算账，说他的家庭开销大约是1亿美元，尼克松各处的房产里，雇佣了75名管家，女仆，厨师保姆，21名园丁，维修工，100名特工，300名保安，司机等，他的生活简直帝王范十足。要在咱们这来看，尼克松活脱就是一个贪官形象。</p><p>上任之初，尼克松是以救世主的心态工作的，他知道约翰逊的问题在哪，也知道该怎么去解决。 但知道和做到是两码事，一切并没有那么容易。他对全国人民讲话，说自己已经有了一个撤回全美地面部队，并用南越军队替换美军的计划，也就是战争全面越南化，让他们自己打去。当时的民意测验显示，77%的听众，对这个演讲表示赞同。而副总统阿格纽开始对媒体和舆论下手，他批评电视台，批评纽约时报，华盛顿邮报。说这些人故意引导舆论，走向偏激。</p><p>此时各个大学，仍然在上演着偏激革命，甚至往大学校长家里扔燃烧弹。甚至学生们都找来了步枪，胸前还带着弹药带。教育部长发话，如果美国大学再滥用权力，就撤销现有的一切补助。而罗纳德李根则要求对学潮进行调查，但是被副总统给否决了。</p><p>60年代初，美国年轻人是2700万，而到了60年代末，已经达到了4000万，占总人口的20%，庞大青少年团体，都在富裕的环境中长大，让青少年的反主流文化越来越强大。只要有足够多的年轻人参与，就会风靡一时。比如当时摇滚音乐就是热门，一场音乐会能吸引40万人。而且当天还下着大雨，本来警察都觉得这将是一场灾难，但没想到这场摇滚音乐会却极其成功。全靠着对摇滚的痴迷。摇滚文化，成为那一时期，美国新的文化元素。</p><p>当年，美国也发生了巨大的雾霾污染，大量河流被污染，甚至美国象征的白头鹰，都濒临灭绝。曼哈顿空气中，一氧化碳的含量是危险等级的2倍，1969年，还发生了钻井平台石油泄漏，让圣巴巴拉海滩全都被污染，大量生物死亡。这引发了大家的游行，政府不得不对石油企业做出限制。</p><p>而到了11月，美国又掀起了一场将近80万人参加的反战游行。这个规模，在美国也是前所未有的，每个人拿一张卡片，上面写一个丧生于越南战争的同胞的名字，从阿灵顿出发，步行到国会山，然后把卡片放在一个大棺材里，这一度让军队很紧张，就怕有什么大的骚乱发生， 但是结果还算井然有序。</p><p>美国又掀起了一场规模最大的反战游行。而此时在越南，美国士兵正在被杀伤，有的部队在三个半月，就牺牲了190人，一半都死于狙击和地雷。而美军也犯下了滔天罪行，他们找不到游击队，就射杀平民。甚至开启了大屠杀。一个叫做卡利的美国军官，被指控杀死了109名越南平民，后来这些人，都被送上了军事法庭，而卡利也因为证据确凿，被判死刑，还有记者拍下了这一切，历史被称为美莱惨案。</p><p>而在美国国内，却发生了舆论逆转，甚至有人开始炒作卡利事件，有人挑动情绪，说这是越南人活该，有人甚至写了卡利回忆录，卡利一时之间还成了英雄式的人物，大家觉得是政府背叛了他。给白宫的公众来信，99%的人都反对这个判决。</p><p>而尼克松似乎也没什么立场，他一开始在舆论的感召下，要亲自复审，但是后来他又改变了主意，这就让很多人表示不满，说他是在借此玩弄权术。</p><p>在越南战场上，谈判又陷入了僵局，美国虽然不想打了，但是你让他承认失败，他也觉得很没面子。美军发起了一次进攻，目标是一个山头，结果美军的飞机大炮，连续猛攻了8天，才打败了北越军队的步枪和手榴弹，但很快他们又决定放弃这个山头，理由是，这个山头已经没有什么战略价值。这就让美国的参议员们非常愤怒，因为这次行动造成了46人死亡，308人受伤。他们指责军方这是毫不负责任的进攻。然后就是催促总统，尽快退出越南。</p><p>1969年3月美军的死亡人数已经超过了33639人，超过了朝鲜战争，每年战争成本超过250亿美元，搞不到这些钱，于是就只能自己印，这就引发了经济中的严重通胀，相比于1958年，1969年的货币贬值了25%。其实单从这个数据上来看，到是还好，每年也就通胀掉3%左右，如果用今天的眼光来看，没什么太大的问题，但是要知道，当年可还是布雷顿森林体系，美元是与黄金挂钩的，所以这问题可大了。再不想办法，黄金就会被换光的。经济学家米尔顿弗里德曼就警告，通货膨胀必将演变成一场巨大的经济衰退。</p><p>此时基辛格提议，我们赶紧得跟越南人表明立场，尽快实现撤军，随后他们就对南越阮文绍进行了捧杀，告诉他们一定行，你们能够独当一面了。接着尼克松马上宣布撤军25000人。按照尼克松的安排，他准备在70年底或者71年中期，撤回全部军队。留下的部队以防御为主。</p><p>1969年，在美国上演了71起劫机案，其中58架飞机都飞往古巴，这让美国政府很头疼。他们也想了很多办法，比如搜身，甚至有人建议让乘客裸体登机，训练空乘人员色诱劫机犯。但其实劫机犯也并非是什么穷凶极恶之徒，很多人就是脑子有病。</p><p>1970年，非常不乐观，通货膨胀，犯罪，战争，股市大跌，道德沦丧，然后还有火灾，风灾！很多人都说，这是大家不再相信上帝的缘故。然后很多人又开始了封建迷信活动，比如占星术，电子计算机算命，电话算命，大学里甚至开设了巫术课程。</p><p>60年代的大繁荣似乎已经过去，宾夕法尼亚中央铁路，是美国工业时代的代表企业之一，而在1970年他竟然入不敷出，欠债26亿美元，而走入破产程序，电影产业也是处境艰难 ，好莱坞5家电影制片厂赤字严重，负债总额高达1亿美元，华尔街上1968年12月，道琼斯指数曾经逼近1000点大关，而到了1970年，5月，却跌回到了631点，此时的美国人一定想不到，股市要想回到1000点，他们需要足足等上20年。随着股市大跌，纽约也不再繁华。交易所里冷冷清清，旅游者也越来越少。</p><p>但是有一个行业却得到了大发展，这就是色情行业，这已经成为美国的一个大产业，年利润达到5亿美元，在别的行业都不好的时候，色情行业成为了一个重要的增长点。很多电影院都靠着X级影片才能盈利，有的片子全天滚动不间断播出，曼哈顿的两条大街上，有200家成人书店。这些色情产品，成了经济不好的时候，大家唯一的慰藉。有的女记者为了写报道，竟然亲身去体验和不同的陌生人上床。</p><p>对此，美国社会也并不回避，而是尽可能的在学校里开设这方面的教育。但也有很多传统组织试图阻止这个事情。也为此争论了好久，但是1970年，学校里普遍已经开始性教育课程。而女性解放运动，也已经越来越进入高潮。2300万的美国妇女拥有全职工作，800万妇女有兼职工作，40%已婚妇女还在职场，这其实已经是对男性在职场中的权威性，提出了巨大挑战。不过男性也有优势，他们依旧是家里收入的顶梁柱，而且也并没有同工同酬，同样的工作，如果男性干可以赚5美元，女性就只有3美元。男销售员的收入差不多是8500美元，而女销售员只有3460美元。而且高端职业一般也只有男性，比如医生，99%的都是男性。女性更多在做接线员，话务员之类的工作。当时男性也并不反对女性解放，有人说，如果真要平等，那么就让女性也上战场。应征入伍。</p><p>当时暴力事件依旧非常频繁，IBM，通用电话电报和美孚石油都遭遇了炸弹袭击，这些暴徒告诉他们，这些公司靠着越南战争而谋取暴利，但是炸弹并不好玩，很多恐怖分子学艺不精，把自己也炸死了，比如有的在车里就炸了，原因是时间没计算好。 </p><p>1970年，越南战争依旧是所有麻烦的源头，尼克松即使实施他的撤军计划， 驻越美军已经从54万人，降低到了34万人，而此时美军阵亡人数还在增加，达到了4万人之多。华盛顿却在一次讲话中，对外宣布未来可能有20万美军，还将在越南驻扎几年，这其实就是不认怂，不能丢面，那就又没的谈了。此时在前线的士兵，也都纷纷的在辱骂尼克松，而且因为心情郁闷，美军80%的人都吸食大麻，有大量的人因为摄入过量毒品而死亡。而且二战中神勇无比的美国军队，此时在越南战场也全都不见，那些前线指挥官，连连犯错，甚至连情报都经常搞错。他们以为的军事基地，结果竟然轰炸了医院。而南越方面，并没有对美军有丝毫感激，甚至还怀有敌意。西贡的暴乱分子，甚至焚烧尼克松的雕像，高喊打倒美国，指责美国人延长了战争。这就让美国人相当郁闷，实在想不明白，自己在这拼命到底是为了什么？</p><p>而阮文绍政府，对于美国愈来愈贪婪，美国已经很慷慨的提供各种物资了，但是他却总是说需要更多的钱。还威胁美国人，如果不给钱，后果自负。这就像极了乡下的穷亲戚，吃你的喝你的，还不念你好。</p><p>此时，一波未平一波又起，更糟糕的事发生了，美国空军秘密轰炸柬埔寨，后来柬埔寨政变，推到了西哈努克的政府，而发动政变的朗诺却是右翼分子，他就是要借着美国的势力，来清除异己。而当时的柬埔寨，就是北越的大后方，是军火库，这次行动，美军宣布，缴获1500万发子弹，7250吨事物，和2500只枪。这看起来是一场巨大的胜利。</p><p>但显然他们太乐观了，很快柬埔寨共产党的军队就在外援的支持下开始了反击，甚至控制了半壁江山，逼近了首都金边。还在湄公河流域建立了新的安全补给，这就麻烦了，美国相当于又扶持了一个比越南阮文绍还弱小的政府，同时也意味着给自己招来了一个更可怕的敌人。现在他要想撤出去就更困难了。此时美国国内的反应更加强烈了，甚至参议院给了政府最后通牒，7月份前必须退出柬埔寨，而学生们开始了大抗议，286所学校无法正常上课。10万多学生，涌向华盛顿。尼克松不得不出来安抚情绪。但他依旧很虚伪。</p><p>在一些反应比较激烈的学校，甚至上演了全武行，而警察甚至向学生开枪扫射，造成很多人死伤。而当时最容易聚集人群的，就是各种音乐节，这些音乐节，经常会打出越南的旗帜，而且还有嗑药的，裸体的，滥交的，这就是一个定时炸弹，很难控制局面。有的州长，甚至公开斥责这些学生，说他们是美国最糟糕的族群。</p><p>1970年的美国，依然是内忧外患，外面他继越南之后，又陷入了柬埔寨泥潭。而国内方面，引发了全国学生的激烈反应，经常爆发流血的冲突。</p><p>当时美国政府希望秘密的对柬埔寨进行军事活动，但是有一个纽约时报的作者却揭露了阴谋，说美国B52轰炸机，首次袭击了越共和北越在柬埔寨的补给基地，这让尼克松吃了一惊，他就怕这些媒体的报道，会引发全国暴乱，这下还有人把细节公布了，肯定会引发更大的麻烦，引发更多的不满，那么问题来了，这些机密到底是怎么泄露出去的，政府内部应该有内奸。</p><p>后来他一直认为，美国的学生暴动，应该是有外国敌对势力教唆，但是后来各个情报单位的报告，都说没有。但他依然不死心，他准备成立一个间谍组织，由联邦调查局和中情局抽调人手组成，并且实现秘密调查和邮件覆盖，也就是要偷看别人的往来信件，侵犯隐私。这在当时美国是违法的，甚至是重罪。中情局的胡佛坚决反对，这就让尼克松也一时比较难办。</p><p>而到了第二年，又一次机密泄露，他就决定彻底不忍了，决定绕开中情局胡佛，开始行动。这就促成日后的最大政治丑闻水门事件。</p><p>当时通货膨胀加上柬埔寨事件，让共和党的支持率急速下降，而全年的失业率也已经超过预期。此时尼克松则将锅甩给学生们，他攻击学生，同性恋，犯罪，还有暴徒。但是大家已经不再相信共和党了，民主党在众议院中的席位又上升了12个，共和党原来有32个州长，但现在他们丢掉了11个。民主党反而拿到了29个。而尼克松的表现也越来越不能让人满意，甚至有人说，现在尼克松在竞选中的表现，是1964年以来最差的一次。尼克松的威信已经降到最低点。尼克松的支持率降低到49%，很多人都说，尼克松很难连任了。</p><p>越南战场上，在美国逐渐撤军的背景下，南越军队开始了蓝山719行动，希望可以证明自己的自力更生，他们对北越基地发动猛攻，但是一开始得意洋洋，马上就遭遇惨烈打击，北越军队调动，坦克火炮，以及四个精锐师对其发动猛烈进攻，南越军队不堪一击。即便在美军的救援之下，依然伤亡过半，3800人死亡，5200人受伤，8个营丧失了战斗能力。而此时尼克松依然嘴硬，说我们在越南的策略取得了胜利，而各大媒体则嘲笑他，这是在侮辱国民的智商，很快华盛顿，又开始了反战游行。而警察则拘捕了12614人，数量创下了记录。这就引发了民愤，但尼克松，还觉得警察局长干的不错。</p><p>愤怒的群众，选择了在媒体上发泄不满，一篇名为越南问题档案的文章，在纽约时报刊登，披露了真实的越南战争情况。里面还有很多机密的总统命令，和电报文件。这可能是政府历史上最大最严重的泄密事件，而且报社还威胁，说未来还有更多的猛料。纽约时报其实得到的是，前国防部长麦克纳马拉所做的越南战争的研究报告。其实并不涉及尼克松，主要都是约翰逊时期的内容。但是尼克松明显心虚，他觉得这次没他事，下次可就不好说了。他让司法部长去威胁纽约时报，说再刊登就封号，但是美国就是美国，纽约时报根本不鸟他，而是把司法部长的威胁，直接发了个头版头条。政府也没什么好办法，只能选择去法院起诉纽约时报，而这时候，华盛顿邮报又开始接力，继续登载那些泄密文件，随后波士顿环球报，也加入其中。而在法院的判决中，最后报社还胜诉了，这让政府很没面子。</p><p>此时联邦调查局已经查明白了，泄密的人叫做埃尔斯伯格，他是哈佛大学毕业生，曾经在兰德公司就职，后来成为麦克纳马拉的门徒，负责撰写这些分析报告。一开始他是支持战争的，后来又转而反对战争。其实很多人都是如此。美军入侵柬埔寨，让他下定决心，把这些文件拿出来了。然后他还主动去自首，他不承认间谍行为，也不承认盗窃，他不认为自己是犯法。</p><p>而尼克松建立了一个间谍组织，叫做水管工，他们通过这个组织在秘密调查这个事，看看有没有幕后黑手。当时中情局给埃尔斯伯格的报告是，他是一种爱国行动，但是尼克松的水管工组织，对此很不满意。</p><p>在1971年，尼克松为了竞选，他必须找到足够的资金支持，于是他就进行了权钱交易，比如他的政府提高牛奶补贴，然后乳品行业就给共和党的账户内打入了52.7万美元。随后他们还找到了另一颗摇钱树，国际电话电报公司，当时他们深陷商业竞争的托拉斯的案子当中，而尼克松亲自打电话给反托拉斯局长，强烈要求他们把反垄断诉讼搁置。而得到的回报是，国际电话电报公司，同意支付40万美元。还有一个金融大鳄，他侵吞海外投资2.24亿美元，但是却能够华丽丽的逃往哥斯达黎加，而在1971年夏天，他就跟商务部长和司法部长关系密切，并拿出25万美元支持共和党。</p><p>尼克松要这些钱，目的是破坏对手的竞选，比如第三党也就是独立党的华莱士对他的威胁比民主党还大，于是他就拿出钱来，说服那些独立党的党员修改党籍，如果有足够多的人改变立场，那么华莱士就将失去竞选资格。但此时，美国人民已经不再相信尼克松，仅仅27%的选民希望尼克松连任。</p><p>1971年中美关系破冰，美国国务院取消了对公民前往中国旅游的所有限制，而中国方面也邀请美国乒乓球运动员访华。两件事连在一起看，已经诠释了一个特殊的意义。中国其实是用乒乓球这项运动，实施外交策略。中方对美国乒乓球队的接待，规格非常高。甚至周恩来总理亲自接见。随后马上，尼克松宣布取消美国对中国长达20年的贸易禁运。而北京也重启对华盛顿和伦敦的电话联系。</p><p>7月基辛格在巴基斯坦访问，突然间称病不出，大家以为他得了痢疾，但其实基辛格已经秘密飞往北京，并未对外公布，在北京他和周恩来总理秘密会谈，探讨尼克松访华的事宜。2天后，又悄悄飞回巴基斯坦。</p><p>接着，尼克松在美国宣称，自己已经接受北京的邀请，将访问中国。这个消息震惊了世界。而此时联合国也做出了重大决定，接纳中国加入，而驱逐了老蒋的台湾代表团。但是，可以预见的是，在美国国内，出现了巨大的反对浪潮。但基本都是那些资深的保守派政客。美国人民基本没什么动静。</p><p>尼克松下一步要拯救经济了，此时美国已经陷入了严重的货币危机，通货膨胀和金本位，让美元体系已经接近崩溃。二战结束的时候，美国握有400亿黄金中的350亿。所以最早美元，叫做美金，美金就代表黄金。市面上永远1盎司黄金对35美元。但是后来，随着朝鲜战争和越南战争，再加上德国日本崛起，美国出现贸易赤字，这就让黄金储备持续下降，到1961年，黄金储备已经降低到了170亿美元，随后每年降10亿，70年代初，只有110亿美元，黄金储备已经亮起红灯。</p><p>当时德国已经再度崛起，德国马克要跟美元实现货币平衡，就得不断的买入美元，卖出马克，但是德国人后来发现自己上当了，怎么美元越来越多呢，后来他们就告诉国际货币基金组织，说他们不会再买美元了。他们建议让马克自由浮动。后来投机份子又把目标定向了法国和瑞士，这两个国家也马上宣布切断美元，于是美元一下就没人要了。这时候布雷顿森林体系就开始崩溃，美国道琼斯工业指数大降了100点。而国内的失业率，已经逼近大萧条时期的6%。</p><p>而尼克松现在必须要应对这种危机局面了，他称之为新经济政策，其中包括美元不再兑换黄金，进口商品缴纳10%的附加税，以便保证美国商品更具市场优势，平衡逆差。购买美国商品的美国人还可以减税。还撤销了汽车税，以及冻结物价水平90天。尼克松让美元浮动，其实就是让美元贬值。让1盎司黄金兑换38美元。这一系列举措反而让道琼斯指数飙升。但这些举措，让美国人的生活成本也相应增加了，所以注定，这些情况维持不了多久，很快一些行业就都受不了了，纷纷要求提价，并且上调工人工资，到了12月，股市再次暴跌。<br>1971年底，尼克松采取了新经济政策，让美元贬值。股市迎来了大动荡，11月到达了顶点1000点，然后又再度暴跌。</p><p>1972年2月21日，这一天对于美国可能稀松平常，但对于中国却至关重要，尼克松的专机降落在北京，但是一下飞机他就傻眼了，现场没有人山人海的欢迎场景，只有周恩来总理和几名助理，这确实有点尴尬，美国总统出访任何国家，一般都是最高规格的欢迎场面。而中国人也都知道，我们欢迎西哈努克和穆巴拉克这种小国的领导人，也都是人山人海，所以推测，肯定是有意为之。双方虽然见面，但是就中国来说，心里还是怀有敌意。</p><p>接到尼克松后，他们进入城区，秘密的会见毛主席，现场只有毛周，尼克松以及基辛格四个人。足足谈了一个小时，据说气氛很融洽，但是具体谈了什么，却没人知道。在这次会面之后，人民日报发布了领导们的笑脸，然后立马态度就不一样了，接下来尼克松所到之处，都是掌声雷动，热闹非凡。双方达成了一个大概的意向，中美需要更多的友好，而美国则从台湾撤军。</p><p>随后尼克松在周恩来的陪同下，又去了杭州和上海，然后愉快地飞回美国，而此次出访，得到了美国人民的好评，接着他顺水推舟，说中国有辉煌的历史，必然有辉煌的未来，他还在美国的讲话中，多次引用毛主席诗词，还说中美之间，不应该在有一堵墙进行阻隔。总之就是，不断的释放友好的信息。</p><p>但是中美走的近了，苏联就慌了，其实自打斯大林去世之后，中苏之间就不再友好，苏联做的也够绝的，撤走专家，逼我们还债，造成了我们三年自然灾害，饿死了无数人。现在莫斯科和北京的关系已经非常紧张。莫斯科直接发表评论，说中国正在陷入，美国统治集团的危险圈套。而越南的北越方面，则更是抗拒，说这次会谈堪称是卑鄙和龌龊。</p><p>在越南战场上，北越在武元甲的指挥下，展开了大规模的闪电袭击，在坦克部队的袭击下，南越军队不堪一击，节节败退，以前美军誓死捍卫的地盘，一个接一个沦陷。阮文绍政府的核心部队，南越第五步兵师，整体被俘。</p><p>而尼克松则做出回应，B52轰炸机北上，三年来首次猛攻河内。这又引发了国内的反对，之前，尼克松一直说越战越南化获得了成功，但是这次行动，已经说明他之前都在说谎。而尼克松的强硬回应，也存在一个潜在风险，那就是通过越南，得罪中国和苏联，让刚刚有所缓和的美中关系，再度紧张。</p><p>双方这场大战，北越也没占到便宜，损失10万士兵，换来的价值不大，另外，国际上还发生了一件大事，这就逼着越共，这次主动准备谈判了。而这件大事就是，尼克松访问了苏联，尼克松在克林姆林宫会见了当时的苏联领导，勃列日涅夫。这次访问，跟北京之行还不同，他不只停留在象征上，两国领导人，达成了很多的共识，甚至同意在航空航天领域，展开合作，载人飞船要在外太空实现对接。还承认有必要，减少在欧洲的驻军，双方承诺将限制导弹部署，保持现有的攻击性导弹规模，5年不再增加。</p><p>当然，这次会谈，也有没谈成的，比如，尼克松还让苏联去劝劝越南，让河内尽快停火。但是这个请求遭到拒绝。而苏联希望跟美国实现贸易，美国也表示，你先把二战期间，欠我的100亿美元债务还了再说。</p><p>这对于尼克松来说，极为重要，他的做法有助于美国结束冷战，而全国人民对这个也是希望迫切，尼克松挺有意思的，从历史来看，他确实是冷战结束的关键人物，但他最早又是坚决拥护冷战的人物。这个人为达目的可以不择手段，甚至啪啪打脸也在所不惜。</p><p>但是他的急功近利，不择手段，却又让他陷入了万丈深渊，1972年1月，尼克松在民意支持中的表现还可以，他跟民主党竞选人得票率差不多，而尼克松想的不是提升自己，而是打压对手，不断给对手制造麻烦，破坏其他人的竞选。另外，他们还积极的使用权钱交易，白宫为大企业提供便利，然后收取捐款。接着他们把这些钱聚集起来，制定非法行动计划，比如窃听民主党电话，恐吓反对派，绑架反战首领，向民主党要员提供色情服务，从而套取情报，然后再玩仙人跳，拍下他们下流的证据，从而威胁。你很难想象，这是一个现任美国总统要干的事。</p><p>后来他们一致认为，窃听民主党总部，这个可以先干起来，而且预算比较少。共和党竞选首席安全顾问麦科德将成为行动小组负责人，他们在民主党总部的水门大厦对面，租了房间。时刻监视对面行动，还找来了窃听设备。另外一组人马假扮富商，入住水门酒店。</p><p>他们在周密的计划下，行动小组互相掩护，从车库上楼，确实潜入了民主党总部房间，也装上了几个窃听器，但是结果并不如意，没有拿到太有价值的情报，于是他们就还得接着干。这时候有一个黑人警卫没事闲逛，他发现所有的门锁都用胶带缠上了，一开始他认为是维修人员留下的，就给拆掉了，也没太在意。但转一圈回来，发现被自己拆掉的门锁，又都给缠上了胶带，这时候他就意识到肯能有问题了，于是打电话报了警。本来对面的情报点观察到了警察，通过对讲机呼叫行动小组，但是没想到行动小组的特工们竟然为了省电，把对讲机关了，那就没招了，警察抓到他们的时候，这些人正在拆装电话。麦科德被抓了个正着。紧接着，各大报纸纷纷做出头版报道，5人被控夜盗民主党总部。</p><p>共和党马上找到司法部长，尽快保出麦科德。然后让其他的相关人士，尽快跑路。紧接着竞选方，对外宣布，麦科德跟我们没关系。假装不知道，打死也不承认。</p><p>其实这时候，尼克松已经获得优势，他已经得到了60%的选票，因为美国人已经看到，和苏联与中国关系缓和，美国退出越战也已经非常接近。而此时的民主党，并没什么出色的人物，也很难获得更多的支持。所以，尼克松毫无意外的，再度当选美国总统。继续留在了白宫。</p><p>随后，白宫一直在试图掩盖水门事件，为这些东西披上国家安全的外衣。尼克松还信誓旦旦，说跟他完全没关，也没有白宫现任人员参与这次荒唐的事件。而且还故意说，这种事情不是最伤人的，最伤人的是试图隐瞒真相。这就有点意思了，属于是睁着眼睛胡咧咧，贼喊捉贼。</p><p>他们马上召开紧急会议，决定到底该怎么做切割，最后选中了一个人，叫做戈登利迪，他是竞选委员会的财务顾问，掌握财权。他们决定让利迪承担下所有的责任，然后统一作伪证，把所有的责任都推到他身上。</p><p>事情也在按照尼克松的剧本发展，在9月15日，陪审团只控告了现场抓住的，包括利迪在内的5个人，这让尼克松心里的石头终于落地了，这时候他又会见了白宫顾问，也是水门事件行动负责人之一，但是没被逮捕的迪恩，他表示了，最好审判在大选之后，因为他害怕会有不必要的麻烦。</p><p>后来发生了一起空难，又一个重要人物的曝光，一个节俭的官员妻子遇难，这个女人身上有1万美元现金，跟水门事件被抓的5个人一模一样，所以很多人开始怀疑，幕后还有黑手，这个钱就是封口费。而此时司法部长米切尔又马上行动起来，筹集资金，通知监狱里的人，一定要保持沉默。</p><p>但是，美国人的嘴却并不太严，麦科德已经开始决定反水了。他后来给法官写了封信，说这里面存在伪证。他的这封信，将牵扯出了迪恩，而迪恩也不想自己被判40年监禁，所以最后尼克松不得不辞职下台。</p><p>在1972年底，越南已经在和谈了，但是依旧不顺利，南越北越根本就尿不到一个壶里去，在战俘问题上，又反反复复，没完没了。这就让基辛格非常生气，对这两方面他都已经很厌烦。为了给河内方面教训，美国准备给他们最重一击，空军扬言要把他们炸回到石器时代，而北越也确实够硬，就是不鸟你，于是美国就真的开炸了，100架B52轰炸机，每架飞机携带40吨炸弹，对河内城市发动了1400多次袭击。这让美国民众又惊了，他们以为停战又没戏了。</p><p>美国国防部则将轰炸目标，确定为所有民用的地方，无数平民被炸身亡，甚至连战俘营都被炸到了。全世界都在批评美国，说这是一个纳粹般的行为。纷纷给与谴责，而越南的老大哥，苏联和中国，却反而在尼克松访问之后，对美国很是友好，对这次惨绝人寰的大轰炸，莫斯科和北京都没什么反应。可见，这两个红色阵营的老大，此时也不太乐意管北越的破事了。</p><p>轰炸一直持续10多天，12月30日，基辛格又飞过去了继续谈。人有的时候就是很贱，在挨了一顿胖揍之后，北越也终于服软，这次仅仅用了4小时，双方就达成一致。正式停战。基辛格还是很有格局的，他并没有宣布胜利，而只是说，双方都要开始治疗战争创伤了。</p><p>这就是全套的光荣与梦想了，尼克松被迫辞职后，留下了一个比较混乱的烂摊子，而他当时的副总统，福特临危受命，成为新一任总统，但他只干了不到2年，成为32年以来第一个连任失败的总统。让位给了卡特，而卡特也就干了一任，也没有连任成功，这几年美国几乎陷入到了万劫不复的通胀境地，经济一落千丈，幸好卡特之后，有里根，开启了供给侧改革，才将美国从崩溃的边缘拉了回来。看完美国这40年的发展史，你有何感悟呢，，美国发展成今天这样，也是有曲折过程的，我们不要妄自菲薄，相比于我们走的弯路，美国的弯路也不少。有过之而无不及，所以看完这本书，我对美国文化有了更深的了解，也对他的经济，有了更深的体会，同时，对于中国的未来也更有信心。现在我们就是在一条正确的捷径上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;光荣与梦想的第四部，也就是1960年到1972年。第三部末尾我们说到了，约翰肯尼迪赢得了美国1960年的大选，民主党重新上台，美国也进入了肯尼迪时代。肯尼迪给大家的先期印象就是忠于职守，雷厉风行。他对当总统这个事，很有干劲，事必躬亲，对很多事情抓的很急，总统这种工作态度，让</summary>
      
    
    
    
    <category term="history" scheme="https://github.com/categories/history/"/>
    
    
  </entry>
  
  <entry>
    <title>激荡十年</title>
    <link href="https://github.com/2021/09/27/%E6%BF%80%E8%8D%A1%E5%8D%81%E5%B9%B4/"/>
    <id>https://github.com/2021/09/27/%E6%BF%80%E8%8D%A1%E5%8D%81%E5%B9%B4/</id>
    <published>2021-09-27T14:18:43.000Z</published>
    <updated>2021-09-27T14:19:50.085Z</updated>
    
    <content type="html"><![CDATA[<p>多灾多难的2008！这年1月份，全国议论最多的就是高涨的房价突然停止，中央电视台记者柴静，采访了三位企业明星，王石，潘石屹，任志强，向他们提出同样的问题，房价的拐点来了吗？</p><p>其实早在2007年，房价的快速上涨就已经惹得民怨沸腾，国家开始了严厉的调控，2007年下半年已经是有价无市。楼市陷入僵局，王石率先提出了拐点论。吓唬买房人，他说房价已经没有上涨的理性空间，此时这位，中国最大开发商的掌门人对于房价一直抱有非常悲观的看法。但是任志强完全不同意王石的判断，他说长远看，房价是上涨的，什么时候反弹取决于政策什么时候改变。最鬼头的还是潘石屹，他不表现出王石的悲观，也不像任志强看多。</p><p> 整个2007年，大家都在憧憬即将到来的北京奥运会，让这一年一直在谈论一个话题那就是大国崛起，整个中华民族产生了神一样的自信。但正当我们盘算着如何从股市里稳定的增加资产性收入的时候，先是汇丰银行，宣布减记108亿美元相关资产，接着美国第二大次贷公司新世纪金融破产，然后美国第五大投行贝尔斯登，宣布两只对冲基金倒闭。随后花旗，美林，摩根大通，瑞银相继爆出巨亏，转过年来也就是2008年3月中旬，贝尔斯登被摩根大通收购，但直到此时，大家都扮演者吃瓜群众的角色，为美国人家里着火而拍手叫好。但其实，我们的股市也已经从6000点跌到了4000点，而且通货膨胀也已经开始明显抬头。</p><p> 2008年4月，在王石的悲观情绪影响下，万科杭州率先降价促销，这次是真降价，而证据就是引发了愤怒的购房者打砸售楼处。万科的举动，甚至引发了当地政府的不满，上海和南京等地，甚至派出调查组去调查万科的税务状况。这种负面消息，让万科的股价暴跌。一年之间，万科股价暴跌了9成。可谓惨不忍睹。很多人都说开发商和政府是一伙的，但就这次万科事件来说，地方政府对房价的呵护，比开发商更强烈。</p><p> 在这一年，我们开始对大规模引入外资进行修正，在2001年以后，我们基本上启动了大规模引进外资的计划，给外资企业以超国民待遇，这导致了外资企业，在我们国家的22个重点领域里，占据了70%的绝对控制地位。一些卖场业态和医药领域，外资企业甚至不受价格限制。而最要命的是内资企业税率是33%，而外资企业税是15%，这让民企是怨声载道。完全没办法跟外资竞争。这一年开始我们将内外资企业税率统一调整为了25%。从而打破了内外不平等做法。</p><p>  我们为了保护劳动者权益，还全面实行了劳动合同法，要求企业必须签订劳动合同，据说之前签合同的农民工只有7.3%，此后迅速提升到了21.9%。劳动合同法的实施，对于个体劳动者来说，无疑是个巨大的好消息，但是在宏观上，却给中国带来了巨大的麻烦，中国经济的核心优势劳动力成本优势从此开始逐渐丧失。越南，印尼等一些工厂开始争抢本应属于中国的订单资源。在这一年东莞的外贸订单大幅下滑了20%，制造业的危机已经开始显现。</p><p>当然，外贸下滑是内外共同作用的结果，次贷危机的影响，也许是更加重要的原因。这让我们的纺织业出口急剧萎缩，2008年初，出口总额下滑44%，著名缝纫机制造商，中国曾经的明星企业。飞跃集团破产。</p><p>这不是孤立的，随后全国百强县排名第八的绍兴四大工厂相继停产，欠银行上百亿。引发了当地产业和金融业的地震。接着倒闭潮传染到了江苏，在新加坡上市的中国金属突然停牌。其下属主力工厂，位于江苏常熟工业园区的科弘材料倒闭。中国最大的化纤原料基地，苏州市盛泽镇三分之一的织造厂停产。苏州家纺产业产能缩减3成，利润下降了一半。当年江苏无锡国棉厂的厂长对总理说，这是改革开放以来中国纺织行业最困难的一年。</p><p>传统工业哀声一片，那么新经济如何呢？阿里巴巴的马云当时也给出了严重的警告，经济将会出现较大问题，未来几年将会非常困难，形势不容乐观，准备过冬吧。</p><p>这一年注定是不平凡的，经济动荡也就算了，还出现了天崩地裂，先是1月份，大半个中国遭遇了百年一遇的特大暴雪。800万人受灾，5万人火速转移。暴雪过后全国交通彻底紊乱，南方电网发生崩溃，停电省份超过17个，数以十万计的工厂停工关闭。最倒霉的是还赶上了春运，光广州火车站，就有50万人滞留。</p><p>好不容易挨过了暴雪，5月12日更惨烈的一幕发生了，四川汶川爆发了8级大地震，受灾地区达到10万平方公里，7万人遇难，近4万人受伤。1万8千人失踪，经济损失8000多亿。这次地震是新中国成立以来，破坏力最强，波及最广，灾害最严重的地震，它恰恰发生在了北京奥运会前的3个月，不得不说确实相当的不幸。</p><p>但这些灾难，这些不幸，并没有让北京奥运会出现任何的折扣，我们还是举办了一届无与伦比的奥运会，为此北京光投资就达到了2800亿元，如果要不是奥运会，北京的可能都忘记了修地铁。</p><p>但就在奥运会结束的21天后，坏消息再次传来，美国雷曼兄弟倒闭，金融危机进入高潮。美国五大投行，第四第五相继倒闭，华尔街的根基已经动摇。此时美国政府仍然后知后觉，没有选择出手拯救。而咱们似乎已经提前感受到了事态的严重。央行率先下调存贷款基准利率，从7.47%下调到7.2%，调整后利率仍然是较高水平，但这也释放了强烈信号，宏观紧缩调控，开始转向为经济刺激。随后3个月，央行连续五次降息，快速放水，发改委做的更绝，天天催促各个地方上报财政项目，那会基本上有项目就批，用强刺激强拉经济。10月底，财政部也参战，下调首套房契税，央行配合，将房贷调降到基准利率的0.7倍，最低首付调整为20%，这一下打了王石一个响亮的耳光。 </p><p>  随后国家强推家电下乡，去农村榨取购买力，冰箱洗衣机全都给予补贴。中央政府几乎拧开了一切可以放水的阀门。这是原工信部长李毅中回忆中的一句话，他还说原计划第二年才发的3G牌照，也被领导打电话来催促，赶紧发。必须发。然后还问他汽车产业有什么好办法拉动，最后李毅中想了想，说只能是减免购置税。但财政部长谢旭人反对，说财政兜里真没钱了。不过反对无效，上面的意思仍然是只要能刺激的，一个不拉，全都给我开足马力。</p><p>2.从股市暴跌到经济保8</p><p>  政府疯了一样救市，已经胡子眉毛一把抓了，不分好坏，能上就上。但2008年末的经济状况仍然每况愈下，11月进出口突然跳水，出口从19%直接掉到了负的2%，进口更要命从15.7%，直接掉到了负的17.9%。中国是来料加工经济，进出口就是这个池子的上下水，上下水一堵住，工业马上完蛋，工业企业利润同比回落12%，钢铁，汽车，发电量全都大幅下降。而股市也完蛋了，开年的时候有5000多点，大家在喊千金难买牛回头，雪灾发生的时候4500多点，大家觉得困难只是暂时的，汶川地震的时候还有3600点，还有人相信破窗理论，地震有利于拉动经济的鬼话。奥运会开幕的时候，上证指数已经跌倒了3000点以下，大家觉得不对劲了，但碍于奥运会欢乐祥和的气氛，也是敢怒不敢言。等到10月份，上证指数跌倒了1664点，所有投资者损失超过70%，人均亏损13万元。</p><p>  11月底中金公司发布报告，提出一个当年热词，叫做经济保8，也就是要不惜一切代价保证经济8%的增长。之所以这么干是因为有学者认为如果经济那一年就跌到6%很可能会引发大规模失业，当时的银监会主席刘明康还捧臭脚，说8%就是中国经济的生命线。从年初的防过热到年底的保8，中国经济这一年经历了一场180度大转折。</p><p>这一年胡润还是发布着他的首富榜，只不过这次有点滑稽，第一名黄光裕，但就在1个月后，黄光裕却被警方拘捕，理由是股票内线交易和行贿。随后如日中天的国美集团群龙无首。不知道是不是巧合，就在这一年刘强东在首轮投资人今日资本的牵线下，获得了第二笔融资。如果没有这笔钱，2008年京东就已经全军覆没了。 </p><p>排在榜单第二位的杜双华，是日照钢铁的老板，2008年夏天过后，他的企业经营出现了巨大的困难，每个月都有大几亿的亏损，就在此时山东开始整合钢铁工业，日照被看中，为了逼良为娼，山东停止了对日照钢铁的一切贷款。那意思你乖乖把企业交出来，否则只有死路一条。杜双华熟悉2004年铁本钢铁的大败局，他选择了缴枪投降，这个富豪榜第二名从此淡出了大家的视野。</p><p>排在第四的和第八的分别是彭晓峰和施正荣，都是搞太阳能的，彭小峰的江西赛维2007年上市，而施正荣的无锡尚德更是在2005年夺得过首富的称号，但2008年开始，由于欧美订单突然消失，多晶硅价格暴跌。随后江西赛维和无锡尚德双双破产，一场太阳能泡沫在中国彻底破灭。还有中信泰富的荣智健，这可是一位历经风雨的老富豪了，但也在这一年，中信泰富因为汇率黑天鹅事件，而遭遇巨亏。好在大股东中信出手护航，第二年荣智健宣布辞职，中信泰富回归央企。此外，一位隐形富豪，在这一年跳楼自杀，这就魏东，据说他的资产达到200亿元，可以排到富豪榜前十，他掌管着涌金系资本，是股市上一股巨大的力量。</p><p>这一年还有一个化学名词，走进了千家万户，叫做三聚氰胺。不说大家也知道，中国的牛奶产业遭遇到了前所未有的信任危机，进而影响到了整个食品安全信任危机。</p><p>到了2009年，最流行的一首歌就是汪峰的春天里，而最倒霉的一个人却是浙江女企业家，她叫吴英，2006年还登上了胡润女富豪榜，评估身价38亿资产，但风云突变，2006年底，这个女富豪被抓，罪名是涉嫌非法吸收公众存款。2年后，也就是2009年吴英案才一审开庭，金华市中级人民法院以集资诈骗罪，判处吴英死刑。一时间舆论哗然。有的企业家自发请命，为吴英辩解，因为在东南沿海发达地区，民间借贷规模超过1万亿，如果一个庄头运作1亿资金来计算，那么起码身边就还有1万多个吴英，所以这个太可怕了，做资金拆借的，几乎人人该杀。</p><p>如果这些人不干了，那么民间借贷将彻底坍塌，而中小企业是不可能从银行贷款的，那么继续推理，东南沿海一代的中小企业可能会成片的倒闭。甚至有法学泰斗大律师张思之先生也在为吴英辩护，说他的资金流入了实体经营，所以没有诈骗行为，金融市场就该开放自由。所以其实吴英在这个时候已经是一个符号化的人物，如果吴英真的死刑了，那么也就意味着民间金融彻底坍塌。别说民间金融了，就是国家金融，当年也是混乱不堪饱受争议，2008年11月9日，中央政府为了强拉经济启动了著名的4万亿救市政策，而当时很多经济学家就提出了反对声音，比如吴敬琏就说，发票子到物价涨要有几个月的时间，你现在发票子很开心，等到物价涨的时候该怎么办？后来的事情不幸被他言中，在四万亿之后，我们还启动了十大产业振兴计划，而股市也开始大幅反弹。经济学人杂志甚至用到了，令人震惊的反弹一词，作为封面报道</p><p>2009年在强刺激下，最牛的产业应该是汽车，这一年产销量达到1364万辆，一举超过了美国。在过去100年工业史上，这是从未发生的事情，美国就是建立在汽车工业上的国家，被中国超越，又能说明什么问题呢？而这一年美国的汽车文明正在经历着惨痛的挫败，底特律裁员14万人，底特律的房子1元往外甩卖。</p><p>3.不惜一切代价！印钱放贷拉经济</p><p>  2009年，美国汽车产业陷入了崩溃的边缘，这时候奥巴马想到了一个人，他特意去了硅谷参观了他的公司，这个人就是埃隆马斯克，这个公司就是特斯拉。奥巴马参观之后，当即决定批准能源部给特斯拉4.65亿美元的政府低息贷款，一下解了特斯拉的燃眉之急，如果没有奥巴马这笔钱，估计马斯克的下场可能跟现在的贾跃亭差不多。</p><p>而在中国也有一个疯狂的汽车人，2009年7月，他在北京的饭局上透露一个重磅的消息，说我要收购沃尔沃了，想必大家都猜到了，这就是吉利汽车的李书福，当时几乎没人相信他能够有这个实力去蛇吞大象，而李书福的经典语录就是，汽车不过就是一个四个轮子加两张沙发的产业。他提出收购沃尔沃的时候，吉利的销售额不到百亿，市值也只有2亿美元，而沃尔沃的轿车业务，在1999年卖给美国福特汽车的时候，就有64.5亿美元的市值。所以差了30倍，悬殊实在有点大。而2008年，沃尔沃运营亏损就达到14.6亿美元，换句话说，2个月就亏出一个全部吉利的市值。所以当年来看，这是一个根本不可能达成的交易。</p><p>李书福为了打动沃尔沃的拥有者，福特汽车的总裁穆拉利也是出了奇招，就像一个追星族一样去跟这个老外套近乎，说我很崇拜你，10年前就知道你在波音飞机当总裁从而扭亏为赢的事情，所以你一直是我的偶像，为此我还把公司名字也打上了你的烙印，吉利汽车全称叫做，四川吉利波音汽车制造有限公司，这个老外顿时就被侃晕了。真是没有一点防备的就咧开大嘴笑了。搞定福特之后，李书福又去示好沃尔沃，他说我虽然收购你，但绝不会像福特那样，父子相称，我们会变成兄弟。而且承诺沃尔沃一切都不会改变。李书福的谈判肯定是取得很大的效果，另外，也得拜时局所赐，当时全球金融环境恶化，福特的报价也是一降再降，从40亿美元，降到了20亿美元，甩卖的心态已经暴露无遗。最后吉利成功以18亿美元拿下沃尔沃全部股权，但是18亿美元李书福当时也没筹到，最后还是福特借给他2亿，让他赶紧把闹心的沃尔沃买走。</p><p>当然美国人也不傻，沃尔沃确实已经变成了烫手的山芋，虽然有24亿美元账面资产，但却有35亿美元负债，李书福吃下了一个无底洞，但他似乎却并不担心，说别人干不好，我们拿过来把它干好。但当时仍然有太多人，等着看他的笑话。</p><p>当时还有一个富豪差点就完蛋了，这就是如今刚刚当上首富，能跟二马一较高下的许家印，他是河南人，苦出身，开过拖拉机，掏过大粪，当过治安员，恢复高考后，他上演了励志传奇，靠着一筐地瓜面饼和一瓶子盐当口粮，苦读5个月，奇迹般的考进了武汉钢铁学院。1992年，在当了10年钢铁工人后，许家印南下创业，95年先人一步进入了房地产行业，那一年还没什么人觉得房地产能火。后来越做越大，成了南方的地产大佬。2008年1月9日，恒大41亿元，在广州高价拿到了地王。然后就赶上了经济突然衰退，房价开始下降，当时精装修的房子和恒大的楼面价都一样了，这时候再盖房子是不可能赚钱的。但当时已经有规定，你拿地不开发，就要退地，1.3亿的定金也同时罚没。许家印当时想的是，宁可把土地退了，也不能继续盖了，否则投入越多，赔的越多。但当地政府死活不同意。其实不难想象，当地正是要业绩的时候，你恒大这就属于拆台了。所以你含着泪也得给我把房子盖下去。</p><p>此时恒大本来要去香港联交所上市的，但是后来功亏一篑，国内的经济形势和恒大面临的局面太复杂，国际资本一看风向不对赶紧闪人了。于是，恒大只能靠自己了，许家印当时疯了一样的去融资，但却到处吃闭门羹。同时在广州市场推盘，85折贱卖，试图快速回笼资金止血。但更大的麻烦又来了，恒大资金链即将破裂的消息弥漫了整个市场，恒大负债率已经达到了97%，所以很多人断言，许家印熬不过2008年的冬天。</p><p>就在生死一线之际，许家印已经任命了，估计如果按照正常发展，那一年应该会逼死不少炒楼的人，也会让很多开发商彻底破产。之后中国的楼市应该会走上一个比较健康的轨道。但是，人算不如天算，偏偏这时候四万亿出来了，中央政府印钞机启动，半年时间，原来打折都卖不掉的房子，现在加价疯抢。通货膨胀的恐惧让大家急于把手里的钱投资出去。2009年，全球经济仍然陷入深度危机之中，但中国的房地产市场却率先走出低谷。</p><p>之前到处吃闭门羹的许家印现在成了各大银行的座上宾，银行求着他让他贷款，当时银行有指标，必须把钱扔出去，而中小企业这个事太不靠谱了，思来想去还是去搞房地产靠谱，好在有地有房子，所以银行大量跟房地产结盟，再拉上地方政府，在三方的共谋下土地价格飙涨，房价猛拉升。那一年北京地王一个接着一个，全国土地出让金达到了1.5万亿，这时候只有老百姓才觉得，被国家坑惨了。对政府的不信任那时候就已经种下了种子。</p><p>2009年11月，恒大地产再次申请上市，随后股价遭遇热炒。一年前差点倒闭破产的许家印，突然跃升到了福布斯富豪榜首的位置。</p><p>在科技界，这一年同样发生了一件大事，那就是谷歌宣布退出中国市场，让百度彻底松了一口气，自此百度一家独大，搜索市场上再也没人能够挑战他的地位。随后几年，百度很快就跃升到了科技公司头把交椅的位置，但可能也是因为谷歌从中国退出，让百度一下失去了进步的方向，从此止步不前。后来百度几乎干什么都没干成。从市值领先，到BAT三强争霸，到现在二马争锋百度落伍，百度在舒适区里呆的太久，从长远发展来看，绝不是什么好事。</p><p>在2009年，腾讯公司越来越多的被别人注意，这种QQ为业务之源，驱动其他业务的模式甚至让很多美国人都不远万里跑来学习。在这一年腾讯在游戏市场上斗败了盛大，成为了当之无愧的游戏之王。</p><p>相比之下做B2B贸易电商的阿里巴巴就要艰难许多，一开始马云要做的是对接企业和企业做贸易的平台，但到了2008年，实在是生意太难做了，于是马云无心插柳，推了一个电商平台，叫做淘宝，后来的一年多时间里，他都在做B2C的商业模式，但发展相当缓慢，他们一直在想办法，怎么搞个爆发力的东西，也不知道是谁的提议，说搞个光棍节大促吧，就定在11月11日这一天，于是淘宝负责人张勇亲自去找入住商家沟通，希望能给一个比较狠的折扣，咱们来试试，结果没想到的是，这一天太火爆了，竟然淘宝商城交易额突破了5200万元，是平常交易量的10倍。就这样光棍节和双十一意外走红，张勇后来也感慨，所谓成功的战略，其实只不过是一些偶然而已。</p><p>  这一年新浪也没闲着，他本来有了很成熟的博客模式，此时又看上了Facebook和推特，一直没想好，到底朝哪个方向发展？最后曹国伟赌了推特这边，他要延续新浪的媒体基因，用明星大V牛人，带动草根。8月新浪微博产品上线，那会新浪全员都在拉微博，每个人都分配了拉微博的任务。姚晨就是最早被拉去微博的明星，当时他只是一个二线演员，没想到在微博上，很快粉丝过了百万，次年过了千万，借助微博的影响力，姚晨瞬间成为第一代网红。</p><p>  这一年5月，刚刚凭借预测了经济危机而获得诺贝尔经济学奖的保罗克鲁格曼，飞抵上海。这位老先生说话从来都是尖酸刻薄，正当我们憧憬着经济V型反转，持续繁荣的时候，他却给所有的中国人泼了一盆冷水，在他看来，中国经济的恢复是虚弱的，官方数据不值得信赖，中国想通过出口恢复经济是痴人说梦，未来三年是中国经济转型的关键期，不转型要出大问题，而且他还说中国是个汇率操纵国，贸易盈余给其他国家带来了不利影响。他断言中国20年内无法成为最大经济体，人民币也不会国际化。这些话说的，没有一句是我们爱听的，所以最后让媒体很气愤，网易送了他一个专题，叫做克鲁格曼，中国公敌。</p><p>4.大水漫灌的后世界经济趋势悄然改变</p><p>这一年，最亮眼的一个经济指标就是央行的金融数据，广义货币M2达到60万亿，比上年末增加了27.7%，货币超发已经成了大水漫灌。稍微有点经济学常识的人都应知道，这一年所谓的复苏，只是拿钱砸出来假象而已。</p><p>2010年的开年就是一系列悲剧，而悲剧的核心就是一家叫做富士康的企业，短短几个月时间，先后十几位工人跳楼自杀，一时间血汗工厂富士康，成为媒体讨伐的对象。这时候有人开始反思，中国有1.3亿这样的农民工，他们背井离乡，领着微薄的收入，每天超时工作，才撑起了所谓的中国制造。赚取着低廉的利润。</p><p>  就在我们都以为，美国这次被华尔街坑惨了，该完蛋的时候，病入膏肓的乔布斯，在美国发布了iPad平板电脑，这个被全世界取笑，说他只不过是一个大号的iPhone的玩意，注定将改变世界，推动整个互联网产业，进入移动互联网时代。在这一年5月，苹果公司市值飙升到2220亿美元，超过埃克森美孚，成为全球第二大上市公司，美国经济的龙头，正在悄然改变，美国经济的重心也悄悄的从纽约向硅谷转移。但当时这些变化，很少有人能够看得到。</p><p>  这一年也发生了3Q大战。最后由于影响太坏，还是工信部出面抹稀泥，才息事宁人，双方各退一步，这才算完事。周鸿祎借此一战成名，他借势迅速启动上市计划。在美国融资1.75亿美元，一举成为当时中国的第三大互联网公司。陈年和他的凡客诚品，成为了当年炙手可热的电商第一平台。</p><p>2010年之于欧洲，就相当于2008年之于美国是一样的，世界最文明的古国希腊，这一年遭遇了极大的困难，青年人一半失业在家，三大评级机构，集体下调了他的主权信用评级，将希腊归入了垃圾堆，此时的希腊已经资不抵债，根本不可能偿还外债了，希腊即将破产。</p><p>  此时，德国人发挥了欧洲老大的作用，赶紧批准了一个224亿欧元的援助计划，一周之后欧盟又批了一个7500亿欧元的援助希腊计划，但不成想，希腊的烂不是孤立的，欧猪五国，也就是葡萄牙，爱尔兰，希腊，意大利，西班牙都一个德行，全都已经走到了债务危机的边缘，一场欧债危机已经阴云密布。</p><p>5.民营企业家心态转折之年</p><p>欧债危机爆发，但同时中国经济在大水漫灌的作用下，却是表面上风景独好，GDP竟然超过了日本，中国第一次成为了世界老二。这也一度引发了日本媒体的恐慌，但其实日本人完全没必要，因为人均GDP中国仍然只是日本的十分之一，这一年上海世博会开幕，又一次大国崛起的自豪感油然而生。不过这时候80岁的老经济学家，吴敬琏又出来泼冷水，说四万亿振兴方案，实际上打压了民营企业的发展，不仅没有拉动民间投资，还造成了挤出效应，产生了国进民退。其实2009年的四万亿，有多少被分配到了国企部门一直是个迷，有人说是95%，有人猜是8成，但可以肯定的是绝大部分都进了国企。而正是这笔钱，造成了一场灾难式的国进民退。</p><p>全国工商联的多位企业家，曾经为落实新36条而奔走呼吁，要限制国资委的扩张，但最后这场拔河根本不对等，最后全都不了了之。新36条和早先的非公36条，遭遇了同样的窘境，也就是废纸一张。</p><p>  这一年，宏观经济上大家还沉浸在印钞票的喜悦当中，外汇储备从2008年底的1.94万亿，增长到2010年底的2.87万亿，这让西方世界产生了极大的恐惧，他们认为中国正在发动货币战争，美国和欧盟强烈职责人民币低估，要求我们升值。而在微观上，房价和农产品全都开始暴涨。</p><p>  2011年，两个乔布斯的信徒短兵相接，来了一场风云际会，一个就是小米的创始人，互联网老兵雷军，另一个是同样的互联网老兵，一开始做Foxmail邮箱，后来卖身给腾讯的张小龙。</p><p>  2010年中国制造发生了天崩地裂，所谓天崩由于土地和原材料，特别是劳动力成本的提高，已经越来越困难，在珠江三角洲，起码有1000家制鞋企业缩产歇业。要不就将工厂转移到东南亚。所谓地裂说的是由于电商的冲击，让整个消费习惯开始改变，分销模式已经无利可图，大量中间商利润被压缩。这一年感受到寒意的企业代表就是李宁，他的业绩发生了断崖式下跌，2009年李宁国际化扩张，他的净利润达到顶点，达到39.7亿，但是转过年来，就暴跌至11亿，然后就一路下跌，到了今年也就是2017年，他的利润更是缩水到了3.8亿。这中间李宁尝试过无数方法，聘请过很多CEO，但都无法止住颓势，国际市场没打进去，国内市场也丢了，李宁的大败局就是典型的不作不死，盲目逆势扩张所造成的大败局经典案例。但李宁的困局也不是孤立的，甚至他是整个晋江模式的一个缩影，晋江这个地方诞生了一系列运动品牌什么安踏，特步，361度，匹克，鸿星尔克，贵人鸟全是这里的企业，这一年出现了内贸市场严重过剩的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;多灾多难的2008！这年1月份，全国议论最多的就是高涨的房价突然停止，中央电视台记者柴静，采访了三位企业明星，王石，潘石屹，任志强，向他们提出同样的问题，房价的拐点来了吗？&lt;/p&gt;
&lt;p&gt;其实早在2007年，房价的快速上涨就已经惹得民怨沸腾，国家开始了严厉的调控，2007年</summary>
      
    
    
    
    <category term="history" scheme="https://github.com/categories/history/"/>
    
    
  </entry>
  
  <entry>
    <title>pi4安装androidTV制作家庭影院</title>
    <link href="https://github.com/2021/09/27/pi4%E5%AE%89%E8%A3%85androidTV%E5%88%B6%E4%BD%9C%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%99%A2/"/>
    <id>https://github.com/2021/09/27/pi4%E5%AE%89%E8%A3%85androidTV%E5%88%B6%E4%BD%9C%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%99%A2/</id>
    <published>2021-09-27T14:17:31.000Z</published>
    <updated>2021-09-29T07:39:14.513Z</updated>
    
    <content type="html"><![CDATA[<p>正文开始之前请确保你的网络已经可以“遨游世界”。如果不行请看上一篇刷软路由的文档，靠本本上启动一个小飞机的方式不算，必须刷软路由。</p><p>准备工具，硬件：7寸hdmi高清显示屏，Raspberry Pi 4高清转接头，sd卡（16G+）和读卡器，Raspberry Pi 4一个，电源线若干，u盘一个，鼠键，3.5mm耳机或者小喇叭。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlDH5oDKt0icbFHYbQibg4k3wd91bjEZhiaYzDDRzWRshHdu2oYscSMZpdCR2mVOHQbfKCjgao2XrQlrA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>软件：1.lineage-17.1-20201121-UNOFFICIAL-KonstaKANG-rpi4-atv.zip下载地址：<a href="https://www.androidfilehost.com/?fid=10763459528675588552">https://www.androidfilehost.com/?fid=10763459528675588552</a></p><p>2.lineage-17.1-rpi-recovery2boot.zip</p><p>下载地址：<a href="https://androidfilehost.com/?fid=8889791610682901035">https://androidfilehost.com/?fid=8889791610682901035</a></p><p>3.open_gapps-arm-10.0-tvstock-20201121.zip</p><p>下载地址：<a href="https://sourceforge.net/projects/opengapps/files/arm/">https://sourceforge.net/projects/opengapps/files/arm/</a></p><p>以上软件找到最新版本即可。</p><p>4.balenaEtcher刻录工具</p><p>下载地址：<a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></p><p>辅助工具：win10,diskpart（win自带）刷sd卡失败可以格式化win+r -&gt; cmd -&gt; diskpart(以管理员身份运行)    基本命令：  list disk 列出磁盘  select disk 0 选择0号磁盘  clean 清除分区  create partition primary size=15192 创建分区（这是16G）</p><p>开始操作：  </p><p>使用balenaEtcher将KonstaKANG-rpi4-atv.zip写入sd卡（工具会自动解压img文件）。将recovery2boot和tvstock拷贝到一个干净的u盘中。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrYLGC7IAOERcHjAUs5F58RRVz2ibYbicuostib6tnSqdKD3Ak1tNvzp6pQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><ol start="2"><li>将写好的SD卡和U盘插入树莓派4b，连接键盘鼠标，开机。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrm4VulVGBbumicQqV2sqmZZuwWvfLDlHmg4CleNsCictJxEOWKVnSB58w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>把时间校准一下</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrEEWfY1bpuiaiaWWbZqmwpYA8HXIu4YSZpnfuLLZKTHAPmbibcicbjedtgg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>开机基本就是这个界面</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrMU1gvnVme9nfQgv1bpc1K6mgld7BP1X5rk6TibPGhQxvfc0Ba6pwbibg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>选择右侧设置</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vr2cWZh2ZUCFusZqyk4J5MUU7vibIu6Rsw6F2x9Q8PibrZIASwuFl4jQiaQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>点击about,选择下面build(开发者模式)连续多次点击</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrTYqX3DMCZS2DEMuWDPG8zWHtLF7gJbLx6icSbrzbHD14hREc4WulxcQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>然后退出会看到多出来一个开发者选项</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vraasKlia0LMic5EXcOfAmaYB8sGC1VVOMewahSk22IpR1vEhO39uAtoiaA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>点击进去打开root access</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vruHteSlT6armTamgyOcodaibR9ziceHMlLtjWsbmRoHla5M67XSCcCiaIQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>然后f1退出到主界面（f2退一层）打开apps会出现终端</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrdcT5yhylQCLchMjBMc9T57ibMd1tUvTJ35icYCoF5wxENIW1Iedia48aw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>点击进去输入密码su并执行脚本 rpi4-recovery.sh然后reboot重启</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrlaMvlkiama0cLDlkD3YayBJsH1ib841KZDuDyoIl3vicrg0q2FG7gdKnQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vr3SPxfy7ltibjgsoWxMsSfM4kbxBGflMOwW3lNQhcvYn9bxiaot2M3FmQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>选择install-&gt;select storage-&gt;选择我们的u盘</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrI0Pc4HoPQMtAX89D3z7hiaskcBMeBSibuP3ZMCltaTMus6n2FfKlYKRQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>先选择tvstock包等待安装</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrXZE7gwC9SNktDMD53rUOqbm1QkIbqkfdA1feNkcvA51F6zK37u0xKA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>接下来操作简单一笔带过。接上截图-&gt;wipe dalvik-&gt;swipe to wipe -&gt;dalvik wipe complete -&gt;选择wipe -&gt; swpie to factory reset -&gt;dalvik wipe complete-&gt;选择mount</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlBIlIoZTWJxoFYczg8hL0vrxqnn02B7L066HeASUYScb9h76omAyTC1H9EnybDM7hJicttRNIQa1VQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>最后回到install选择recovery包进行安装，装完就可以reboot重启了。</p><p>接下来开机时会进行初始化设置，如果你的无线被墙的话就没办法操作了。</p><hr><p>不出意外这个时候可以进入到androidTV主界面了，核对一下右上角时间，如果不对，继续往下刷。</p><p>重复上面打开开发者权限的操作，然后进入开发者模式打开usb调试-&gt;打开网络调试（有些版本叫做adb调试）记住ip+端口。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlDH5oDKt0icbFHYbQibg4k3wdVlx0pMxAAl8fjehFGZWWLeQTHc4zXiblNJsRvr9R8I9ibcwjvWplF7xQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>下载adb连接工具，链接：<a href="https://pan.baidu.com/s/1Rsd4g7qT3IVmB31mpKpFpg">https://pan.baidu.com/s/1Rsd4g7qT3IVmB31mpKpFpg</a> 提取码：2tx6</p><p>打开cmd-here.exe 工具 输入命令：adb connect ip:端口（默认5555），写入新的ntp服务器地址：adb shell settings put global ntp_server ntp1.aliyun.com</p><p>备用地址：dns1.synet.edu.cn news.neu.edu.cn dns.sjtu.edu.cm dns2.synet.edu.cn ntp.glnet.edu.cn ntp（1-7）.aliyun.com</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlDH5oDKt0icbFHYbQibg4k3wdrwDNSgjpibmHrbSL25ibsib2BfibqFE6Ok9J4OSUOpFXicRu96W7lbTGxUw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>到这里教程就结束了接下来接入投影仪就行了，如果顺利应该是这样的效果。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zvt4BdYBzlDH5oDKt0icbFHYbQibg4k3wdyuExqibk8zXNPn9u82GdogNDJOrHUVQXBS837nvcCSwTiafWD8PBadrw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>androidTV市场比较大，不止刷美剧，还可以玩一些游戏，亲测可以连接xbox手柄，好了本期教程到此结束，总体评价稍微有点难度。下次带你们玩一下用steam link技术做一个云电脑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正文开始之前请确保你的网络已经可以“遨游世界”。如果不行请看上一篇刷软路由的文档，靠本本上启动一个小飞机的方式不算，必须刷软路由。&lt;/p&gt;
&lt;p&gt;准备工具，硬件：7寸hdmi高清显示屏，Raspberry Pi 4高清转接头，sd卡（16G+）和读卡器，Raspberry </summary>
      
    
    
    
    <category term="树莓派" scheme="https://github.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://github.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>光荣与梦想 第三部</title>
    <link href="https://github.com/2021/09/27/%E5%85%89%E8%8D%A3%E4%B8%8E%E6%A2%A6%E6%83%B3-%E7%AC%AC%E4%B8%89%E9%83%A8/"/>
    <id>https://github.com/2021/09/27/%E5%85%89%E8%8D%A3%E4%B8%8E%E6%A2%A6%E6%83%B3-%E7%AC%AC%E4%B8%89%E9%83%A8/</id>
    <published>2021-09-27T14:13:41.000Z</published>
    <updated>2021-09-27T14:14:51.422Z</updated>
    
    <content type="html"><![CDATA[<p>从1951年到1961年，上一回说到了朝鲜战争爆发，中国出兵，送给了麦克阿瑟惨败，韩国已经放弃了汉城，麦克阿瑟的防线也已经抵挡不住，他在向政府求援，要求美国政府，投掷30-50枚原子弹，到中国东北。然后再从中国台湾抽调50万国民党军队，登陆中朝边境。</p><p>一听这话，就知道，麦克阿瑟已经被打蒙圈了，当时他的属下陆军上将李奇微率领20万人美韩联军，对抗40万中朝联军，结果落荒而逃，后来利用空中优势才算堵住了原州的缺口，1月底，他们开始重新反击，3月重新夺回了汉城，又过了两周，双方再次站上了三八线。战争退回到了原始状态。</p><p>战争受阻，损失惨重，让反共派傻眼了。此时又有人站出来说便宜话了，约瑟夫肯尼迪呼吁美国人，做好自己分内的事，只在家园遭到威胁的时候再干涉。这意思就是，美国不要到处出击，要安分守己。这其实就是一种孤立主义。跟之前的反共情绪严重不同。就连共和党右翼领袖塔夫脱也提出了美国堡垒主义，这引起了美国国内的一场大辩论，而且已经超出了党派之争。说白了就是美国要不要四处出击的问题，大陆派认为美国只要维持各种势力现状就足够了。要借别人的手反共，而不是自己冲在第一线。所以他们还是希望通过北约，来解决问题。</p><p>这时候艾森豪威尔提出了一个办法，就是重新武装，保卫西欧，别无他法，因为当时欧洲人是反对斯大林的呼声最高。只要美国取得北约的领导权，用美国武装力量进驻欧洲就可以了。很快国会同意了这个方案，派遣4个师进驻欧洲。</p><p>在1951年4月，杜鲁门撤掉了麦克阿瑟，因为麦克阿瑟已经失去了信心，也丧失了战斗热情。但其实麦克阿瑟，非常的不听话，杜鲁门已经准备和谈了，而麦克阿瑟却扬言要全歼中国军队，这让杜鲁门忍无可忍。而且麦克阿瑟还跟杜鲁门的反对者走的很近，把很多消息散布给杜鲁门的对手。这就让杜鲁门和总参谋长马歇尔下决心对麦克阿瑟撤职。但是撤职的原因，并未对外公布。</p><p>这场战争的失败，让美国国内对于杜鲁门支持持续下降，很多人甚至倒挂国旗表示不满，杜鲁门也出现在了美国人的段子里。猪头，低能儿，犹大，兔崽子成为了杜鲁门的新代号。当时的民调显示，对于撤职麦克阿瑟这个事，批评的人，是支持的20倍，69%的人支持麦克阿瑟。</p><p>麦克阿瑟回国之后，竟然像是个英雄，来接他的拥护者，山呼海啸，麦克阿瑟随即发表演讲，34分钟，获得30次雷鸣般的掌声，他的主题就是，必须对抗，不能对亚洲的共产主义姑息和投降。他还留下了一句著名的话，老兵不死，只是归隐。</p><p>一时间被撤职的麦克阿瑟将军，在美国国内声望反而达到顶峰，对于麦克阿瑟的崇拜，也就相当于对杜鲁门政府的示威。甚至引发了4万码头工人的罢工和学校停课，而麦克阿瑟，也借着自己成为网红的机会，大骂杜鲁门，说杜鲁门的绥靖政策，才是导致战争失败的主要原因。但是这种情况，并未维持多久。</p><p>在朝鲜战场上，李奇微接替麦克阿瑟指挥战斗，在三八线中美双方反复争夺。在1951年5月，双发展开了拉锯战。</p><p>美国人民此时已经不太关注战争了，他们认为这场战争毫无意义，只是为了换取另外一片土地的和平。跟自己没啥关系。但是他们依旧痛恨共产党，在各种作品中，不断抹黑红色势力。</p><p>当时我们也耍了个心眼，朝鲜战争中的军队，叫做中国人民志愿军，也就是说，都是自发过去的，所以不受中国约束，你美国也别找我谈。中国也不背锅，但明眼人都明白，真正的志愿军，没有带着坦克和大炮的。而苏联也否认对此次冲突负责，我也没出兵，你找不着我麻烦。</p><p>这就让美国吃了一个哑巴亏，甚至找不到中间人去谈判。最后双方主帅，就在三八线上谈判。此时美国的战争热情，几乎降到了冰点。1952年美国已经拥有了50个师，4000架战机，为了完善军事基地，美国不断地进行投入，政府预算越来越大。美国正在向全球输出他的财富，而埋单的都是美国的纳税人。很多人都提出了反对意见，说这样下去，只会让战争无法收拾，永远得不到和平。</p><p>其实，虽然二战才结束几年，但时代已经完全不同了，以前的战争还有意义，而自打原子弹出现之后，大国之间的战争，已经不再可能有结果了。所以，中美对抗，美苏对抗，这种战争继续下去，一点意义都没有。</p><p>当时美国已经在研究氢弹了，破坏力是原子弹的25-1000倍，当时大家都叫这个东西为热核武器，或者是超级弹。一个叫做爱德华泰勒的人，被称为是氢弹之父。科学界相当反对，以爱因斯坦和奥本海默为首的科学家，认为这个东西是自取灭亡，应该立即停止研究，当时研究原子弹，是因为误以为希特勒有了原子弹，所以要与之对抗，而现在去研究杀伤力更大的氢弹，只会给人类带来风险。一个城市如果遭到氢弹袭击，90%的人口恐怕都会立即死亡。会被炸的连渣都不剩。而氢弹的研究者泰勒则反驳，说苏联已经爆炸了原子弹，正在研究氢弹，难道你们觉得斯大林就比希特勒靠谱吗？但其实他们没想明白，这玩意其实没啥应用场景，如果为了苏联，即便在莫斯科和列宁格勒，用原子弹就足够毁灭了。根本就没必要继续投入重金去研究氢弹。</p><p>但是后来，氢弹研究还是获得了批准，原因竟然非常搞笑，他们觉得，如果苏联先研究出氢弹，美国会感到很没面子。科学界集体反对杜鲁门。不过还是有人对这个东西很感兴趣，不为杀人，纯粹就是兴趣，比如一个叫做冯诺依曼的科学家，他在研究氢弹的过程中，做出了一个机器，一天之内可以算完三个月的方程式，冯诺依曼给他命名数学分析器，数字积分器，还有计算机。对于后来的计算机研究有着深远影响，特别是计算机结构采用的二进制编码，现在都还在使用。当时他把这台机器，命名为疯子。</p><p>在计算机的帮助下，杜鲁门任期的最后一年，氢弹终于造出来了，重达65吨。命名为迈克。还在原来试验原子弹的新墨西哥州，阿拉莫干多沙漠里被引爆，让人目瞪口呆，有人形容，至少十个太阳的光芒才能比得上爆炸时候的亮度，它形成一个六公里直径的巨大火球，足以让一座城市的核心区域，瞬间蒸发掉。但是更可怕的是，9个月之后，美国就不再垄断氢弹了，苏联人也研究成功了。爱因斯坦对记者说，全体人类的灭绝，正在向我们招手。</p><p>现在氢弹有了，剩下的就是怎么发射的问题，原子弹是用B29轰炸机投射的，但此时他们希望有更先进的武器，当时发射原子弹的时候，科学家就想到过火箭，不过原子弹的误差不能超过千分之二，如果距离是5000英里，那么就会有10英里的偏差，很可能造成脱靶的效果，所以最后精度达不到，就只能放弃了。而对于氢弹来说就无所谓了，他足够炸沉一个岛，即便误差10英里，也可以让被打击目标瞬间蒸发掉。而且还会有大量的放射性尘埃扩散。所以他要杀伤的范围，比一个城市的规模还大，大概能覆盖300平方英里，换算过来就是777平方公里。相当于一个纽约那么大。</p><p>逗比的是，美国人自己把自己吓到了，氢弹这么牛逼，如果别人朝我扔怎么办，他思来想去，发现没办法，于是谣言开始传播，什么防治原子弹的特效药，还有把宠物毛发剃光就不会有放射性物质等，这些民防运动根本不切实际，而有钱人则用钢筋混凝土，修建各种防护罩，里面摆上罐头和水，以及防护服。可见当时美国人已经深陷世界即将毁灭的恐惧当中。早知进入何必当初呢。</p><p>当时美国大学里的青年学生发生了变化，他们不太关心政治了，反对麦卡锡主义，当时是最让人群情激奋的事，但学生们也没什么兴趣，在校园里，麦卡锡没什么支持者，也没什么反对者，大家更愿意学习工商管理，而不太愿意学文科。原因是因为，这个专业可以获得最高的利润回报。50年代的美国，年轻人很颓废，已经对什么都不感兴趣了。以前大学生的政治观点，有明显的左右倾向性，而现在，年轻人的政治倾向，始终停留在中间地带。大学生们甚至鄙视领袖这个概念。大家更倾向于集体主义，而不希望展现个性，不愿意创业，而希望加入大企业。能够有稳定的收入，也可以准时下班。</p><p>这就是当时年轻人的想法，他们认为所有的伟大发明已经完成，所有的梦想都已经实现，下面就是享受生活的日子了。当时美国人一定认为，这一代战后的年轻人，是垮掉的一代，这种想法其实所有人都会有，总认为现在的年轻人，比我们那一代差远了。但其实都只是幻觉。只是时代和价值观发生了变化，产生了明显的代沟而已。</p><p>50年代，是一个怀疑的年代，怀疑凌驾于一切事业之上，这其实就跟我们的文字狱有点像，美国人总是疑神疑鬼，认为什么都是共产主义。甚至小说，剧本都会时不时的被批评为是在宣传共产主义。</p><p>1950年，美国共有300万电视机用户，电视时代开启，但是当时的电视节目都比较粗糙。基本就是讲话，摔跤等等，当时为了让大家都受到信号，电缆网络工程开始运作。到了1951年9月，已经有4000万电视观众，占美国家庭数量的88%，以后每年售卖500万电视。当时美国家庭，平均每天看电视4-5个小时，汽车让美国人离开家庭，而电视又把美国人拉回了家庭。自此之后，家庭里最多的话题，基本是因电视节目而起。电视火爆，让电影开始惨淡，好莱坞出现了萧条。靠海外收入才勉强维持。很多电影院都关门大吉。甚至最后荒废的电影院都成了流浪汉的聚集地。</p><p>当时的出版行业也在蓬勃发张，平装书每年卖掉2.5亿本，民众也第一次，通过各种渠道接受大量的信息。而当时媒体这个行业，也被大家广泛研究，很多学者在研究，媒体到底对社会价值观，带来了怎样的影响。</p><p>媒体蓬勃发展，让广告业成为朝阳产业。媒体上出现了各种各样的广告语，当时广告商每年花费100亿美元，占美国国民生产总值的2.2%。几乎所有商家，都已经习惯了在媒体上，叫卖自己的商品。</p><p>在1951年有一场听证会引发了大家关注，一个黑社会的人物，科斯特洛，被带到了参议院听证会上，3000万电视观众，收看了这个节目，当他被问到一笔钱的来源的时候，他开始慌了。这可能与政府的行贿受贿有关。这只是当时的一个缩影，腐败已经在美国社会流行。连篮球队，也经常有受贿的情况。另外，性贿赂也非常普遍，当时职业妓女已经出现，VIP级别的报酬高达500美元一次。主要负责接待那些政界和商界的重要人物。</p><p>当时以友谋私成为赚钱的渠道，有人从中牵线，就可以获得5%的好处费。复兴金融公司，当时是为了应对金融危机而成立的，但此时已经成了藏污纳垢之处，有人以手中贷款权力而敛财，为了弄到15万美元贷款，可以行贿一件9450美元的天价貂皮大衣。以至于那时候，大家一看到貂皮大衣，就让人想到了骗子。民主党公务员有不少人都被爆出了丑闻，政府贪污腐败的问题，成了杜鲁门政府最大的威胁。</p><p>杜鲁门马上开始反腐，但是他所用非人，他任命的司法部长，叫做麦克拉斯，但他的部门也卷入了丑闻当中，这就让大家更加不信任政府。共和党便借势宣传，说这一切只是为了掩盖真相。最后杜鲁门不得不解雇了麦克拉斯的职务。</p><p>1952年杜鲁门的地位越来越不稳定，那一年钢铁工人还出现了罢工，最后政府妥协，同意钢铁涨价，也给这些工人涨了工资。政府麻烦越来越多，共和党的机会就会越来越大，他们已经连续五次在总统竞选中失利，所以对下一次势在必得。要达到这个目的，他们就得清除一个又一个强大的对手，而伟大的马歇尔将军，就成了他们的最新目标。</p><p>共和党一致反对马歇尔担任国防部长，说马歇尔只是杜鲁门的狗腿子，他是姑息养奸之人，马歇尔要对中国造成的局面负责。他们罔顾事实，就是要败坏马歇尔的名声。共和党右翼声势越来越大的同时，杜鲁门的支持率就越来越低，当时民调显示，杜鲁门的支持率已经跌到了四分之一。最高的时候也从没超过32%。</p><p>杜鲁门也明白，大势已去，自己不可能再去参选总统了，他必须找一个自己的继任者。这时候有一个人呼声是比较高的，这就是艾森豪威尔，他没有党派，甚至没有宗教信仰，江湖传言共和党在争取艾森豪威尔，但是他自己却并不感兴趣。他当时还在巴黎，就对记者表示，拒绝承认自己的党派关系。他也避而不谈竞选的事情。但此时，绝大多数人，依然相信，共和党肯定会提名艾森豪威尔参加竞选，起码杜鲁门就是这么认为的。</p><p>还有一个人叫做史蒂文森，他在竞选伊利诺伊州的州长，杜鲁门希望史蒂文森可以与艾森豪威尔一战，史蒂文森确实获得了很多人的拥戴，甚至艾森豪威尔都被他的魅力所感染，不过史蒂文森却觉得自己还没有准备好，而杜鲁门则准备赶鸭子上架。逼着他参加竞选。</p><p>杜鲁门多次会见史蒂文森，给他做思想工作。而他自己在一次演讲中，公开宣布，不再参加新一届的美国总统竞选。</p><p>3月开始，共和党选举开始了，艾森豪威尔在被动中，赢得了不少选票，紧随塔夫脱之后，一看这么高的人气，艾森豪威尔也准备正式参加竞选，于是他回国，并且主动要求解除了他的军事职务。艾森豪威尔打出了公平竞选的口号，专门打击塔夫脱的暗箱操作。最后，大家更相信，艾森豪威尔可以带领共和党，赢得最后的大选，所以在一番唇枪舌剑后，艾森豪威尔赢得了共和党竞选，不得不说，艾森豪威尔的情商很高，他马上与塔夫脱握手言和，也争取了对手的支持，下一步共和党将作为一个整体，去和民主党决战。</p><p>艾森豪威尔还需要一个竞选助手，以后会成为副总统的角色，有人提议当时年轻的参议员尼克松，这个人跟艾森豪威尔互补，比如艾森豪威尔喜欢交际，能左右逢源，而尼克松则沉默寡言，不太合群，而且他之前还坚定的反共，促使西斯获罪，民主党称他为没有胡子的麦卡锡，他的作用就是吸引那些不太喜欢艾森豪威尔的人，共和党怕这些人转投民主党，所以就用尼克松来吸票。</p><p>在民主党这一边，史蒂文森还在推脱竞选，这就让民主党的希望渺茫。但是他们并没有放弃努力，最后史蒂文森众望所归，实在推脱不掉了。这让民主党士气大振。杜鲁门随后宣布，将全力支持史蒂文森，不过这一举动，为史蒂文森带来了不少黑粉。后来他决定断绝与杜鲁门的联系，从而塑造自己的形象。</p><p>报纸行业先表达了自己的倾向，201份报纸支持史蒂文森，993份报纸支持艾森豪威尔，支持共和党的读者是支持民主党的10倍。不过共和党人并不敢掉以轻心，因为上次对阵杜鲁门的时候，他们看起来也是稳操胜券，结果出来的时候却输掉了竞选。</p><p>当时有人让艾森豪威尔抓住朝鲜战争，并且攻击民主党政治腐败，但是艾森豪威尔都拒绝了。他甚至拒绝和麦卡锡一同拍照，很显然，艾森豪威尔还是个正人君子，根本看不上麦卡锡这种小人。</p><p>这一场竞选跟前几次都不一样，在大选前夜，纽约时报还在说，这是一场充满变数的竞选，现在根本确定不了谁会胜出，最终艾森豪威尔胜出，赢得了大选，共和党时隔20年，终于重新拿回了总统的宝座。而史蒂文森也并不能算是失败，因为他也获得了足够多的票数，放到过去20年，除了1936年的罗斯福，他这个票数都能当选总统。</p><p>艾森豪威尔当选总统之后，第一件事就是飞到汉城，当时那里还在打仗，而此举就是告诉美国军队，下一任美国总统将全力支持军队。然后他又前往檀香山，登上美国海军的巡洋舰，鼓舞士气。艾森豪威尔已经有了新的想法，他认为庞大的军事预算，对于斯大林反而有利，如果新政府，打击世界各地的共产主义威胁，那么美国就将陷入困境，要解决这个困局，也许制造更多的核武器，是个解决办法。也就是我们所说的通过核威胁的方式，来赢得和平。</p><p>他第一件事就是组建政府，有人形容他的政府是8个百万富翁和1个水管工，财政部长，国防部长， 司法部长，邮政部长，农业部长，商务部长，内务部长，卫生部长全都是有钱人，水管工则担任劳工部长，而巧合的是，国防部长，邮政部长还有内务部长，都是原来雪佛兰汽车的经销商，也就是都来自于通用汽车公司。当时有人说，五角大楼把7.8%的业务都交给了通用汽车公司，艾森豪威尔迫于压力，让他的内阁成员，尽量卖出股票，撇清和商业公司的关系。</p><p>共和党已经20年未能执政了，联邦政府也发生了巨变，胡佛总统时期，联邦政府要给63万政府雇员发工资，而现在这个数字是256万，增长了3倍，而预算数量从38.6亿增长到了854亿，猛增21倍。而他们党内，甚至已经找不出一个人，有过管理联邦政务的经验。此时的麦卡锡也成了一个难题，他之前的任务就是不断抨击政府，而现在共和党上台了，他也就失去了利用价值。但是他还有很多支持者，所以他们把他安排在了政府工作委员会里，以为这样他就不会搞破坏了，但是麦卡锡是专业挑刺的，他反对哈佛大学校长的任命，说这和美国人民的普遍信条相违背，也反对副国务卿的任命，只因为这个人跟自己有仇。不过艾森豪威尔根本就不理他。后来麦卡锡又反对驻莫斯科大使的任命，认为这个人是个危险分子，为此政府还得自证清白，虽然最后这些事情，麦卡锡都没能如愿，但在总统心中，这个梁子已经结下了，对于这个小人，迟早要收拾他。</p><p>新政府很快兑现竞选承诺，下令取消对工资的控制，也解除了生活消费品的限制，紧缩联邦信贷，削减国防支出，又要企图搞平衡政府预算那一套，这本书讲到这，大家应该已经能猜到，只要政府要平衡预算，随之而来的肯定就是经济衰退。</p><p>艾森豪威尔准备改变反共政策，他要借助其他势力出击，而不是每次都是美国人自己干，他们之前认为，第七舰队阻挡了老蒋反攻，所以现在要给老蒋自由，让他出笼，反攻大陆。但这显然只是一厢情愿，当时老蒋甚至连船都不富裕。可以说如果没有台海美军第七舰队阻挠，基本上他连台湾都保不住。后来艾森豪威尔发现，他这个决定的后果是，11个沿海岛屿反而被大陆解放。所以最后又被迫把第七舰队调了回去。</p><p>当时共和党内有一种观点，要彻底否决罗斯福当年与苏联达成的所有协议，他们甚至要求去争取东欧，但是白宫却表现的比较温和，不愿意这么干。只表示，会用一切和平的方式去帮助东欧，这显然跟啥都没说差不多。说白了就是根本不敢和苏联翻脸。最后外交政策变成了，民主党反而在支持艾森豪威尔，而捧他上位的共和党却坚决反对。对苏政策就这么一直拖延了下去，拖到了1953年3月，这时候新情况出现了，斯大林去世了。</p><p>后来有人透露了艾森豪威尔当时的真实想法，他觉得打仗太贵了，每架飞机值75万美元，老百姓根本负担不起，世界也根本负担不起长期战争的费用。而且这已经是一个原子弹的时代，现在去打仗根本就不会有结果。现在他认为正确的做法就是，削减军费。然后发展经济。</p><p>但当时国内的反对声音很高，当时的国务卿杜勒斯就反对从朝鲜战场撤兵，他说早晚我们会为这个决定后悔的，必须要给中国人致命一击才行。听到这话，让艾森豪威尔感到很愤怒。他还是决定以朝鲜战场的战俘为切入点，进行和平谈判。而韩国的李承晚，还老大不乐意，干不过人家，全靠老大撑腰，此时他还挺不服，不接受任何分裂朝鲜的提议。老头子78岁了， 还挺能吹牛，说如果你们怂了，我就自己带军队杀过鸭绿江。这让美国人很头疼，甚至比对付中国还头疼。</p><p>中国主张双方战俘全体遣返，美国主张自愿遣返。到1953年5月25日，美国作出让步，同意中朝战俘，移交印度为首的中立国，监察委员会，允许中朝对战俘做解释工作，中国也表示同意。眼看停战协议即将达成，李承晚却于1950年6月17日深夜释放了关押在论山等四处的25000名朝鲜战俘，名为释放，其实是强制扣押。让交换战俘的行动被迫中止。为此，他还让南韩军队，与看守战俘的美军交火。事后李承晚亦宣称决不改变立场。这让中朝军队认为，联合国与李承晚是蓄意合谋，随即停止谈判，发动了重大攻势。</p><p>后来美国专门跟李承晚先摊牌，各种威逼利诱，这才算搞定这位老愤青，随后美国才和中朝联军谈判，达成了停战条款，这场战争持续了37个月，200万人血流成河，80%是平民，美国也死掉了33000多人。而结果却是恢复原状，对于这场战斗到底谁赢了，各方说法不一，甚至美国国内也没办法达成统一认知。似乎大家都是输家。</p><p>艾森豪威尔在国内积极的削减预算，杜鲁门的财政赤字是99亿美元，而新政府已经缩减到了55亿美元，但是再也削减不下去了，这意味着财政依旧无法平衡。而共和党内，反对声非常大，艾森豪威尔的竞选对手塔夫脱就批评，这跟民主党毫无区别，预算超过国民收入30%，显然太多了。简直难以容忍。这是再走杜鲁门的老路。但是艾森豪威尔，还是希望说服塔夫脱，并抛出了他的冷战战略，说这一切都可以解决，而塔夫脱竟然被他真的说动了。从此成为了冷战战略的支持者。</p><p>不过塔夫脱的身体很快就不行了，先是腿脚不好，疼痛难忍被迫休假，之后又被查出了白血病，最后很快就去世了，一共也就半年时间。这个消息对于共和党来说，是个巨大的震撼，他承载着东部和中西部之间的桥梁作用，塔夫脱去世，艾森豪威尔的政府，就变得更加艰难。塔夫脱的继任者是诺兰，这哥们跟艾森豪威尔的观点，基本上很难达成一致，在之后的5年里，这个人都让总统感到非常的头疼。</p><p>艾森豪威尔的第一年，是非常艰难的，当时他的领导班子，跟他并不是一条心，甚至很多经验丰富的外交官都被解雇了。而整个国务院都在受到麦卡锡的反共主义影响。公务员都人人自危，有些人在空军服役8年后，莫名其妙就被列为了危险分子，被指控与同情共产党的人有来往，所以不要总相信什么美国言论自由，其实哪都一样。</p><p>当时他们认为杜鲁门政府追查间谍不力，为了进一步扫除民主党的势力，诋毁民主党名声，艾森豪威尔也颁布了行政命令，只要有一丝叛国的嫌疑，就会被开除，甚至酗酒，有不卫生的习惯，说谎这都不行，都会被视为与国家安全不一致。在这样的命令下，4个月里，1456名联邦工作人员被解雇。后来这个数字不断扩大，到了6926人。但民主党认为他们在玩数字游戏，这些人大部分都是自己离职或者退休的，只有1743人被解雇。而且这里面还有40%被艾森豪威尔的政府雇佣过。</p><p>另外，还有人在积极的否定雅尔塔会议，他们甚至要求把白宫的权力收回到国会，这就相当于否定一切，以前美国所签订的一切协定，都将不算数了，而且现在签订的，下届国会也可以不认账。这东西是一个叫做布里克的人提出的，所以叫布里克修正案，而艾森豪威尔实在忍不了了，他坚定地给予反对，可想而知，这东西要成了，不但他自己成了傀儡，白宫也基本上就没啥存在的必要了，而且最关键的是，美国将从此信用扫地。所以这其实就是吃饱了撑的，没事找事。作者也说，按照这个修正案，美国根本进不了北约，他规定必须每个州都同意，在美国这样的国家，这就是一个根本不可能完成的任务。</p><p>这个事当时非常凶险，结果是60人赞同，31人反对，按照美国的法律，需要有三分之二的赞同票，也就是说，仅仅差一个人，这个修正案最终没有获得通过。否则美国随后20年的外交历史，必将会发生重大的不同。越战也肯定不会打了。当然跟中国建交，恐怕也就够呛了。那么如果没有美国，中国还能不能迎来改革开放的经济奇迹，也就两说了，所以得亏那个人投了反对票。</p><p>布里克修正案，最终没有获得通过，当时美国的国务卿杜勒斯，是一个强烈的反共者，而且一直主张以武力对抗，甚至鄙视印度这种中立的国家，他的想法，跟艾森豪威尔也明显相反，艾森豪威尔一直在致力于缓和，但杜勒斯完全不管这一套。甚至苏联东欧的事情，他都要去挑唆一下。</p><p>艾森豪威尔则在不遗余力的裁军，将空军预算削减了50亿美元，军队从320万裁撤到了285万，他要做的就是省钱，然后用于减税。所以当时美国非常奇怪，执政者方向完全相反，对外政策慷慨大方，对内的军事却相当吝啬。</p><p>1954年，艾森豪威尔召开新闻发布会，他表示，在地球的任何一个地方，美国都要避免卷入热战。当时他指的就是中南半岛的战争。当时越南正在爆发危机，而此时越南正是法国的势力范围，但美国却负担了法国1/3的军费，还派出了200名空军部队的技术工程师。但是法国并不争气，他的军队被胡志明杰出的将领武元甲打的溃不成军，甚至被人家一个游击队，拿大炮给围着轰。当时联合国也没有任何表态，美国似乎与该地区也没有任何瓜葛。艾森豪威尔更是小心翼翼，甚至仅仅是空袭，他都不愿意，就怕再惹到中国的空军，与之对抗。</p><p>但是，其他的政府领袖并不这么认为，他们觉得美国是西方世界最强国家，也是西方反共领袖，朝鲜停战后，越南成了唯一热冲突的地区，很多人都在强调，如果在这里，让越共打出了威风，那么他们就会全线出击。</p><p>最后各方势力妥协的结果就是，美国提供支持就可以了。1954年艾森豪威尔批准向法国军队提供3.85亿美元，他们认为这样，法国应该可以自己搞定，毕竟对手只是一群游击队。但是他们没想到法国已经这么废物了。最后法国军队甚至被包围了，法国政府向美国求助，尽快派出飞机空袭。但是李奇微将军则反对，他认为，你只要派出飞机，以后也就免不了派出地面部队。而越南那个地方，全是丛林战，这对于美国军队来说，是极大的威胁。</p><p>杜勒斯这时候提出了，英国，澳大利亚，新西兰，和美国一共派出远征军，在越南消灭共产党，这样也足以吓退中共。这个行动目标，最差也要把越盟消灭。而此时法国甚至请求美国使用原子弹，可见当时法国已经被胖揍到了什么程度。但是艾森豪威尔根本就不想这么办，他连空军都不想派出。丘吉尔态度不置可否，法国则非常迫切，什么条件都愿意答应。此时尼克松却作为副总统，发表了一段讲话，他说可以派出美国士兵参战，这就让总统很被动。但他坚持甩锅给了国会，称要等到国会授权才能行动。</p><p>此时，法国被包围的军队十分惨烈，阵亡人数已经过半，而所有援助的空投物资，都被越南游击队所截获，而且这个地方， 不是下大雨，就是烈日烘烤。炮兵部队已经全部失去，所以只有挨打的份，几乎陷入绝境。到了5月，法国军队终于举白旗投降。奠边府失守。这个结果，对于西方世界的影响比较大。</p><p>而其他的东南亚国家更慌张，所以很快就成立了东南亚条约组织，澳英法美加入共同防御，也就意味着一个国家受到攻击，就要共同抵抗。而且这个条约不仅限于外部入侵，内部颠覆也有效，也就是说，东南亚国内有人造反，这几个国家也同样会干预。随后还有一份协定，把条约的保护范围扩展到了越南，柬埔寨和老挝。</p><p>1954年美国国内，也出现了经济衰退 的迹象，当时他们还不愿意承认，给起了个更好听的名字叫做循环调整，但是这次衰退时间并不长，大概半年左右就结束了。汽车工业仍在高速发展，当时一年能有700-800万的销量。</p><p>这时候，原子弹之父，奥本海默也被说成了共产党间谍，说他在费尽心思阻挡氢弹的研制。还有人指控他每月都会给共产党捐钱，也说他的妻子和弟弟都是共产党。当时科学界，也出现了明显的党派之争，奥本海默认为应该有限遏制，核武器够用就行了，而他的对手则认为无限遏制，核武器越多越好，奥本海默的对手，显然没什么道德，他们竟然写信诬告奥本海默。最后原子能委员会的人，甚至来到普林斯顿大学，没收了他的一切机密文件，强迫他退出核心项目。然后还要举办听证会。用以确定他是否真的有问题。</p><p>但听证会，似乎也不太露脸，所以偷偷摸摸的举行，也不对外公布。在听证会上，奥本海默被一个控方律师不断地羞辱，但是结论还是不错，听证会宣布指控不成立。不过，由于他对氢弹缺乏热情，所以他们也不主张他在从事相关工作。</p><p>反对奥本海默的人，也是一个伟大的科学家，就是氢弹之父泰勒，他本以为干掉了奥本海默自己就是核物理方面的老艺术家，但结果适得其反，最后大家觉得，这个人德不配才，无论学术水平有多高，但道德水平却不高。可见，无论在哪个国家，打小报告诬告别人的人，都不会受到尊重。</p><p>这时候，第二枚氢弹在美国比基尼岛爆炸，相当于广岛原子弹威力的1000倍，直接炸开了珊瑚礁，放射性尘埃，超出了研究人员的预估，吹到了一艘倒霉的日本渔船上，这哥们也真是世纪倒霉蛋，实在不知道招谁惹谁了，结果回到家乡后，导致23人病倒。美国人就像放了个屁，还要到处闻闻，他们发现，日本，澳大利亚，美国，欧洲等地的雨水中，最后都发现了放射性物质。这是一种全新物质，锶90，半衰期是25年，他会在骨骼中聚集，形成致癌物质，并影响到子孙后代。</p><p>当时麦卡锡依旧在美国政府内扎刺，这给政府带来了很大的麻烦，甚至有人建议艾森豪威尔，尽快否定麦卡锡的共和党身份，后来尼克松坚决反对，他说这样会让共和党颜面尽损。最逗逼的是，同样是反共，麦卡锡和国务卿杜勒斯之间也在进行撕逼，当时有一种说法是，麦卡锡是一人之下，万万人之上。所以他是一股强大的势力。甚至很多人觉得，麦卡锡比总统还可怕。对于麦卡锡他们也不敢提出任何的反对意见。</p><p>当时他的狗腿子沙因，被陆军征兵走了，而他希望军队直接给沙因升官，并得到照顾，但是陆军拒绝了，而作为报复，麦卡锡就想办法迫害陆军，甚至对陆军部长发难。而陆军也准备决定反击，想把这个沙因事件，披露出去，而麦卡锡则反驳，说陆军用沙因做人质，企图威胁他，不让他揭露共产党。后来，为这个事又进行了听证会，但很可惜法官也是麦卡锡的人，所以这次听证会，也依然被麦卡锡控制着。</p><p>不得不说麦卡锡这个人是个奇才，他每次都能做出对自己极其有利的发言，而且总能借着程序问题岔开话题，但其实他根本就是在进行主题发言，跟程序半毛钱都没有。这么多美国政客，竟然拿这个骗子，毫无办法。</p><p>这时候有一个能收拾他的人出现了，这个人叫做约瑟夫韦尔奇，陆军部请来的年轻律师，他让嚣张跋扈的麦卡锡，走向了灭亡，韦尔奇对付麦卡锡的方法就是，质问他那些机密文件的来源，而麦卡锡根本不可能回答，因为如果他承认是从联邦调查局那里得来的。那么就已经违反了联邦法律。所以这让他感到第一次很难堪。</p><p>当然麦卡锡不会就此失败，他开始反击，并说就在韦尔奇的律师事务所，就有一个费舍尔的年轻人，就是共产党。希望用这个东西，直接KO掉韦尔奇，让他名誉扫地。这确实让韦尔奇大吃一惊，接着麦卡锡乘胜追击，指责韦尔奇根本就不知道共产党的危害。随后他拿来了一张简报，上面写着，他的助手费舍尔曾经是被查禁的组织，律师协会的成员。</p><p>韦尔奇辩护，说费舍尔只是哈佛毕业后，短暂加入过律师协会，但在他了解了这个组织的真正性质后，就主动离开了，没想到麦卡锡是这么冷酷无情无理取闹的人。请不要再重伤那位年轻人了。他接着说，在听证会之前，他们双方都知道这个情况，并对费舍尔加入又主动退出的事心知肚明。而且已经达成了协议，不会提到费舍尔，现在麦卡锡背起了这个约定，足以说明他已经黔驴技穷。这一场显然麦卡锡又输了，叱咤风云好几年的反共头子麦卡锡，遭遇到了人生滑铁卢，他飞扬跋扈对陆军部穷追猛打，但是却遭遇了一个年轻律师韦尔奇的反击，在听证会现场，连输两阵，这是从未有过的局面，以前只有麦卡锡恶心别人的份，但这次却反过来了，他被韦尔奇当庭骂的哑口无言。</p><p>陆军对麦卡锡的听证会，进行了36天，最后结果是双方都有责任，一开始麦卡锡觉得无所谓，虽然没赢，但是也没输，但其实结果并不重要，在听证会上，他出了洋相。这让他的形象大受损失。很多人之前对他敢怒不敢言，现在开始纷纷站出来反对他。甚至有人说，赶紧让共和党跟麦卡锡划清界限，否则麦卡锡可能会拖累整个共和党。当时民调显示，听证会2个月后，竟然有22%的成年人，对麦卡锡的看法变坏了。2400万美国人，明确表示讨厌他。一场反麦卡锡运动上演，很快就有人提出，要免除麦卡锡参议员的职务。最后67:22票，通过了这个决定，而就在半年以前，只有一个人敢投麦卡锡的反对票。</p><p>接替麦卡锡的就是尼克松，当时看起来，尼克松也是积极反共的，甚至很多人说，看不出他们的区别，还记得他的绰号吗，没长胡子的麦卡锡。所以他也在积极的打击共产党，攻击民主党。当时他已经是美国的二号人物。不过他跟艾森豪威尔，除了都为共和党竞选外，在其他方面，还是有比较大分歧的。一般民众都是对执政党不满的，所以共和党执政，民主党反而会获得更多中间派的支持，所以民主党逐渐又开始控制国会。</p><p>在50年代，美国的购物中心出现了，当时美国家庭基本都有汽车，所以解决购物者的停车问题，就成立了越来越多的购物中心。而反过来，这些大型的购物中，要选择在一个比较空旷的地方，才能建造更多的停车位，所以城市中心反而开始衰落。当时汽车电影院出现了，当时每个年轻人几乎都可以搞到车，不是自己有，就是可以随时借到。而年轻人使用家里的汽车，60%的目的，竟然是为了社交。当时年轻人也成为了消费的潜力群体，所有的广告商，都在针对年轻人打广告。美国做了个调查，七年级的孩子，相当于咱们这的初中一年级，每星期花费30美分到8.5美元不等，而高中生每周要花费1.65美元，到19.5美元。即便是现在，我们每周消费不到10美元的人，还有近1个亿人口。</p><p>当时战后婴儿潮进入青春期，新的市场也在扩大，全美新增1800-2000万消费者，每年花费增长到100亿美元，之后又增长到250亿美元。有调查显示，平均每个美国青少年，在商品和服务方面的花费是555美元。</p><p>每年15-19岁的美国人群，将2000万美元花在口红上，2500万用于身体除臭剂，900万美元用于家庭烫发。每年男孩和女孩花在化妆品上的钱超过3亿美元。可见50年代，美国已经掀起了一波臭美的浪潮，越来越多的人，开始舍得为自己的形象支出。</p><p>另外，年轻人已经有了赊账的金融产品，比如校园账户，新星账户，这都是专门针对14-21岁的年轻人赊账用的。</p><p>1954年，美国男性的平均身高是175cm，而女性的平均身高是162cm，男性的平均体重是141斤，女性差不多是120斤。美国女人又不打算上班了，很多都会为了选择婚姻而放弃工作。但是很多人仍然觉得生活不如意，50%的成年人抱怨入睡困难。90%的人做过火车，但是很少人做过飞机。美国人相信上帝的比例达到94%。很多人发誓的时候，都会加一句，向上帝保证。</p><p>美国社会一个普通的四口之家，生活费平均是每星期60美元，这比1937年的时候提高了一倍。有调查显示，当时大家还依旧保持着大萧条时期的节俭习惯，如果有1万美元的额外收入，他们最愿意做的事情就是去买房。其次才是还债和投资，只有极少数人才会选择都花掉。虽然大多数美国人都在抱怨，物价高税收重，但是他们普遍认为自己比上一辈过的好多了。</p><p>那时候种族主义还是比较严重的，白人和黑人基本上不会通婚。在1954年5月，美国最高法院，还做出了一个关于公立学校种族隔离问题的判决。最后大法官宣判，不能因为种族不同，就把黑人的孩子，隔离出来，这样会让他们产生自卑心理，公共教育领域不允许座位隔离，隔离教育设施本身就是不平等的，隔离教育是违宪和违法。</p><p>但这个结果，引发了比较大的争议，特别是南方的白人显得垂头丧气。还有人指责法院，滥用司法权力。这一切也困扰着艾森豪威尔，他觉得美国在全世界的领导地位，会受到种族主义的拖累，但是这个事又不能走的太快太急，那样也必然引发国内的反对。尼克松也表示，最高法院的这个决策，会让南方城市的发展推迟15年。他说这根本是一个道德问题，而不是法律问题，所以我们只能引导，而不应该强制推行，否则会被强烈反对。</p><p>但是既然大法官已经宣布了，就必须要强制执行，艾森豪威尔在强制推行这个法律，学校的种族隔离设施，逐渐消失了，政府中也开始加入了黑人雇员。在发达的几个州，都在积极响应，但是也有不少南方落后的州在抵制。</p><p>有一个黑人女人，打算进入亚拉巴马大学，但是后来，他的车在街头被很多暴徒用石块乱砸，大学也劝他不要进入学校，但后来这个黑人女孩，则提起诉讼，法院否决了学校的提议。这时候其实双方都很艰难，虽然黑人女孩赢了官司，但是他也不得不提前跟学校撕破脸。后面也肯定没有好果子吃。</p><p>当时甚至在南方一些地方，枪支的销量都在上升，有些人选择极端情绪来对抗这个种族融合的法律。很快就出了命案，1955年，一个14岁黑人拜访他的亲戚，有人说他侮辱了一个白人女性，然后就被三个白人男性暴打，随后扔到水里淹死了。最后法律在全部都是白人陪审团的影响下，竟然判罚凶手无罪。这让很多人，为自己的孩子而担心。有的小镇甚至出现了1000人的暴动，要求杀死黑人。</p><p>还有一个黑人女性叫帕克斯，42岁，他乘坐公共汽车，司机让她给白人男子让座，这在之前，是美国南部社会的惯例，但现在这个帕克斯，觉得与法律撑腰，自己可以挑战一下，他拒绝了，但很快，他就在下一站被逮捕了，因为品行不端，被指控有罪。并罚款10美元，但这个帕克斯在黑人社区，很有人缘。所以他引发了一场抵制公共汽车的运动。这个地方黑人占据公共客车运载量的75%。所以对于公共汽车公司，是生死攸关的问题。黑人就想要公平待遇，而他们的领袖就是大名鼎鼎马丁路德金。</p><p>而他的对手，就是蒙哥马利市的政府，最后市检察官开始公诉，对114名黑人提起了控诉。当然马丁路德金也被抓了。并被判有罪。本以为杀一儆百，但结果引发了更大的愤怒，黑人真的就从此没坐公共汽车，而公共汽车公司却债务缠身，破产在即。后来马丁路德金又被抓了，但是很快最高法院的判决下来了，依旧是消除种族隔离。按照联邦法律，马丁路德金被无罪释放。所以这次运动，在进行了381天之后，黑人取得了全胜。公共汽车上，终于可以做到种族平等。</p><p>国务卿杜勒斯仍然在积极的反共，他总在给新中国添乱，而中国的领导人也在跟他斗智，比如他在签订东南亚条约的时候，中国炮轰金门，给予示威。而李奇微将军则是当时唯一的反对者，他也是在朝鲜战场，真刀真枪跟中国对抗过的，所以知道中国军队有多可怕，他一直向总统建议，万一真的动武，那就没办法控制了。关键是，你即便打赢又能怎么样，你得到的只是一片真空的土地。</p><p>但是杜勒斯和诺兰这些人则表示不服，他们非要跟中国掰掰手腕。他们告诉总统，现在中国要进军台湾，收复金门和马祖两个岛屿，如果美国不采取行动，亚洲就会认为美国是纸老虎，艾森豪威尔似乎真的被说动了，他向国会申请宣战，目的是保护台湾和澎湖列岛的安全。</p><p>中美之战一触即发。总统艾森豪威尔请求国会，动用武装力量，以确保台湾和澎湖列岛的安全。但是他还是暗示了一下国会，如果确实中国军队对中国台湾发起攻击，那么就要参战，但如果中国只是要拿回金门和马祖，那就算了。所以相当于艾森豪威尔把判断战争性质的锅，干脆甩给了国会，你们自己判断中国军队的意图。我不承担责任。很多人都表示批评，他们认为艾森豪威尔是三军总司令，是否开战，你应该自己拿主意。当然也有人说，这是艾森豪威尔的滑头之处，他管国会要了一张空头支票。</p><p>之后杜勒斯还去招惹苏联，希望苏联可以撤出东欧，这就让艾森豪威尔比较头疼，因为他现在要做的是继续裁军。后来艾森豪威尔带着杜勒斯一起，在日内瓦会见了苏联的赫鲁晓夫，和朱可夫元帅，总统表达了，希望和苏联人做朋友的意思，当然他的意图就是，希望双方都可以进行裁军。他们提出，美苏中，军队都不超过150万人，英法不能超过65万人，所有核武器都被禁止。</p><p>然后艾森豪威尔还提出了一个空中开放计划，也就是说你们飞机可以飞过来侦查，看看我们的原子弹核武器，希望你们也可以同样开放天空，然后大家就都踏实了，可以缓解紧张的情绪。当苏联听到这个消息的时候，惊呆了，他们根本就没有任何的准备，让美国人到他们的天空去拍摄军事设施，这不可想象。但欧洲人则非常赞同，而且显得很兴奋。但是其实想想，这基本上不太可能。大会之后，赫鲁晓夫的反应非常冷淡。根本就不接招，也不置可否。</p><p>艾森豪威尔觉得，这是一次胜利的大会，他依旧幻想着美好的未来，心情非常不错，甚至还去度假，打了他一生中最爱的高尔夫球，1955年9月，他正在等着苏联人的答复。但是艾森豪威尔却突然生病，胸口疼痛，医生查看后，证明总统得了冠状动脉血栓。心脏已经受损。</p><p>总统生病，这可不是一个小问题，消息出来之后，华尔街股票大跌。当天就暴跌了444点，艾森豪威尔这一病，损失高达120亿美元。这是29年大崩盘之后，最惨烈的一天。但是后来医生宣布，艾森豪威尔应该问题不大，甚至可以参加下次总统竞选。但是很多人对此并不信。艾森豪威尔则躺在丹佛的医院里接受治疗，慢慢的他也逐渐在康复，也逐渐的开始处理一些公务。11月他出院，返回了华盛顿。所有美国人这才松了一口气。</p><p>但此时另一个猜测又出来了，很多人认为，艾森豪威尔身体已经这么差了，他可能在任期结束后退休，而他自己其实也很犹豫，只有他的私人医生在鼓励他，应该参加新一届总统的竞选。后来艾森豪威尔，活动了活动，似乎觉得还行，所以他觉得干脆还是继续参加竞选。并对全美所有人宣布这个消息。</p><p>艾森豪威尔对美国的最大贡献，是洲际公路系统开始动工，很多高速公路在这一时间建成，这段时期，美国经历了高增长低通胀时期，而猫王开始走红，成为万千少女的偶像。成为一代天王巨星。他甚至成为了美国文化的标志之一。后来他入伍当兵，在欧洲也引起了轰动，直到现在，都还有很多他的歌迷。</p><p>美国一直试图让埃及加入西方阵营，甚至要给开罗贷款5600万美元，帮助他们修阿斯旺大坝，用以收买埃及人。但是军政府领袖纳赛尔并不领情，他更认同中国。还计划访问莫斯科，用棉花兑换捷克的军火，于是这就让，国务卿杜勒斯很生气，他取消了这个贷款。而作为报复，埃及人也没客气，夺取了苏伊士运河。当时这条运河一年的收入就是1亿美元。</p><p>这个事件对美国影响倒不大，不过英法两国受不了了。埃及切断了英法两国工业的石油来源。当时欧洲供暖所需的能源，三分之二都来自于苏伊士运河，所以这一下就麻烦大了，伦敦和巴黎陷入危机。一方面他们开始埋怨美国人，另一方面准备用自己的方式收苏伊士运河，而以色列本身就看埃及不顺眼，一看机会来了，所以他也加入英法阵营，10万以色列士兵在埃及边界集结。很快就入侵埃及。然后英法再出手拉偏手，他们想的很好，这样就可以一举干掉埃及。</p><p>这让美国人很被动，特别是艾森豪威尔，他很反对英法的这种做法。认为只会把事情弄得更糟糕。结果不出所料，埃及背后也是有大哥的，很快苏联人就发出警告，英法和以色列的部队必须立即撤出，否则就将成为红色原子弹的打击目标。另外苏联总理布尔加宁也马上联系艾森豪威尔，说双方应该联手阻止这场战争。但艾森豪威尔，却反过来指责苏联，说他们正在镇压匈牙利，所以不愿意与他们为伍。因为他知道，跟暴力的苏联合伙后，美国将很可能失去欧洲人的拥护。而艾森豪威尔也将失去美国人民的拥护。</p><p>当时正值美国大选，大家会把法国占领苏伊士运河，与苏联镇压匈牙利结合起来看，10个美国人，有7个是信任总统的，大家对于现在的经济也基本满意，所以艾森豪威尔的连任概率很高。民主党无法正面跟他竞争。他们能做文章的地方就是总统的健康，副总统尼克松，还有一些国际局势。这里解释下尼克松，当时尼克松的人气并不是很高，很多人认为他狡猾，鲁莽，缺乏经验，而且他跟艾森豪威尔互补，也就是说很多地方都不同，所以大家喜欢艾森豪威尔的地方，就是讨厌尼克松的地方。这就让当时有一场反尼克松的运动。</p><p>民主党能拿出的候选人，还是上一次的史蒂文森，但是史蒂文森并不构成威胁，甚至杜鲁门又出现了，他也在批评同是民主党的史蒂文森，所以这就让选举变得更加没有悬念。最后选举结果也证明了这一点，艾森豪威尔赢得了457张选票，而史蒂文森只有72张。几乎众望所归。值得注意的是，25年来，黑人第一次投票给了共和党。</p><p>从朝鲜停战，到1957年这段时间，被称为艾森豪威尔的假寐期，美国人自己觉得可牛逼了，但是突然之间他们就发现，原来苏联的火箭技术，已经超过了他们。这让他们感到非常沮丧。随后他们才投资上千亿美元去探索星空。</p><p>这段时间，大家对于技术革命已经越来越感兴趣。比如晶体管，当时就非常吸引人们关注，而且跟苏联只发展航天军工不同，美国的科技已经深入到生活当中，比如吸尘器，调频收音机，洗衣烘干一体机，自动变速箱，电热毯等等，这些科技正在逐渐的改变着美国人的生活习惯。</p><p>战后，美国国民生产总值翻了一番，在海外投资从120亿美元，提高到800亿美元，通用汽车的预算规模，甚至超出了波兰全国的预算规模，而且美国人的生活水平已经提高到了其他国家无法想象和理解的高度，有60%的家庭，工资收入都达到了中产阶级水平，40年代的时候，平均家庭收入只有3000美元，而50年代已经达到了5600美元，扣除通胀因素，也上涨了48%。此时正是美国的一段难得的繁荣时期。</p><p>随之而来的是，成年人和青年人对于消费观念的对立，成年人经历过大萧条，所以依旧心有余悸，而年轻一代，则已经花钱大手大脚，他们甚至会花光现在和未来的每一分钱，靠赊欠和分期付款过日子。1952年到1956年，美国消费者债务从274亿美元，增长到了425亿美元，增长了55%，分期信贷增长了63%，信贷透支的生活方式，让汽车行业几乎增长了100%，但其实这几年的可支配收入只是增长了21%，所以显然美国人在透支未来。甚至诞生了一个新兴职业，叫做债务顾问，当时的年轻人几乎没有存款，有统计显示，储户的平均银行存款只有300美元。</p><p>这让美国很多父母都比较不理解，称他们自己的孩子为蝗虫，经常抱怨，我在像你们这个年纪的时候，做梦都不会想到要欠这么多债。不过情况确实有很大的变化，比如金融保险，大萧条时候是没有太多保险行业的，所以大家只能通过存钱来应对风险，而现在各种保险贷款随处可见，所以年轻人遇到危机，可以轻松的借到钱，也有保险可以保障生活，他们存钱的必要性也就下降了。所以过度消费不能光看成是败家的行为，也是金融发展的结果。</p><p>1955年这段时间，美国年轻人已经习惯了透支消费，此时的价值观就是，每个人都可以过上，超出他收入水平的生活，越奢侈越繁荣，社会价值取向正在发生修正。而国家也得到了这种奢侈的好处，这其实就是经济学里的新现象，叫做勤俭悖论。每个人存钱，对自己来说是好事，但是对国家就是灾难，每个人都过度消费，对自己来说，让自己暴露在未来的风险当中，但是对于国家来说，却可以做到持续繁荣，抗风险能力反而上升了。</p><p>当时美国的广告，也是铺天盖地，各种各样的著名广告，诱惑着年轻人不断地进行消费。而美国的社会，也发生了笑贫不笑娼的社会信仰。大家都在想办法搞钱。</p><p>美国的城市也出现了新的变化，大家借助汽车和高速公路，出现了潮汐式的流动，比如曼哈顿以南，白天的人口超过100万人，而晚上只有2000人，100万人口离开纽约，到郊区的新社区里生活。夜晚的郊区，则吸干了城市的人口。其他的城市也大体如此。人们越来越习惯，住在宽敞的郊区，只有白天到城市里来上班。有统计显示，1958年以后的10年，有85%的房子，都建设在了郊区。</p><p>当时美国的很多小企业濒临破产，或者被大企业所收购，越来越多的美国人被大机构大企业所雇佣，蓝领工人被白领工人所超越，这点很重要，看到这你就不难理解，为什么在60年代美国会出现漂亮50热，大家觉得大企业的股票只涨不跌，即便估值高一些，用时间也能轻松化解。所以大家就蜂拥而至，推升了大蓝筹们的估值，当然他们也在70年代为此付出了极其惨痛的代价。</p><p>当时一个大企业甚至就是一个小社会，有公司专门盖了员工家园，甚至为员工发放特质的领带，还有公司聘请专门的牧师。大家也觉得，在这种大企业，就跟一个家一样。而且邻里之间也很和睦，甚至孩子之间可以彼此交换衣物和玩具，家庭的前门后门几乎也都是敞开的，邻居们不用敲门就能进去。50年代，年轻的美国男人，已经开始会干家务了，甚至可以洗碗做饭带孩子，这在上一代美国人是不可想象的。而美国的年轻女人，开始逐渐回归家庭，这时候奇怪的现象出现了，只要女人一回归家庭，出生率就大幅上升，50年代后期，美国的出生率已经接近印度。生3个孩子以上的美国妈妈数量翻了一倍。甚至很多女人连大学都不怎上了，三分之二没毕业就退学了，美国女人可能已经觉得，反正都要回归家庭，上不上学也就不打紧了。</p><p>这段时间，美国人搬迁的次数也明显增多，公司经理一生中搬迁平均达到14次，大约2年半就要搬一次家，对他们来说适应新环境成为一种能力，反而始终住在一个地方的人，是无法被理解的，反而是那种不求上进，被社会遗弃的表现。</p><p>在郊区生活的人，更倾向于加入共和党，即便以前是民主党，只要住到郊区，也倾向于更换共和党。因为他们想继续保持这样的生活状态。那时候的人，更愿意做一个与别人和谐相处的人，而不希望突出自己的个性，让自己显得特立独行，这种态度也放到了教育下一代的行动上，家长并不希望孩子有太多自己的意识。只要做到中庸就好，最好跟我比较像。</p><p>但是新教育家，却一直在批判这种传统教育，他们的主张跟家长刚好相反，让孩子自由发展，甚至自由选修课程。他们认为，死记硬背并不是真的聪明，这些人离开书本就啥也不是，真正聪明的人，大多智商都不高，但却收入很高，主要是因为他们有很强的适应能力。学习能力同样很强。</p><p>1957年之前，美国人一直很自豪，认为自己是科技最发达的国家，尽管苏联有时候也告诉全世界，他们发明了这个发明了那个，但是美国人都会暗自嘲笑，这些东西美国很早就有了。但是到了1957年10月份，苏联的人造卫星发射成功，并开始绕地球运转，美国人突然觉得，苏联的技术好像要超过自己了。这让白宫感到不安。但是科学界则表示，我们落后苏联，主要是因为没有全力以赴，民主党趁机发难，说这可能是重大隐患，甚至称之为国耻。我们必须投入更多的预算，才能够迎头赶上。</p><p>很多媒体也发表了自己观点，说苏联的卫星，在天空中盯着我们，简直太可怕了。美国人此时正忍受着羞辱，他们已经成为笑话。在科学大会上，苏联人嘲笑美国人，说你们只爱自己的生活，爱你们的房子，而苏联人才真正爱自己的国家。苏联的人造卫星，也让华约阵营彻底高潮了，就跟自己家娶媳妇一样自豪高兴。</p><p>美国科学家仔细分析了苏联的卫星之后，对于苏联的技术，也是十分佩服，甚至比他们预想的还要高。他们非常怀疑，苏联人正在通过这颗卫星在不断地收取情报和信息。</p><p>这颗卫星引发了美国社会的大反思，美国家长提出抗议，说苏联的孩子，学习更刻苦，他们10年学的内容，相当于美国孩子要学12年。苏联的孩子很小就学习科学，他们培养出的科学家和工程师，是美国的两倍多。最后他们把愤怒指向了预算，说分配给研究上的经费，只有4.5亿美元，仅占国民收入的千分之一。这是远远不够的。10年前最好的科学家在美国，而照此发展下去，10年后最好的科学家肯定在苏联。</p><p>反正当时就是，社会各界把美国的教育贬低的一文不值，甚至有人说，美国的大学生连欧洲的中学生都不如。最后连股票都开始下跌。而苏联人并不准备让美国人有好日子过，他们很快又发了一颗卫星2号，比第一颗卫星更强大，甚至他们还把一只小狗绑到了这颗卫星上。这下美国人更郁闷了，他们说狗能够等上卫星，也就意味着，苏联准备把人送上月球。这时候民意掀起了风暴，逼着总统去研究外太空。</p><p>艾森豪威尔似乎并不打算这么做，于是总统的支持率就持续下降。甚至跌了一半。苏联此时步步紧逼，他们说我们已经造好了洲际导弹，你们的轰炸机全都可以扔进垃圾箱了。这才让艾森豪威尔优点慌了，当时的判断是苏联在洲际战道导弹领先了15个月。也就是说，苏联直接可以用导弹带着原子弹，打击到美国。美国的轰炸机，防空火炮还有舰队，都没什么用了。</p><p>艾森豪威尔的态度很明确，研究火箭意义不大，但是他必须要去研究导弹。但其实，发射卫星的火箭，和导弹是一个逻辑，这两个事并不能分开。艾森豪威尔，在11月开始安排导弹的研究，重启一个叫做先锋的计划，以鼓舞士气，重振国民信心。12月的时候，美国的人造火箭就准备发射，准备把卫星发射上天，但是倒霉的时候喝口凉水都塞牙，这颗卫星发到一半就爆炸了。这让苏联人笑的肚子疼，他们甚至跟美国人说，要不你们申请一下我们的落后地区支援吧。</p><p>当时在阿肯色州还发生了一场巨大的骚乱，主要还是种族问题，小石城中央高中的反击很强烈，坚决不跟黑人一起，所以1000多人动乱，逼得总统动用了101空降师，来护送黑人学生上学，用刺刀来解决暴乱。但其实并未造成重大冲突，可是州长福伯斯却不断散播谣言，挑动种族主义，说军队用刺刀扎进了女学生的后背，但其实只是女学生好奇的从军人旁边走过，一起合了个影。</p><p>但是这个事情，很快也引起了反感，南方一些种族主义比较强烈的州，纷纷谴责艾森豪威尔的做法，他们甚至认为福伯斯应该起义。当时三分之一的人认为，艾森豪威尔是对的。当时客观报道这个事件的记者，获得了普利策新闻奖，但是在阿肯色州却被称之为激进分子和头号公敌。</p><p>这年底，艾森豪威尔又病倒了，用我们的话来说，这就是中风，甚至已经影响了他的语言能力，已经无法正确表达自己的意思了。正当他们担心的时候，艾森豪威尔却神奇的康复了。不过郁闷的是，他本想看卫星发射，结果还吃了一会憋。</p><p>其实当时科技还是在高速发展的，喷气式飞机已经在航空公司装配，美国电话电报公司，也已经投入使用了1亿部电话，占全世界电话总数的一半。</p><p>1959年1月，苏联又搞事情了，他们发射了月球卫星1号，到达了距离月球仅5000英里，相当于8000公里的地方，所以当时有个段子，说美国人如果登月会在上面发现什么，答案是苏联人。这就是赤裸裸的被嘲笑了。也足以说明当时在航天航空领域上，苏联确实处处领先一步。1958年，美国也颁布国防教育法，要求联邦政府提供资金，在科学数学和外语上的教育，持续投入。</p><p>这时候英法两国在苏伊士运河争夺战中，受到挫败，埃及的局势比较复杂，如果放弃中东，必然这块就会被苏联接手，成为共产主义世界，所以艾森豪威尔决定，在中东地区使用美国军队。但是此时，英法已经被打服了，放下了武器，所以美国想在埃及搞事情已经不可能了，于是他就在那些更小的国家里面，寻找存在感。比如反对以色列的阿拉伯人，在威胁约旦，于是美国人就派出第六舰队过去开了几炮。那里也就平安了。</p><p>叙利亚也发生了动乱，这就让黎巴嫩人非常害怕，向美军发出求援，艾森豪威尔也批准了。9000名美国海军陆战队士兵登陆黎巴嫩，他们的解释是，要保护在黎巴嫩的美国人，但当时没有任何美国人处于危险当中。</p><p>当时由于处于冷战当中，美苏又不可能直接冲突，所以最后就形成了一个现象，谁先出现在战场上，谁就能够率先划定势力范围。也就是说，美国人先去了，苏联人就不敢再派军队过去了。原来的美国人是中立主义，也就是不爱到处管闲事，二战都打起来了，他们还不闻不问，但现在的美国人正在四处出击。而且这种出击不光是军事上的，还有文化上的，美国的音乐，生活方式，都在随着美国游客走遍全世界。可口可乐更是成为了美国文化殖民的象征。</p><p>美国工业已经投资575亿美元到海外工厂，年总产值达到1000亿美元。美国公司正在欧洲陆续建立总部。而美国人的生活差距与全世界正在拉开差距，这也引来了无数的羡慕嫉妒恨。很多地方甚至都被煽动情绪，开始反对美国人，和美国的海外工业。</p><p>而美国政府，还在不断的炫富，副总统尼克松就说，美国4400万家庭拥有5600万辆汽车， 5000万台电视，1.43亿收音机，3100万家庭拥有自己的房子，美国人借此证明，自己的这种富足，才是最接近无阶级理想的国家。但是很显然，这种炫富的做法，并不被其他国家所接受。甚至很多贫穷的地方，还引来了反感情绪，比如尼克松访问南美的时候，有人称美国副总统是种族主义者，帝国主义者。甚至他在委内瑞拉，还遭遇了暴徒的袭击。很多人朝他们吐口水。他的车队遭到200-500人围剿，还遭遇了石块袭击。暴徒企图打破车窗，要把尼克松揪出来杀死。碎玻璃已经划破了尼克松的脸。然后暴徒们，又开始晃悠车子，企图把车掀翻，然后烧死车内的人。</p><p>根据尼克松回忆，当时一辆装载记者的卡车，没有被暴徒围攻，而这辆卡车迅速冲入人群，生生杀出一条血路，这才给尼克松的座驾迎来空间，跟着也冲了出去。这才从危险中突围。在知道了尼克松的危险之后，艾森豪威尔调动了军队，驻扎在委内瑞拉边缘。这就更加激化了矛盾，让暴徒们更加愤怒。这让委内瑞拉外长吓了一跳。也令整个拉美都陷入了恐惧当中。这件事之后，尼克松在国内的声望，还大幅提升。</p><p>这时候，艾森豪威尔的助理出事了，总统助理叫做亚当斯，艾森豪威尔对他非常信任，但是1958年却被一个奸商拉下了水，奸商叫做戈德法因，他说做纺织生意的，在骆马毛大衣上，虚标了成分，引起了调查。而戈德法因跟总统助理的私交关系非常好。还被查出来他们有很多的礼尚往来，另外，这个调查还曝光了，艾森豪威尔政府，很多人都跟这个商人有说不清的联系，比如有人住着奸商的房子，有人买房是通过奸商提供的无息贷款等等。</p><p>在戈德法因受审的时候，他承认了在1953年遇到麻烦的时候，才去找过联邦贸易委员会的亚当斯。而亚当斯则指引他，该如何去走政府关系，控诉方还指责他，账目不清，有些钱根本就不翼而飞。而戈德法因也解释不清。此外，他还涉及严重的逃税。所以最后结果是，总统助理亚当斯，受骗了，这有损于总统的形象。所以亚当斯必须辞职。</p><p>这就相当于砍掉了艾森豪威尔一条手臂，1952年亚当斯就在为总统工作了，所以总统根本离不开他。艾森豪威尔本来想保住他，但是舆论太激烈了，民主党又借此大做文章。共和党丢掉了缅因州的地盘。全国各地，已经纷纷表示，亚当斯不走，他们就会带头闹事。亚当斯此时也知道大势已去。他要是不走，就会把整个共和党拖入深渊。所以此时谁也保不住他了。随机辞职。</p><p>11月共和党非常困难，他们失去了12个参议院席位，和48个众议院席位，竞选州长的21个人，13个失败。一些坚定支持共和党的州也没守住，都划归了民主党阵营。有三个人当时众望所归，第一个就是约翰肯尼迪，马萨诸塞州州长，他的领先优势巨大，第二个叫做，戈德华特，第三个则是石油大亨洛克菲勒的孙子，纽约州州长纳尔逊洛克菲勒。而当时最不被看好的就是副总统尼克松。</p><p>1959年，对于美国来说，最大的麻烦还是种族问题，当时一些商店，不做黑人的生意，甚至对他们采取歧视的种族隔离制度，而黑人掀起了一场入坐运动，用来抵抗商业歧视，也就是坐在餐厅的座位上，一直坐到商店关门为之。这场运动进行了6个月，最后让很多商店都做出了妥协，种族隔离制度，在1960年的商店里逐渐被取消。</p><p>当时美国有一档答题赢奖金的电视节目在全美热播，叫做二十一，而有一个帅哥叫做查尔斯范多伦，是哥伦比亚大学的教授。他获得了通关大奖，拿到了12.9万美元，成为了一个比肩猫王的新一代知识偶像。很多父母，都把他视为别人家孩子，一时间他成为了青少年的偶像。但是后来，有人爆出内幕，这不过是电视节目作假而已，完全就是一场演出，而范多伦根本就是之前知道所有问题的答案，然后参加了现场演出而已。本身他就是一个演员。但是范多伦一开始却坚持否定。还认为那些媒体就是在诽谤。</p><p>后来，有这个节目的参与者，纷纷寄来揭发信，给听证会提供证据。而范多伦也再次被传唤。这次站在听证会上的他，彻底坦白了，说这确实就是一场骗局，只是这场骗局的影响似乎还是正面的。他之前也曾请求电视节目制作方，让自己输掉比赛，但是都被拒绝了。而当全国人民都在质疑他的时候，自己其实已经慌了。希望求得全国人民的原谅，但是他显然还在说谎，因为他无需请求电视制作方，只需要故意答错一道题就可以了。而且他一开始也并没有悔恨，甚至还在不断狡辩。只是因为这次把事情搞大了，所以才害怕了。</p><p>但此时还是很多人选择原谅这个人，也许这就是长得帅的好处。无论做错了什么，都有人会支持，但是很快哥伦比亚大学还是解除了他的职务，电视节目也把他开除，这还引起了舆论的反响，纷纷给全国广播公司上书，竟然支持他的人是反对的5倍。大家借着范多伦这个事，开始深挖电视台的黑幕，其中各种回扣非常的多。当时的人非常喜欢看这些八卦，而对于头版头条的政治大事，却漠不关心。大家更愿意看连环漫画和体育新闻。</p><p>美国国务卿杜勒斯，此时得了癌症，所以他的工作重心发生了变化，与病魔作斗争，代替了维持东西方对抗。杜勒斯松口之后，外交的倾向，就回到了艾森豪威尔的手中。赫鲁晓夫也承认，现在不排除美苏关系解冻的可能。1960年5月份杜勒斯去世，这是一个很关键的事情，因为在柏林已经上演了危机，赫鲁晓夫对西方各国下达最后通牒，如果他们还不撤出柏林，红军就将用武力把他们撵出去，要是按照杜勒斯的原则，必然会对此进行硬碰硬的反击。但现在外交权力又回到了艾森豪威尔手中，在处理柏林的问题，他采取了与杜勒斯完全不同的策略，他希望跟苏联好好谈谈。他先是邀请赫鲁晓夫访美，随后尼克松又访问莫斯科。</p><p>当时还有个插曲，在一次文化展览会上，有一个牧场住宅样板房引发了争议，苏联领导对此非常愤怒，因为这把苏联民间的穷暴露无遗，他们的人造卫星是以牺牲人民生活为代价的。现在通过电视向全球直播，美国的先进住房的时候，苏联人难免羡慕嫉妒恨，所以，这引发了两国领导人的口水战，尼克松还说，这是一个典型的美国住房，在美国任何一个工人都能住上，而赫鲁晓夫则对此嗤之以鼻。他狡辩到，苏联住房是分配的，根本就不用买。双方都压着火，虚伪的想表现出自己平和的一面。既然是表演，就要表演个全套的，赫鲁晓夫随后继续表演他的大度，不生气，他接受了艾森豪威尔的邀请，决定访问美国。然后他随即撤销了，对于柏林的那个最后通牒。</p><p>总的来说，赫鲁晓夫的访问很成功，他这种善辩和坏脾气很对美国人的胃口。艾森豪威尔曾经向他呼吁，希望能够让局势缓和下来，但是赫鲁晓夫只顾吃他的美国烤牛肉。最后双方发表联合声明，承诺所有棘手的国际问题，都不应该以武力解决。另外还宣布，艾森豪威尔第二年回访苏联。大家认为美苏关系可能就此改善，但其实只是假象，因为实质性的问题，全都没谈。</p><p>艾森豪威尔，随后去欧洲先转了一圈，准备联合欧洲，然后再跟赫鲁晓夫谈判，对欧洲人来说，对于艾森豪威尔还是有感情的，毕竟这是带着美军，反攻欧洲，干掉希特勒的英雄，所以引发了山呼海啸的欢迎。如果说二战国欢迎总统还能理解，但是在意大利，印度他也得到了巨大的拥护，这就有点奇怪了，这些国家要么是二战敌对国，要么根本就没参加二战，为啥要欢迎他呢？作者讲，可能民众欢迎的，是艾森豪威尔所代表的和平符号。</p><p>在50年代末，古巴是一个极权主义国家，他的统治者叫做巴蒂斯塔，而一个年轻的律师则在美国发起了一场运动，反对集权，还为古巴贫困人民辩护，随后带着12个人登陆古巴去打游击，进行武装反抗，这个人就是著名的大胡子，卡斯特罗。而美国其实在1958年3月，就已经中止向巴蒂斯塔提供美国武器，美国的很多媒体，也在支持卡斯特罗这样的革命者，称他们是，罗宾汉一样的任务。</p><p>后来卡斯特罗麾下已经有2000名武装革命者，要对抗巴蒂斯塔的4万军队，看起来处于劣势，但是商人，地主，还有中产都在支持着卡斯特罗，为革命呐喊助威，所以这也是一场人民战争，在1958年，卡斯特罗的部队打赢了政府军，巴蒂斯塔看到大势已去坐飞机逃亡国外。卡斯特罗向古巴宣布，现在古巴人民自由了。</p><p>接着卡斯特罗向美国立下投名状，带着礼物飞往美国，向美国保证，自己不是共产主义，也会保护美国在古巴的投资。</p><p>但是后来，卡斯特罗变了，他不再是那个革命者，也不再提什么自由，就像农民起义，最后都变成地主一样，卡斯特罗最后变成了一个独裁者。随后他开始倾向于投靠红色阵营，而与美国这种自由国家对立。还挑衅美国，说美国佬肯定不敢入侵古巴。</p><p>古巴的革命者都被出卖了，很多人锒铛入狱，也有不少人，逃亡到了美国佛罗里达。后来古巴难民都齐聚在迈阿密，以至于这里都看起来像是一座古巴的城市。而美国政府，当时正在秘密的做一项计划，选择训练古巴的流亡者，以便未来可以对付卡斯特罗。训练这些流亡者的，都是美国陆军和海军陆战队。主要课程都是游击作战。训练地点，则非常隐秘。在接受完训练后，他们会被分成若干小部队，然后分散到古巴的六个省份当中。这些古巴人一开始觉得，有美国支持，足以与卡斯特罗一战，毕竟，当年卡斯特罗最早创业的时候也就只有12个人。</p><p>但是他们后来发现自己错了，此时卡斯特罗已经将军队扩充到了40万，远比当时巴蒂斯塔的军队强大的多。而且卡斯特罗的背后是莫斯科和北京，为他提供了巨大的军火支持。后来，美国人又改变了作战计划，他们希望古巴流亡者军队，直接登陆，然后美军随后支援。但当时沟通存在着巨大的问题，大家得到的命令似乎都不一样，古巴人觉得自己只是先遣部队，而美国人则希望他们成为主力，还有人认为，根本就不会发动攻击。艾森豪威尔则完全不知道，他们要把游击战变成两栖登陆战。</p><p>美国当时还派出一架间谍飞机，飞往了苏联边境，这是艾森豪威尔做出的决定。他觉得无所谓，很正常。但就因为这个事，造成了全球局势的变化。美国这架U2型飞机很先进，他更能够避开苏联的雷达追踪。而且拍摄能力非常强大，能从空中拍摄到下面的人正在看的报纸内容。但是有一次，最好的飞机暂时无法使用，它们只能用一架替补飞机飞行。飞行员都知道，这架飞机是一架次品。经常出问题。就在这次飞行之中，它们要穿越苏联大陆，但在苏联的中部，突然发生了故障，此时返航已经来不及。飞行员紧急跳伞，本来美国军方做了安排，飞行员也随身携带了致命银针可以自己了结束生命，但是这个飞行员还是没舍得自杀。</p><p>赫鲁晓夫在得知这个情况后，他认为这是美国的一次侵略行动。并且指责艾森豪威尔。随后强硬表示，如果有侦察机再进入领空，将发射火箭进行回击。而这件事发生在了巴黎峰会之前，所以在峰会上，赫鲁晓夫态度很强硬，甚至粗野，谴责美国的欺诈和土匪行为。并建议峰会应该延期6个月。而此时美国虽明知理亏，但也拒不道歉。这就让巴黎峰会十分混乱。而美苏关系也瞬间恶化。甚至美国军方都表示批评总统，这么干实在没必要。</p><p>但是麻烦还没有结束，日本由于是美国U2飞机的亚洲基地，所以也遭到了左翼分子的示威，引发了国内骚乱。艾森豪威尔本来是要在巴黎峰会后访问日本，但现在日本人通知他，最好不要来了。否则安全可能没办法保证。所以他只好临时改变行程去中国台湾，不过中国军队，却在大陆，用最猛烈的炮火袭击金门，用以发泄对美国总统的敌意。至此，艾森豪威尔致力于全球和平的努力，彻底破灭。全球重回冷战僵局，这其实也怪不了，艾森豪威尔搬起石头砸了自己的脚。</p><p>艾森豪威尔在国内的声望，也快速遭遇了滑铁卢，共和党也因此受损。1960年的美国大选，民主党的肯尼迪对战共和党的尼克松，当时劳工们都在支持肯尼迪，而企业家支持尼克松。最没想到的是，艾森豪威尔，竟然支持肯尼迪，对于副总统尼克松，他并不看好。而且他还打击尼克松，说尼克松几乎没参加过什么政府的重大决策。这就给了尼克松致命一击。</p><p>总体来说，这两个人各有千秋，选票也一直不相上下。肯尼迪也有问题，他的最大麻烦在于他的信仰，他是罗马天主教徒，一般人认为这种天主教徒没办法当总统。后来尼克松犯了错误，一个是他否定，政府中应该有一名黑人的计划。而反过来，肯尼迪却在监狱中把马丁路德金捞了出来，所以黑人的选票突然就倾向了肯尼迪。</p><p>当时尼克松其实对中国更不友好，他曾明确表示，他上台，不会让社会主义中国进入联合国。竞选开始之后，很多电子计算机做出了预测，计算机的算法都作出了一个结论，肯尼迪将以大比例的优势获胜。但是没想到的是，共和党开始后来居上，双方的差距越来越小。紧张气氛，再度上升。在竞选那天晚上，肯尼迪一宿没睡，不断地打电话，一个晚上他打了1万美元的电话费，最后有惊无险，肯尼迪险胜尼克松，这让尼克松很伤心，因为每个州只要多得半张选票，他就赢了。有人甚至建议尼克松申请重新唱票。但这个其实也很复杂。最后尼克松还是没有这么做，他承认了自己的失败。但是此时尼克松的心里，依旧在谋划着，迟早有一天，他会王者归来。至此，光荣与梦想第三部也结束了，我们在光荣与梦想的第四部中，将为您带来，美国全新的肯尼迪时代。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从1951年到1961年，上一回说到了朝鲜战争爆发，中国出兵，送给了麦克阿瑟惨败，韩国已经放弃了汉城，麦克阿瑟的防线也已经抵挡不住，他在向政府求援，要求美国政府，投掷30-50枚原子弹，到中国东北。然后再从中国台湾抽调50万国民党军队，登陆中朝边境。&lt;/p&gt;
&lt;p&gt;一听这话</summary>
      
    
    
    
    <category term="history" scheme="https://github.com/categories/history/"/>
    
    
  </entry>
  
  <entry>
    <title>小岛经济学</title>
    <link href="https://github.com/2021/09/26/%E5%B0%8F%E5%B2%9B%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    <id>https://github.com/2021/09/26/%E5%B0%8F%E5%B2%9B%E7%BB%8F%E6%B5%8E%E5%AD%A6/</id>
    <published>2021-09-26T09:22:29.000Z</published>
    <updated>2021-09-26T09:43:20.371Z</updated>
    
    <content type="html"><![CDATA[<p>这个岛上有 3 个人，艾伯，贝克和查理，他们在岛上生活很艰苦，食物更加稀少，唯一的一道菜只有鱼，而好消息是鱼有的是，但他们不会用现代的捕鱼技术，于是只能跳下水去用最古老的方式，用手抓鱼。他们每人每天只能抓到一条鱼，而这条鱼刚好吃一天，所以每天捕鱼成了这个岛上的全部经济活动。这个岛上，没有存款，没有借贷，更没有投资。虽然生活很原始，但这三个人还是想改善自己的生活，于是艾伯想到了一个捕鱼器，他要扩大人手的范围，不让鱼轻易的溜走。他给这东西起了一个霸气侧漏的名字，叫做渔网。</p><p>想到这，艾伯第二天就不去捕鱼了，开始找各种树皮，然后结成绳子，去做这个捕鱼神器，但贝克和查理却觉得这兄弟疯了，并警告他不会分鱼片给艾伯，你自己饿肚子去吧。用了一整天时间，艾伯做出了渔网，当然他也饿了一天肚子。他以这种代价创造出了捕鱼神器，这就是所谓的资本。这个故事告诉我们，在消费不足的时候，要创造资本，必须要有所取舍，并且敢于冒险。事实上艾伯就是用饿一天肚子的代价，创造了渔网这个资本，而渔网是可以用来捕鱼的工具，所以他是有价值的。</p><p>第二天艾伯拿着他的神器，冲进大海，很快就抓到了 2 条鱼，看得查理和贝克是一脸懵逼，他们一天的工作，就这么被艾伯完成了。是的！就这么一个简单的资本，让这个小岛的经济形势发生了巨变，艾伯提高了生产力，对每个人而言都是好事。他说既然我可以一天抓到 2 条鱼，那么我就可以休息一天，干点自己其他的事情。这就是消费剩余，艾伯的生产力超出了他的消费能力，于是他把这些短期消费不了的鱼养起来，这就形成了储蓄。</p><p>可以说工具改变了人类社会，工具的使用大大提高了生产力，而科技革命的出现，更是让生产力提高到了前所未有的高度，困扰人类的饥荒问题，在最近 100 年间彻底消失了。生产的东西越来越多，消费的东西也就越多，生活就越好。然后大家就可以像艾伯一样，每天都在想创造点什么其他的东西。于是经济就进入了一个正面循环，增长也就越来越快速。世界的变迁当然也会越来越快。那么这个故事告诉我们最核心的一个经济增长的原因就是找到人类所需物品的更好方式，不管一个经济体最后变得多么强大，这个原因永远都不会改变。在经济学上有句话，长期增长靠供给，而短期波动看需求，说的是当你发明出新东西之后，经济就会源源不断向前发展。从这个意义上来讲，那些经济崩溃只会出现在个别地区，永远不会在全球范围内发生，因为科技创新永远是滚滚向前的。</p><p>还是回到我们的小岛上，艾伯已经创造了资本，有了剩余和储蓄，所以他是企业家了，看起来未来一片光明，而贝克和查理呢？其实他们也是艾伯的受益者，查理和贝克看到了艾伯的捕鱼神器，于是查理找到艾伯，说你那玩意太好了，反正你也隔一天才去抓鱼，那么你不用那天就借给我吧，艾伯对之前这两孙子的嘲讽耿耿于怀，而且害怕他们损害自己的装备，于是他果断拒绝了。说你们要用就自己做去，我挨了一天饿，你们也得挨饿才行。</p><p>查理和贝克很担心，自己能不能做出同样的神器，也不愿意挨饿，于是就跟艾伯说，这样，你先借条鱼给我，我们做好渔网抓到鱼之后再还你，艾伯一听，这事似乎对自己没好处，平白无故的冒风险，万一你做不成渔网，我岂不是白白损失了一条鱼。贝克这时候明白了，他要想从艾伯那里借到鱼，就必须付利息。比如借一条鱼还两条，这多出来的一条鱼，就是对于艾伯的风险补偿。这时候艾伯才动心了。借给他们两一人一条鱼，就能收回来四条，这比用渔网抓鱼效率还高。</p><p>此时艾伯的选择有 5 个，1 把鱼存起来，谁也不借，留着自己吃。2，把储蓄都消耗掉，好好休息几天，3，自己吃掉储蓄，然后利用这个时间，多做几个渔网出租给别人，4，用它的鱼去投资收取利息，5 他也可以结合上面所有的方案，作者说看似让三个人都有渔网，然后每天抓到 6 条鱼对于这个岛的经济是最有利的，经济增长翻倍，但其实未必，因为你的消费能力有限，所以这就有个道理，经济增长才会带动消费。所以不是说给老百姓钱，就能刺激需求的，事实上需要你创造更多的满足人们需求的供给，才能让需求的大饼做大。</p><p>所以综合来看，艾伯的努力，让这个小岛上的生产力有了提高，也无论是借贷，还是租赁渔网，都会惠及另外两个人，所以这就是富人致富的根本原因，他是为他人提供了有价值的东西，而艾伯的作用，就是为这个岛提供了储蓄，储蓄让这个岛有了商业模式。并不是我们传统教科书上讲的那样，什么资本家赚取了工人的剩余价值。事实上，没人会甘心于被人偷走价值，只有在自己也得到好处的时候，才会心甘情愿替别人工作。比如艾伯借鱼给另外两个人，收取利息错了吗？如果他不收利息会出现什么情况，那么结果肯定是两个人去拿着艾伯的鱼休假了，不要利息，反而阻碍了岛内的经济创造。</p><p>艾伯把鱼借给贝克和查理，因为他觉得这样对他收益最大。这样他们两个人就可以有时间去编织渔网了。当然这里面也是有巨大风险，如果这两人太笨，没做好渔网，那么艾伯的这两条鱼就打水漂了。现实社会中也是如此，你如果把钱借给了不赚钱的企业，那么最后肯定就会是暴雷的。而这种不赚钱的企业，就是在浪费社会储蓄。当然做个渔网这事很简单，如果把做渔网换成了研究鱼的催眠术，那么十有八九艾伯的鱼就要打水漂了。</p><p>再来做个假设，如果贝克和查理不去创新，他们就是纯粹想休息 1 天，从而管艾伯借贷，那么会有什么结果呢，休假后他们的生产率并未提升，但是要偿还多一倍的贷款，于是只能节衣缩食，不断降低自己的生活水平。这个道理就是说，如果你是为了消费而贷款，而没有提高产能，那么之后的生活必然要承担相应损失来弥补利息。所以一定要克制欲望，减少消费贷款，不能创造价值的钱要少借，这种钱借的越多，你未来的路就越窄。</p><p>还有一种贷款叫做应急贷款，就是说查理和贝克生病了，不能去捕鱼了，这时候艾伯处于人道主义关怀给他们一些鱼，等他们恢复体力之后再偿还，艾伯知道这种贷款风险巨大，但是不贷款的风险更大，因为你不贷款给他们，他们就有饿死的可能，那样岛上的生产力将大幅度的下降。这就告诉我们，在遇到紧急情况的时候扩大信贷投放时有必要的，但这种信贷扩张，并不能够成为常态，比如艾伯如果把鱼之前都借给了他们两度假，在度假的过程中他们病倒，那么就没有钱支付这种应急贷款了。所以这可以引申出经济学的常识，经济干预手段绝不应该是常态，不要老觉得政府投资可以解决经济的问题，这种政策在很大程度上浪费了社会资源，让社会效率降低。比如在中国，我们建造了大量的产业新区，工业园区，建造的时候 GDP 上去了，但建造之后却形成了巨大的浪费。有的厂房比工人还多，还有的几年过去了，杂草都快有房子那么高了。这种社会投资，就是在浪费储蓄，并不产生任何价值，那么钱是哪来的呢？还不是银行的，银行的钱又是谁的呢？还不是储户的。所以贷款这个事，一定要把钱用在提高生产率的事情上，如果不创造生产力，不创造价值，那么这个钱就是浪费了，会拉低社会的效率。而政府办的事情，有很多其实都是这种借款。</p><p>我们接下来，看经济到底是如何增长的，还是回到这个小岛上，几周之后，艾伯贝克和查理，凭借新制造出来的渔网迅速补到了大量的鱼，他们开始每天捕两条鱼，但实际消费量只有一条，于是岛上的储蓄开始膨胀。三位居民终于从每天都去捕鱼的日子里解脱出来，他们有时间休闲，参加有意思的活动了，艾伯可以去做棕榈叶的新衣服，贝克去采摘果子换换口味，查理则给自己盖了一间新的茅草屋。他们的日子，比之前好多了，但这时候贝克又有想法了，他说渔网既然这么有用，我们为什么不制造一个更大的渔网呢？这样就能抓到更多的鱼，他要发明一个水下的大型渔网，鱼可以自由的游进来，但是出不去。这样他们就不必再去捕鱼了，每天去取自投罗网的鱼就可以了。但是贝克最后发现这个工程有点庞大，自己的力量无法完成。于是他决定拉上其他人，创立一个合伙公司。集中三个人的储蓄，和三个人的力量一起来做这个事。</p><p>当然这个事的风险很大，如果计划失败，他们可能会损失掉 20 多条鱼，但美好的愿景还是让他们充满希望，一想到以后吃喝不愁再也不用劳动的日子，三个人充满干劲，经过他们长久的努力，第一个大型捕鱼神器建设完成，他们在这期间付出了 20 多条鱼的代价，但是这个大型捕鱼神器，每周就可以抓到 20 条鱼。而且毫不费力。于是三个人不但很快就收回了投资，还借此不断增加着财富。</p><p>他们看到了甜头，也彻底不用去捕鱼了，于是决定继续扩大再生产，很快就又建设了另外一个大型捕鱼神器，现在他们彻底衣食无忧了，查理开始去冲浪了，艾伯开起了服装公司，贝克研究起了运输用的手推车。这个故事告诉我们，人类社会在农业发展，填饱肚子有了剩余之后，才有时间去做其他的工业和服务业。所以储蓄不光是提高个人消费能力的手段，还是防止经济受到意外因素影响的缓冲器，即使小岛上出现地震或者台风，损坏了他们的捕鱼器，也不要紧，他们有足够的鱼作为储蓄，可以把设备重新建造起来，而不必去饿肚子。</p><p>美国在历史上堪称是储蓄大国，美国居民每年都会将收入的 10%甚至更多用于储蓄，这种好习惯帮助美国人金融崛起，然后在凯恩斯主义经济学家面前，认为储蓄是一种累赘，甚至有人说储蓄是一种国家对于个人的负债。妨碍了货币循环，降低了消费，于是美国开始了负债刺激，老百姓也开始过度信用消费，入不敷出。2008 年危机爆发后，经济学家们还在要求老百姓花更多的钱，而更少的去储蓄。这其实就让抵御风险的能力继续下降。储蓄除了防范风险以外，他还创造了资本，而资本使得生产扩大成为了可能。所以储蓄的作用远大于过度消费本身。</p><p>接下来我们看，更有意思的事情出现了，艾伯当时的贷款计划，让岛上的居民制作了大量渔网，然后生产力提升才有了更大型的捕鱼神器，再然后大家就有了更多的休闲时间，各种服务和游戏也充实起来。这种好事就传到了其他的岛屿，那些落后的小岛上，大家还在徒手捕鱼，大家受不了这种诱惑，于是纷纷移民到了艾伯他们这个岛上，生产率的提高，可以养活更多的人，而更多的人，又为原住民提供了更多样的服务，形成了新的经济。比如这些新移民，被雇佣去种地，他们甚至开始养猪养鸡，这样就带来了多样化的食物，还有些人被雇佣去盖房子，做衣服，甚至修路或者做马车，这样房地产，服装，交通运输全都开始发展，岛上的食物越来越多，也催生了厨师这个职业，他们开始通过不同食物的组合，烹饪美味佳肴，从而赚取更多附加值的报酬。这么多人在闲暇时光，总要有点娱乐活动，于是冲浪成为了热潮，查理的冲浪学校，吸引了很多人。随着社会化和商业的不断发展，这时候大家发现一个问题，物物交换简直太麻烦了，你很难换到你喜欢的商品和服务。比如查理他不喜欢吃果子，所以那些采摘果子的人就没办法去学冲浪了，艾伯有不喜欢美食，所以他的衣服不打算交换给那些会烹饪的厨师。这就是说，岛上现在急需一种货币，鉴于岛上的人都喜欢鱼，大家每天都要吃一条鱼，这个大家心里都有数，所以鱼的价值很好确定，很快鱼就被指定成了一种通行货币。假设岛上的 2 个人要花 5 天时间才能做好一艘小船，那么这个小船的价值，就等于这两个人花 5 天时间可以捕到鱼的数量，之前我们说了，一个人用渔网捕鱼，一天能抓 2 条鱼，那么这个小船的价值就是 10 条鱼。当然有人手快，对造船特别感兴趣，他花 4 天就能造好一艘船，所以他觉得这可赚了，于是他就会专心造船，做自己擅长的事情，慢慢的造船就成了他的职业。他造船卖掉，就可以赚到 2 条鱼的剩余，慢慢积攒财富。当然他也可以提高行业门槛，让自己造的船供不应求，比如他可以 9 条鱼就卖掉，这样其他人一算，自己造要花 10 条鱼，而买一条才需要 9 条鱼，当然是购买更划算，这种职业分工，让他的效率更高。</p><p>而这个造船匠也在时刻想，现在卖掉一条船只能赚 1 条鱼，那么如果能够再缩短一天，就又可以多赚 2 条鱼了，由于熟能生巧，他在长期的造船实践中，逐渐制造了一些专门的工具，这些工具的出现，让他的 3 天就可以造一条船了。他现在有两个选择，一个是独享这个技术，然后每条船多赚差价。第二个是出让这些工具，从卖工具中更快的赚钱。通常大家都会选择更快的赚钱，因为未来是不确定的，万一有人也掌握了这个技术，那么他就悲催了，所以不如干脆先落袋为安，一把收回。这样更多人掌握了快速造船的技术，也能够 8 条鱼造一条船了，船的市场价格也就进一步下降。更多的人买的起船了。而这个造船匠，成为了造船设备制造商。他也在短期内赚到了更多的钱。所以，曾经的奢侈品，都会随着技术的提升慢慢变成消费品，比如电话，电脑，汽车，如今已经走进了千家万户。</p><p>岛上还有些人，没什么特殊的技能，只能出卖自己的劳动力，给别人打工，从而获得收入，这时候那些雇佣他们的人会怎么想呢，如果雇佣一个人，一天能抓到 2 条鱼，每月 60 条鱼，他可以分给他 50 条，作为工资支付，而自己留下 10 条，不会把 60 条鱼全都给他，那样就失去了雇佣的意义。所谓雇佣就是要占用别人的价值所得。但当前社会的最低工资标准，却违背了这个原则，比如最低工资每小时 8 美元，那么这个人只能创造 6 美元的价值，那么他将面临失业的风险，所以从这个侧面来看，最低工资其实是让低端劳动力就业更加困难了。而对高端根本没影响，老板有钱赚的时候，他是不会吝惜工资支出的，比如你给他一年赚 1 个亿，他给你 8000 万的工资都是可以的。因为你要走了，他连剩下那 2000 万都没有了。相反你一个月创造 800 块钱的价值，原来他给你 700，你还能糊口，现在说最低 1000 起步，那么老板雇佣你他亏掉 300，所以他宁可不雇人，找人兼职去做这个工作。等于老板没吃亏，兼职那哥们没吃亏，最吃亏的就是这个等米下锅的穷人。所以倒霉的永远是穷人，你越保护，穷人就业就越困难。其实每个人无论是就业还是创业都是风险和收益的选择，比如在这个小岛上，每个劳动者都有三个选择，1 省吃俭用，然后自制渔网，2 贷款购买渔网，3 为有渔网的人工作，分别对应的就是先储蓄然后再创业，贷款创业，替别人打工。比如有个岛上的新移民 A，他身体强壮，所以他的天赋在于做搬运工，替别人搬运捕好的鱼，它能够赚的更多。而另一个移民 B，利用贷款做了一辆运鱼的推车，这两个人形成了强劲的竞争，当然用车来搬运肯定效率更高，A 收取 2%的服务费，他一天能搬运 100 条鱼，而 B 则收取 1%的服务费，因为他能运送 300 条鱼，所以算下来，B 还是比 A 赚到的更多。当然 B 也看到了问题所在，A 要比他强壮，现在干不过他完全就是因为这个车的原因，如果 A 也有他同样的车，那么估计 A 就能每天运送 400 条鱼。于是 B 找到 A 给他提供了一个工作选择，让 A 用自己的车去搬运鱼，并承诺付给 A3 条鱼的报酬，自己坐收一条鱼的利润。A 接受这个工作，显然比自己傻干更加划算，收入也更高。而 B 其实看似收入降低了 2 条鱼，但他是躺着赚钱，不再付出任何劳动，这样他就有更多的时间去造他的运鱼车，每造出一辆车，他就可以每天躺着获得 1 条鱼。另外，运鱼车越来越多，岛上的居民也享受到了福利，运鱼的成本就全面下降了。所以每一个贪婪的资本家背后，都做出了利国利民的举动，这就是市场经济，当人类的贪念汇集在一起的时候，却让市场的效率越来越高。</p><p>一名员工你的价值在哪？不在于你需要多少钱，也不在于你什么学历，而主要在于三点，需求，供给以及生产能力，换句话说，需求就是人家需不需要你的技能，供给就是你具备了多少能力，生产能力就是你在工作岗位上的完成度。比如你说你英语 8 级，但是人家是个物流公司，甚至全程用不到英语，那么你的技能包就没用。相反如果你去一个翻译社，那么你的技能就比较值钱，此时如果你再搭配一些其他技能，比如投资或谈判技术，那么这种人才正是投行需要的，所以就能够创造更大的价值，自然收入也会更高。所以下次你去找老板谈薪水的时候，千万别说你们家刚买了房子，老婆生了二胎，这个跟老板半毛钱关系都没有，你一定要告诉他，你会什么，可以为他带来多大的价值。这才是他给你涨工资的理由。</p><p>咱们读到这，有人已经提出问题了，如果生产力不断提高，价格下降，那么会不会引发通货紧缩呢？是的，货币紧缩就是一种货币现象，说明流通中的钱越来越少，造成了物价下降。这是凯恩斯主义经济学家们最不愿意看到的现象，如果物价下降，那么就会伤害企业利润和工作的积极性。最后会造成工厂不赚钱，工人失业。但是作者说，价格下降并不一定影响特定行业的发展，比如汽车，当福特的 T 型车被造出来大量进入家庭的时候，汽车的价格就出现了明显的下降，但对于汽车行业以及消费者来说，这都是大好事，还有电脑的大幅降价，也让计算机行业蓬勃发展。所以，在经济中，起决定作用的不是消费，而是生产。事实上人类的消费永远得不到满足，他们现在不消费，是因为你没有生产出他想要的产品，或者你现有的产品他觉得并不物有所值。比如房子大家现在都想要，但是太贵买不起，那么你让他成本降下来，大家都买的起了，社会消费也就上去了。当然这是不考虑投资属性的前提下。作者说，沃尔玛就是做的这样的生意，他通过集中展示，从而降低商品价格，通过量来补价，通过周转弥补利润率的不足，所以赚到了很多的钱。直到亚马逊电商出现，获得了一种比沃尔玛更低利润的销售方式。关于通货紧缩的问题，这本书后面还会提到。</p><p>我们还是继续回到海岛上，随着岛上的鱼越来越多，现在储蓄鱼成了巨大的问题，把鱼存放在家里已经不安全了，有可能会遭遇盗贼。另外，他们也想去拿鱼投资，但是他们大多数人既没有这个精力也没有这个能力去分辨商业计划的好坏优劣。于是一个家伙叫做迈克斯，他嗅到了商机，他决定开一个革命性的行业。他可以帮其他人建一个巨大的鱼池子，然后把岛上居民的鱼都存在里面。还可以专门找人来看守。但迈克斯继续想了，这个鱼池子该怎么盈利呢？如果收保管费，第一利润空间有限，第二也会让其他人望而却步，不愿意花这个钱。于是他就找来一些更擅长投资和放贷的人，跟他一起干，利用这些鱼去赚更多的鱼，不但不收取存管费，反而还付一定的利息给过来存鱼的人。这样就构成了一个存贷款公司，也就是一家银行的雏形。由于迈克斯天天都要去看项目，所以他对于这个岛的经济更加了解，他来根据这个银行的经营状况，来制定相应的利率。他尽量的用最高的储蓄利率吸引存款，用最低的贷款利率向外投资。只要有利差，他的生意就成立了。</p><p>但是问题是琐碎的，有的时候年景好，岛上的存鱼量暴增，但是可贷款的项目不多，银行的收太多存款是要付利息的，这时候他就要降低利率，降低自己的成本，也同时刺激别人来贷款。而有的时候，大家对岛上的经济信心爆棚，都自己拿鱼去高风险投资了，存鱼量减少，贷款的到很多，这时候他就要提高利率，让存鱼变得更加有吸引力，同时也提高了贷款利率，给贷款降温。此时，由于存鱼不足，迈克斯也怕贷款人不还钱，所以他提高利率，也增加了这种风险补偿。这么调整下来，出现了一个神奇的情况，那就是利率提升，会抑制岛上的经济增长，而利率下降，会让更多的钱流出银行，从而刺激经济。这就形成了经济周期波动。另外，由于储蓄还有利息，于是大家为了明天更好的生活，也都不约而同的延迟享乐。所以岛上的储蓄更多了，抵御风险的能力也更强了。在迈克斯的精心经营下，岛上的储蓄不断增长，商业也不断的发展。迈克斯的秘诀其实也很简单，那就是他放贷款的时候，一般会拒绝那些高风险不靠谱的项目，也不会放度假贷款和消费贷款，只有那些能够提升劳动生产率的贷款他才会放款。于是那些脑子活的人，都痛恨迈克斯，他们最后决定绕开他的银行自己募集资金，一些富有冒险精神的岛民，也愿意拿自己的血汗钱参与这种赌局。但这其中也有不少是因为无知，被裹挟进去的大爷大妈。</p><p>这就是金融市场，迈克斯其实扮演的就是美联储和银行家的角色，他通过利率来调节岛上的经济，而他的考量因素就是风险和收益的关系，但现如今的美联储并不单纯，他还会掺杂很多的政治因素，比如总统大选，会给美联储施压，让他降低利率，推动经济繁荣，这样执政党就有机会获得更多的选票，谋求连任，而美联储也是压力很大，因为美联储主席虽然名义上不归美国总统管理，但是他得有总统提名。而在咱们这，央行肯定得服从政治的领导，经济金融都得为政治服务。</p><p>我们还是回到小岛上，继续讲经济，岛上现在基本解决了吃饭问题，但喝水问题仍然麻烦，之前大家都是拿着容器去打水，现在有了农业了，干旱就比较麻烦了。所以大家迫切希望找到一种办法来解决吃水和灌溉的问题。聪明的渔民艾伯，当然这时候已经是老艾伯的第五代孙子了，他想到了办法，那就是将雨水汇聚在一个水塘里，他设计了一个雨水收集系统，然后铺设管道，将水引导需要的地方去，但是他发现这个工程有点太大了，所以他申请 18 万条鱼的工程款，这些鱼够 250 名工人，吃两年的。银行家觉得这个项目尽管费用很高，但是可以造富岛内居民，值得冒一冒风险，但他也有一个难处那就是岛上的存鱼不够了，于是他们又想了一个办法，叫做边施工边收益，并且银行出面，向岛民集资，发行公债，岛民当然也愿意用鱼来换取饮用水，所以这个项目其实真正启动起来的资金就要少的多，而一旦启动起来，他就能自我运转，通过收入来偿还贷款和支付费用了。自来水的出现，让岛内的工业和农业，以及居民的生活全都得到了非常大的改善。生产效率大大提高了。</p><p>说点现实的事情，作者的意思就是，基础设施投资不是不可以，但一定要把钱投到能产生价值的行业领域里，让政府投资和基础设施建设成为提振经济的直接手段，相反如果造完了产业新城，没人去住，修完了高速公路没车去跑，这笔投资就被浪费掉了。如果私营部门去投资，通常来说都是有效率的，如果不赚钱，也亏的投资人的钱，但公共部门投资就不一样了，这是政府运营的，拿的是纳税人的钱，如果不赚钱，就相当于挥霍掉了纳税人的钱，纳税人在不知情，也不能反对的情况下， 就这么被剥夺了财富。但很可惜，现在越来越多的这种情况发生，甚至出现了为了修路而修路的恶劣情况。</p><p>随着岛上的经济发展，他的产品已经越来越多，超出了自身的需求，于是他就要开始跟别的岛屿做生意了。一些鱼，冲浪板，独木舟，衣服，都被装上船运往其他岛屿。用于交换其他岛上的一些特产。比如这个岛上的鱼多，而别的岛上的椰子多，刚好他们交换过来，而不必非得在这个不擅长生长椰子树的岛上，强行种植！这本身就提高了各个岛屿的效率，也惠及了其他岛屿，别的岛屿可能没有这个岛先进，但他们就是有大量的自然资源，香蕉和椰子有的是，所以他们也不必再去生产渔网捕鱼，现在只需要把这些取之不尽的椰子和香蕉送出去，就可以收获大量的新鲜海鱼。所以国际贸易，其实跟国内的行业分工是一样道理的，当分工出现，才会利益最大化，效率最大化。每个人都可以做他擅长的，而规避他不擅长的。我们所说的管理学其实就是物尽其用，人尽其职，把合适的人放在最合适的岗位上，这样他就能发挥最大的作用了。整个组织的效率也就提高了，而治理国家也是一样道理，治理国际贸易也同样如此。</p><p>不要总担心别的国家进口的东西比你便宜，扼杀了你的其他产业，比如中国出口给美国的 T 恤很便宜，比他自己生产还便宜，这其实就是可以让美国人民少花钱，从而省下钱，可以支付到其他的产业之上，比如电信又比如科技产品。而中国从美国进口的大豆和猪肉，也比自己种植便宜的多，那么我们老百姓在吃喝方面剩下来的钱，也可以用于其他部门的消费。有人总说国家安全的问题，总担心美国人犯坏，不给我们粮食。如果那样的话，日本人应该更倒霉，显然日本的粮食生产更加匮乏。那么美国人为什么不断了日本人的粮食呢，说白了还是利益。没道理跟利益过不去，日本在粮食上受制于美国，在一些高精尖的电子设备上，他也制约着美国，日本离不开美国，美国也离不开日本。中国也是同样道理，一场贸易战打下来，你到底有什么东西，能掐住美国人的脖子，这是最重要的。至于这个东西是不是非得是芯片，其实也不一定。但思前想后我们发现没有，我们都在产业链下游，最强大的产业是房地产，干脆就不参与国际竞争。中国排名前几位的公司，不是国有石油就是国有的银行，要不就是开发商，这东西实在没什么话语权。你现在也只能用市场威胁他了。不进口你的大豆，不进口你的飞机，但这种东西，虽然可以恶心美国，但却造不成致命伤害，反倒是美国人不出口你芯片，中兴立马就趴窝了。所以我们得要好好想想了，怎么才能往产业链上游爬爬，这样才有互相制约的力量。你才能够安全。说实话，什么白酒，房地产，石油，银行，这些窝里横的行业，成为最强产业的时候，其实我们在贸易上已经输了。无论你有多少顺差，你都得受制于人。</p><p>我们还是回到这个小岛上，随着人口越来越多，环境也越来也复杂，一些人干起了打砸抢偷的勾当，严重干扰了岛内居民的生活，此时他们必须要联合起来，也要找出自己的领袖。但他们也害怕这个领袖会反过来压迫他们，限制岛上的自由，所以他们还要成立议会，由 12 名参议员组成了参议院。他们还要建立一支海军，配备长矛和独木舟，用来保护岛上的安全。当然也需要一小部分警察，维持社会治安。海军和警察以及政府的开支，都有全民来承担，这就要在他们的经营活动中，收取一部分税金，用于公共开支。其实这就是人民与国家的关系，人民自发形成管理组织，从而形成政府，而政府代替人民意志管理国家。保护居民的财产安全。从财务关系上，人民缴税供养政府，而政府花的每一分钱，都是属于纳税人的。所以我们之前讲的，人民公仆这个概念还是非常准确的，而官员这个词，其实十分的不适用于现代社会。古代讲普天之下莫非王土，天下都是皇帝的，官员是为皇帝服务管理国家的， 而人民和人民的财产也都属于皇帝的。但现代民主共和国制度，完全不一样了。人民才是一个国家的所有者，所谓的官员，都是替人民打理国家的人。顶多算是家里的管家或保姆，那么你看到管家和保姆天天锦衣玉食，奢侈无度，花着你的钱，占着你的房，还什么也不干，你要找他办点事，他对你吆五喝六你会怎么想？</p><p>作者说了，政府的权利过大，人民的自由就会更少。你渴望政府更多监管，更多调控的时候，你的自由就会被限制，而别忘了自由才是经济活力的根本所在。无法自由的失败，也就不能自由的成功。适当的监管还是必要的。主要看这个度的掌握，自由创造经济活力是没错的，太多的干预自由肯定导致经济活力下降，但也不能放任这种活力无限制的膨胀下去，该出手的时候就要出手，主要体现在信心的救助上。就跟投资一样，净值暴涨暴跌肯定不是我们追求的，我们希望的是稳定长期的增长。所以涨的时候让他有节制，跌的时候也要有最后贷款人托底。这才是宏观调控的关键所在。而在不涨不跌的时候，或者没有到悲观和疯狂的时候，那只闲不住的手，最好还是从经济的管控上拿开，你上下乱摸的越多，经济的活力就会越差。举个例子，深圳靠什么起来的，不是振兴，而是开放。为什么东北救不过来了，大家调侃，东北越振兴，海南就越受益，拿了振兴款的东北人全都奔海南了。所以能振兴起来才怪。</p><p>在这个岛上，由于大家捕鱼的技能越来越强，所以最后只需要少数的渔民就可以维持整个岛上的食物供给，而更多的人则投入到其他的行业中，比如装修公司，医院，娱乐公司，运输公司等等，经济的增长，也给政府支出提供了更多的资金。在政府中工作，也越来越有吸引力，有一个叫做弗兰基的人，他就天天琢磨，如何赢得岛民们的支持？他想如果能找到一个办法，让岛民们以为免费获得了一些东西，那么他就能获得支持了。而实际中，政府官员并不参与生产和捕鱼，所以其实都是羊毛出在羊身上。他要赢得议员选举，于是就鼓吹到，台风过后，给我们造成了很大的损失，如果我当选，我会制定一个政府重建计划，来弥补公民的损失，他还向岛民承诺，所有重建的资金，都是有政府来支付。这么一说，岛民们以为白得了好处，当然纷纷举双手赞成。于是弗兰基当选议员。但是弗兰基当选之后却犯了难，因为他没有足够的储蓄，去实现他的承诺，此时他灵机一动，开始发行鱼票，用这种纸币可以到银行去兑换同等数量的鱼，当然如果你不想兑换，拿着这样的纸币也可以直接消费。</p><p>刚开始老百姓也是将信将疑，觉得这活生生的鱼，就这么变成了一张擦屁股纸，能行吗，但没多久他们就开始习惯了，于是纸币就流行起来。确实生活上方便了不少。此时的银行家开始担心了，政府印刷的钞票太容易了，能不能始终保持跟银行里的存鱼数量相等呢？如果政府多印出去很多钞票的话，那么大家又都来银行提鱼，那岂不是银行就要破产了。这种担心不无道理，很快弗兰基印刷的纸币，就超过了银行里面的存鱼数量。随着大家的提现，银行里的存鱼也是越来越少了。于是银行家慌了，他觉得被弗兰基骗了。于是到政府去抗议，说你发出了 10 张钞票，而我只有 8 条存鱼，这活没法干了，你必须马上停止发行鱼票。并提高税率，我们要恢复储备。</p><p>当然弗兰基是不会同意的，他当时竞选承诺就是扩大支出，为老百姓带来福祉。所以你让他加税缩减支出，这无异于让他自己扇自己的脸，但他肯定也知道这么下去有问题，于是就想了个歪招，那就是去拼接制作，他把八条鱼摆在一起，然后在从垃圾箱里翻出来一些鱼骨鱼头，通过各种拼接，竟然用胶水粘出了 10 条鱼的模样。他信誓旦旦的说，民众永远不会发现。银行家惊呆了，不得不佩服这个骗局相当精明，往鱼里兑垃圾的方式迅速增加了储备。但金融知识告诉他，财富并不会凭空出现，这种手法就是纯粹的造假行为，储户早晚会看出来，你们的官鱼，比真的鱼要小一圈。银行家很担心，一旦大家都不来存鱼了，储蓄很快就用尽了。弗兰基却不在意，我们可以成立捕鱼部门，通过国营的方式，来保障鱼的供应和储蓄。然后为了打消储户的疑虑，他们还可以再成立一个保险公司，为他们的储蓄担保。这样老百姓就会很放心了，他们只要不来提款，那么发行多少鱼票就无所谓了。这个有良知的银行家，仍然不能同意，然后就没有然后了，很快他就出现了意外事故，溺水身亡了，一个政府委派的新银行家，掌管了银行，并严格的执行了纸币发行任务。</p><p>在历史上，美国出现过持续的通货紧缩，直到 1913 年美联储成立，发行纸币，并承诺纸币持有者可以兑换成黄金，从而取代了私营银行发行的钞票。自打美联储出现之后，美国的物价就开始不断上涨。说明他们拼接了越来越多的垃圾鱼。一开始是 9 条鱼拼 10 条，后来 8 条拼十条，现在是半条鱼拼 10 条鱼。在过去的 100 年时间里，美元币值损失超过 95%，美元的持续贬值，制造了通货膨胀，也让政府的支出可以肆无忌惮的大于财政收入。为了达到这一效果，美国曾经一度禁止私人拥有金币，这是赤裸裸的掩盖黄金资产不足的真相。</p><p>由于鱼票的发行，弗兰基终于可以兑现竞选的承诺了，一些政府拨款支持的项目，也让大家受益，为了让大家安居乐业，弗兰基还让政府拨款，雇佣工人，清洗岛上的石块，具体为什么要让石块闪闪发光大家也不知道，但是都有工作了，反正就是挺开心的。而这些人也很高兴的又把支持票投给了弗兰基，所以使得弗兰基可以继续当选。</p><p>但是问题也随之出现了，由于打鱼这个事已经被收归国有，这就让打鱼的人都变成了政府公务员，所以他们失去了冒险精神，开始出工不出力，岛上捕获的真鱼数量远低于鱼票增长的数量，所以假鱼就比真鱼小的越来越多。不久后，岛上的居民发现，原来一条鱼够吃一天，但现在吃不饱了，甚至要吃两条鱼了。由于大家都用鱼来当一般等价物，所以原来一天的工作量就是一条鱼，现在变成了两条鱼，那么也就意味着所有的东西都要涨价一倍。如果你不涨价，你就要饿肚子了。这时候那个被政府任命的银行家站出来解释，说这是因为经济繁荣，造成了对鱼需求的增加，所以推动了物价上涨。所以通鱼膨胀是正常现象，有利于经济增长。在这么一番解释之后，大家也就认同了这种说法，但有两件事以后也就雷打不动了，官鱼在没有变大过，而物价也再没有下降过。老百姓开始发现有点不对劲了，他们从银行里拿出来的鱼要比存进去的鱼小很多，所以他们已经不愿意储蓄了，有的人开始反过来，既然我储蓄会被通货膨胀吃掉，让我吃亏，那么我就借债消费，这样我就变成了通货膨胀的受益者。所以储蓄大幅下降，债务越来越高。这种观点逐渐成为共识，人们就必须抓紧消费，否则会让自己的鱼受到损失。最倒霉的就是退休人员，他们本以为能维持 20 年的储蓄，结果几年就用光了。此时他们也已经没办法开源，所以只能节衣缩食，开始饿肚子。</p><p>银行的存鱼量减少，他们也就没办法再像过去一样贷款出去，于是企业开始拿不到钱，或者利率更高了，大量企业因为支付不起利息而关门倒闭，很多人因此下岗。这时候大家普遍的感觉就是，对鱼不放心，跑不赢通货膨胀，那就亏死了。于是还有结余的家庭就把鱼交给风险投资人去打理，也就是进入资本市场，企图赚到更多的鱼回来，从而抵御通胀的威胁。此时政府发现人们的需求已经不再是拥有更好的基础设施，而是希望就业，所以政客们就利用这个诉求，赢得竞选，但是维持就业，其实殊途同归，也需要不断的增加鱼票的发行，然后才能雇佣更多的工人去擦石头。</p><p>作者说，很多人故意在混淆概念，物价上涨只是通货膨胀的结果，而并非原因，说到底还是因为钞票印多了，而引发的恶果。这个事呢反正一直在争论，奥地利市场价经济学派，就比如作者，他们认为，经济不景气，物价下跌，这样反而有利于缓解就业压力，当物价下跌到一定水平，人们就又开始消费了，但凯恩斯主义认为，物价下跌陷入通缩会让经济掉入万丈深渊，进入一个负向循环，所以必须通过超发货币，来推升物价，让企业有利可图，让大家消费，从而为经济恢复活力。企业都倒闭了，人都下岗了，就更不敢消费了，越是不敢消费，企业就越倒闭。这种事在美国大萧条时期已经验证过了，但奥地利经济学派始终不服，觉得罗斯福新政拯救了美国经济就是因为赶上了二战的巨大需求，如果不是二战，你凯恩斯主义也没招。这话有一定道理，历史不能假设，二战对于美国需求的拉动作用确实不容小觑。还是回到这个小岛吧，银行家犯难了，说银行里已经没有存鱼了，由于政府已经换届，弗兰基下台，所以一些议员建议把真相告诉大家，然后让弗兰基去背锅。但此时又来了一个聪明人叫做伯南柯，其实就是影射曾经的美联储主席本伯南克，这个傻子都能听得出来，所以我们干脆就用伯南克这个名字，他说我有办法，现在是民众失去信心的时候，如果我们现在开始消费更多的鱼票，人们的信心就会恢复，这就是所谓的站在直升机上撒钱的策略。</p><p>这本书的作者接下来还影射了我们，说有一个中岛帝国，说这个地方不发达，经济落后，捕鱼的人手段很原始，他们也吃不饱，而这个帝国的高层却是锦衣玉食。但国王很聪明，他要借鉴先进岛屿的发展经验。而且发现，鱼票这个东西，可以用于贸易交换，所以中岛帝国就提出，用活鱼来交换这个鱼票。伯南克他们一脸懵逼，用一堆纸换一堆活鱼？他们不敢相信幸福来得如此突然。所以他们毫不犹豫向中岛帝国敞开了大门。在交易的时候，他们唯一要注意的就是，一定要强忍住笑。此时的伯南克如释重负，有鱼了，他的鱼票又有了价值。而中岛帝国他们拿到这些鱼票之后，自然有自己的打算，他们拿着这些鱼票到这个先进的岛上买各种先进的工具和技术，然后提高中岛帝国的捕鱼效率，大量的渔网，独木舟，都被采购走了。买走这些后，还剩下一些鱼票，他们就把这些鱼票存在这个先进的岛上吃利息。于是局面一下子又不一样了，这个先进的岛，作者管他叫做美索尼亚岛，说白了就是美国，他本国的消费能力有限，所以才物价下降，现在不一样了，有了中国帮他一起消费，所以国外需求，推动了他的经济增长，而从中岛拉来的大批量的鱼，也让贷款增加了。这就使得美岛的金融可以持续扩张，印更多的鱼票出来。很快美岛的通胀消失了，物价不再上涨，由于大量真鱼的出现，美岛的人们发现，鱼又大了起来，已经够吃了。而反观中岛，发展也是日新月异，大量先进技术的涌入，让这个岛的生产效率越来越高。他们也捕捉了更多的鱼，另外，他们还按照美岛的技术，在自己的国家内开设工厂， 按照美岛居民的喜好，生产东西。然后卖个美岛。中岛的储蓄就越来越多，中岛反过来又把储蓄借给了美岛的政府和岛民。</p><p>这其实就是典型的中美关系，在这种贸易中，美国人占了好处，他们不用生产就可以获得商品，不必储蓄就可以获得借贷，而对于中国人来说，需要不断的劳动生产，但自己却不能消费。之所以我们还心甘情愿，是因为可以通过这种方式快速的完成积累，我们有一个梦想，有一天可以像美国人民一样的消费，这个梦想支撑着我们只劳动不消费。但最后我们发现，努力的越多，换回来的那张纸就越多。而那张纸却在不断的贬值。现在这种关系中，其实更加感到不安的是美国人，这种靠中国供养的时间越久，美国的竞争力就会下降的越快，一旦中国跟美国差不多了，或者美元失去了世界的统治地位，中国就会一脚把美国踢开，所以美国人必须居安思危，努力打破这种关系，第一他要开始防范，中国用外汇储备大量采购他的最先进技术，第二也要维持中美贸易平衡，抑制中国的同时，必须让美国的生产制造开始恢复。否则就是在养虎为患，或者说教会徒弟饿死师傅。</p><p>我们还是回到这个小岛上，中岛帝国的大量储蓄涌入了美岛，使得银行有钱了，于是贷款利率大幅下降，美岛的投资热情越来越高涨，但是捕鱼和制造已经全部外包给了中岛，他们现在几乎无事可做，于是只能是吃喝玩乐。而在这中间，冲浪的娱乐活动大受欢迎，从学校，到比赛整个产业链越来越健全。甚至冲浪学校周边的餐馆，网吧也都活跃起来，这也就是说，美岛在制造业纯粹靠进口之后，产业开始向服务业转型。所以这就出现了一个新的情况，一个岛主要负责生产，另一个岛主要负责吃喝玩乐的消费。中岛的人民到现在为止还没有得到任何好处，他们更忙了，忙到没有时间消费，但他们仍然做着那个以后靠储蓄就能衣食无忧的梦，但他们忽略了一个问题，美岛其实连自己都养不活了， 他们的那些钞票也就根本不可能兑现价值。我们之前说美岛把捕鱼和制造业包给了中岛，那么反过来也可以说，中岛把娱乐和消费外包给了美岛。这其实就是全球经济失衡的局面，所以美国要求弥补贸易逆差，其实就是在为自己纠偏。他们已经意识到，原来的套路快要玩不下去了。因为顺差本身就是一个削弱美国，和缩小竞争差距的过程，中国要对美国一直顺差， 那么用不了几十年就要超过美国，然后美元就玩不下去了，美国就会像当年他打败英国一样，被中国一脚掀翻。再也翻不了身。</p><p>再说中国方面，如果让货币一直比较弱，那其实就是在用出口补贴进口，以牺牲人民生活为代价发展经济，所以人民币升值的这十几年，我们的生活才有了更大的变化，当然我们也有点特殊性，就是人民币的结售汇制度，对外升值，导致大量外汇流入，然后换成人民币进入国内，国内人民币多了，就开始在国内贬值，通货膨胀没起来，地产泡沫起来了，所以形成了外升内贬的局面，大家的幸福生活，又都被房价这个东西给对冲掉了。大家想象一下，如果现在的房价，跟 2008 年的水平持平，那么基本生活就真的很幸福了。</p><p>美岛上突然遭遇了台风，于是很多国家开始担心渔票还能不能顺利兑换，大家都想先把钱提出来，而美岛也知道问题所在，所以他们只能继续将鱼票缩水，最后美岛撑不下去了，于是就宣布，鱼票和真鱼脱钩。鱼票不再兑换真鱼，这下银行里的真鱼保住了，但鱼票的价值暴跌。但由于美岛的经济和科技实力还在，所以鱼票并没有沦为擦屁股纸，在贬值了十之八九之后，终于稳定了下来。</p><p>后来，美岛又换了领导，降低了税收，放松了管制，但政府的收支差距还在扩大，好在国外的鱼还在源源不断的涌入银行，美岛的鱼票，仍然是最流行的货币。慢慢的美岛经济开始了复苏，大家都听得出来，这段主要写的就是，尼克松宣布美元黄金脱钩，布雷顿森林体系解体，说白了就是美元发的太多，黄金已经兑换不起了，所以尼克松才灵机一动，钞票要多少有多少，但黄金不能流失，所以才耍了一回无赖，好在当时世界上，没有一个货币能挑战美国的地位，所以也是因为命好，才给里根的供给侧改革提供机会，但是里根却仍然没有有效解决美国的收支问题，所以财政这个漏洞，仍然越来越大。</p><p>下面我们要讲大家都更关心的问题了，那就是房价问题，还是回到这个小岛上，查理冲浪公司，成功转入了服务业，但银行给他们提供贷款的时候还是比较谨慎的，他需要一些担保，于是就盯上了房子，不动产这个东西很好，谁也拿不走，就放在那，老话讲跑得了和尚跑不了庙，所以押房子是银行最得意的风控手段。一开始美岛上都是自己建房子，要求也很朴素，结实耐用，够住就行，但后来经济繁荣，利率下降，大家就开始要改善居住环境，但是呢又懒得自己盖，于是开始向银行申请贷款，然后买现成的房子，可以直接入住，银行由于手里押着房子，还有借款人的首付，所以觉得这种贷款的安全性很高，他们都愿意发放这种贷款，而不愿意借给那些前途未卜的企业家和创新公司。但这时候也有一个问题出现了，富人手里有资产，房子也很多，所以他们总是轻易借到贷款，而穷人则没有稳定的收入，银行就会小心谨慎，这就导致了，富人的利率更低，穷人的利率更高，多出的这部分就是风险补偿，有的穷人，你愿意高息借钱，银行也不敢借给你，所以富人越来越富，而穷人则好像被剥夺了致富的权利。</p><p>为了圆美岛居民的住房梦，美岛的政客们，创造了两个官方机构，房地美和房利美，为房子贷款做担保，那意思就是你们大胆贷款，赔了算我的。这下银行们心里都有底了，反正出了事就找政府呗，于是就将利率一降再降，房子越盖越多，越卖越多，但是在这中间，穷人还是那个穷人，他该还不起钱，还是还不起钱，并没有提高还款能力，很多人都是通过房价上涨，然后卖掉房子，套利获的收入，然后再接着贷款，用套利的部分偿还利息，然后等房价再涨，卖掉再套利。所以房价上涨，掩盖掉了很多的问题。但是后面怎么办呢，房子都不用跌，只要房价不涨了，这些人也就还不起钱了，然后就开始形成坏账。</p><p>在楼市火爆的时候，看似经济繁荣，每个人都安居乐业，而且企业和个人都忙着炒房，无心在去创新和创业，所以实体经济下行，资产泡沫上升。美岛的经济已经摇摇欲坠。但此时那些金融和风险投资人站出来了，说我们玩一个游戏，向岛内的岛民提供了房屋置换贷款业务，你可以直接申请更大的贷款，偿还之前的贷款，然后还剩一部分可以落在腰包里。这一下，岛内的所有的有房子的人，几乎都可以免费得到鱼票。而金融和风险投资家这个游戏的唯一要求就是提高利率，也就是说可以给你们更多的钱，但利息必须提高，他要这个利息就是为了打包成理财产品，卖给其他的投资者，等于让投资者在为岛上的这些炒房人提供贷款。这样一来，岛上的居民瞬间就都有钱了，然后就开始不断的买房，他们把买房看成了一种稳赚不赔的投资。并信誓旦旦，为了岛上的金融安全，国家不会让房价跌。以前房子每年上涨几个百分点，现在每个月就涨这么多，一年就翻一倍。再差的房子也一大堆人在抢着买，似乎买到就赚到，根本不用担心能不能住的问题，因为没什么人真要住在里面。</p><p>局势发展的有点超乎想象，传统的支付标准已经不适用了，原来大家工作两三年，就能买一套房子，现在要工作 20 年，大家已经明知道负担不起了，但还在努力的负担，甚至不惜透支几代人的血汗钱和幸福，去为银行和地产商打工，支撑他们信念的只有一条，房价永远涨。虽然过着乞丐一样的生活，但是大家仍然感觉非常富有，总梦想着有朝一日，把房子一卖过上财富自由的生活。而在市场中，也有很多意见领袖，发表着对于楼市的看法，他们说，楼市崩溃简直天方夜谭，现在金融支持力度前所未有，而且经济欣欣向荣，房地产繁荣，就是经济腾飞的标志。这中间也有几个人表示了担心，但他们看衰楼市的声音，总会引发老百姓哄堂大笑。嘲笑这些经济学家是书呆子，你可能懂经济，但却不懂美岛。不懂新时代。</p><p>作者写这段，就是美国次贷危机之前的情况，大量金融衍生品的出现，让美国的楼市过度繁荣，大家都开始热衷于炒房，还给这种炒作赋予了无数的借口，有一点老百姓说对了，国家不希望楼市崩盘，事实上没有一个国家希望楼市崩盘，所以他们会尽一切可能去维持楼市泡沫，这种呵护有加的政策和表态，又变相刺激了泡沫的进一步膨胀。最后一定的到了不可挽回的时候，泡沫才会破裂。而之后政府又大比例的投入到救市当中，作者说，这种做法实际上就是加大了政府的投入，让大家误以为政府会在背后撑住房价，而结果就是，下一次会摔的更惨。</p><p>还是回到这个小岛上，谁也说不清楚，为什么好好的楼市，突然就不涨了，某一个项目突然烂尾，引发了全岛上下的恐慌，然后这种恐慌不断的被放大，一个项目一个项目的传导下去，大量的投资人在房地产投资这个事情上损失惨重，而不少普通家庭，也开始纷纷出售他们的房子，想赚取差价，等未来再重新抄底。但是金融市场上有个风险就是共振，一旦一个时间大家都往一处想的时候，就麻烦大了，一夜之间，市场上全是卖家，再也没有买家了。这时候出现了一个情况，房屋的价格不是逐步下跌，而是断崖式直线下跌。甚至你想赔本卖出，都根本无人问津。这时候，那些高杠杆的炒家，以及想在里面发大财的普通居民全都傻眼了，本来他们希望通过房子快速的倒手，然后赚取差价，利用差价来归还利息，但房价一逆转，他们马上就连利息都换不出来了，而那些零首付的，或者低首付的购房人，都想着赶紧从巨额债务中脱身，所以干脆把房子甩给了银行。由于欠债的人越来越多，投资类金融机构破产，然后就是两房资不抵债，随即房地产行业萧条，影响了上下游大量的产业工人失业。然后岛上的居民，每个人都是负债累累，以前的高消费餐厅倒闭了，驴车也卖不掉了。甚至连服装公司都出现了销售困难。于是这个美岛陷入了严重的经济危机。</p><p>现在政府的当务之急就是要赶紧救市，让大家恢复信心，提振消费，尤其是重新开始购买房子，两房最先得到了援助，而救助的办法就是，直接印刷钞票，然后交给他们，有了这笔钱，两房就开始履行担保义务，给那些坏账擦屁股，他们想的挺好，房价暴跌，所以每个人都觉得很穷，就不敢花钱，而如果政府把房价再给推上去呢？那时候大家就又觉得有钱了，消费自然也就起来了。要推升房价，此时已经并不容易，除了要让两房继续放贷和担保外，还得降低利率和降低税费。甚至不惜 0 利率的代价，刺激大家消费花钱。</p><p>其实房子就是用来住的，我能理解政府复杂的心情，房子这东西建造太多本身就是问题，是资源的最大浪费，而且开发商也是高负债企业，如果房子卖不掉，那么开发贷就是坏账，所以他总想可丁可卯的建设，而这种挤牙膏一样的供应方式，又为房子提供了最好的炒作土壤，当大家都习惯用房子去投资的时候，那么建多少房子，也是不够用了。所以才会十次危机 9 次房地产。而一旦房子严重过剩之后，楼市将走入一轮长久的大衰退，比如日本在楼市泡沫破灭后的 30 年都没有缓过来，美国之所以能够缓过来，有他的特殊性，因为他是移民国家，所以有源源不断的年轻人口流入，所以在几个核心的城市，楼市的价格如今已经涨回来了，但在绝大多数城市，仍然没有起色。</p><p>接下来该怎么办呢？再刺激消费，还需要很多的钱，但刚刚经历经济危机美岛来说，已经没有钱了，这时候他们又想起了中岛，中岛愿意提供 10 万条鱼，但他们想买下美岛的自来水系统的技术专利，但这让美岛的领导犯了难，这东西卖给了中岛，岂不是要威胁国家安全了，于是开始了旷日持久的谈判，随后中岛很不情愿的，提供了 10 万条鱼的贷款。什么也没拿走。至于还款，美岛压根就不担心，他们已经虱子多了不咬，债多了不愁了，他们压根就没打算还钱。为了让中岛的人更相信，美岛接下来还发布了强鱼政策，说全面出动，捕捉更多的鱼，以支持币值和经济，但是强鱼政策基本只是说说而已，根本没有实施的可能。中岛也知道，此时他们手里已经攥了太多的鱼票，所以利益已经跟美岛绑在了一起，不帮他们，自己的鱼票也就全打水漂了。所以这就算还有一丝幻想吧。</p><p>美国后来也是为了抑制泡沫，而开始小幅加息，但正是加息的举动，让利息还款压力越来越大，最后刺破了泡沫，后来为了救市，大规模刺激消费，为金融机构注资托底，然后展开一轮接一轮的 QE 政策，通过量化宽松来稀释货币的购买力，这种情况继续往下发展，基本只有 2 个结果，一个是美国拒绝还债，另一个是进一步加剧通货膨胀，让美元贬值。无论怎么样，美国的债权国，都是一个巨大的损失。但是现在已经上了贼船了，轻易下不来了。在美岛发生危机后，新一届领导班子成立了，但思路却没有改变，还是刺激，刺激，再刺激。印刷更多的鱼票，来注入经济。为了挽救失业，他们还在渺无人烟的沼泽地里建立灯塔，此时由于消费不振，驴车公司倒闭，因为这些驴太能吃草了，大家已经养不起他们了，美岛政府要求大家不用驴，而选择新的引擎骆驼，据说这种骆驼吃草量要小的多。</p><p>现在有三条路可走，一个是减少消费用储蓄还债，二一个增大产量，多出口然后还债，第三个是追加贷款，保持现有的消费水平。前两个都意味着美岛的老百姓要吃苦了，所以没人会同意，所以他们自然就想到了第三个，通过输出这种债务。让其他岛的居民买单。那么对于美岛的政府来说，只要能够不断的筹到钱，就仍然可以将这个经济模式维持下去。他们就可以源源不断的筹到钱，而中岛也确实买了很多的美岛债券，但问题又来了，由于中岛买入的太多，所以美岛鱼票反而升值了，这样中岛的产品就更加的物美价廉，而美岛的产品则更加的没有竞争力。这时候美岛两难了，他们可以要求中岛少买点债券，让中岛货币升值，自己的鱼票贬值，但是这样一来，似乎又无法筹措到钱了。这又没办法支持他的消费计划开支。后来一想算了，还是先借到钱比较重要。就这样，美岛的债务越来越多，甚至树立在美岛上面的债务公告牌，都已经写不下那么多的 0 了。而他们想到的解决办法是，赶紧扩建一下债务公告牌，而并不是去如何削减债务。</p><p>这其实就是 2008 年以后，美国发生的情况。美国的经济复苏计划，其实就是大量举债为代价的，他借来大量钱后，也就意味着大量财富流向了美国，而欧洲不幸中弹，爆发欧债危机，随后金砖国家也纷纷出现问题。这就是 10 个锅 6 个盖子的游戏，当美国通过强美元拿走大量的财富之后，其他的地方的资产就会频频出问题，而美国的钱也是借来的，他通过举债，让财政平衡进一步的恶化了。并没有让经济实现再平衡。而美国如果跟中国一样，开始生产制造而高储蓄低消费，那么世界经济恐怕就要出大问题。比如 2018 年 4 月的贸易争端，特朗普就提出贸易平衡，让中国削减顺差，这种摩擦其实未必对美国有利。而对中国对世界肯定是有害。那么该有什么办法，能够让美国平衡，又让世界平衡呢？可以说没办法，就跟你现在不能说，我们家能不能既种地自给自足，又有工作参与社会分工是一样的，这个根本做不到，所以美国只要维持他的科技，金融，军事领先就够了。他就能够在全球经济体系中再平衡，而追求他一国的贸易平衡和财政平衡，其实意义不大。他已经借了这么多的钱，似乎也已经不太可能回到平衡的位置上了。就像世界永远回不到金本位了一样。</p><p>还是说回到这个小岛上，在这里经济复苏的时候，旁边一个历史更悠久的岛屿上却爆发着另一场危机，作者管他叫朱特尼亚群岛，我们简称朱岛。也是因为房子而起，情况几乎跟美岛一模一样，也是通过投资银行的高利息低门槛贷款，推升了炒房热。每个人都在畅想着，以后卖掉房子，过上及早退休的生活，这里也早就成了悠闲生活的代名词。但好景不长，美岛出问题不久，这里就重演了美岛的危机，原来很多美岛的投资客，都收回资金，然后回到美岛去救火了，于是这里就发生了热钱撤离的情况，朱岛很快就发生了金融危机，各种债务越积越多。银行全都岌岌可危。很快地产危机变成了金融危机，金融危机又成了政府债务危机，而他们可没有美岛那么好命，他们的货币没人要，所以不可能通过鱼票向其他岛屿募集资金，眼看这个岛马上就破产了。</p><p>就在这个紧急关头，IMF，也就是各个岛组织起来的渔民组织，他们马上推出了一个计划，从美岛借来大量的鱼票，将这些钱再转手借给朱岛，IMF 就作为了一个中间人的角色，有了这些鱼票，朱岛就能够恢复信用，偿还贷款利息，但此时朱岛上的人，仍然梦想退休，他们还是不想工作，更不想勒紧裤腰带还债，就想这么一直借钱下去。这可把 IMF 的鼻子都气歪了，为了给他们点压力，IMF 制定了一个刚性的要求，比如要求朱岛必须减少一定的政府支出，还要提高相应的税收。然后才能把钱借给你，但没想到的是，这得到了朱岛人民的集体反对，真是要饭还挑食，也真是没谁了。面对这样的局面，所有的岛屿都愤怒了，认为该从朱岛上撤出所有的鱼，让他们自生自灭，饿死了活该。于是更多的财富，又开始流向美岛，两害相权取其轻，大家觉得，都是一堆烂泥，相比之下，美岛还是有信用的，美岛的人也还愿意工作。所以，美岛就这样，把危机转嫁给了其他的岛屿，他们反而得到了更多的鱼。</p><p>此时的美岛正开展着定量鱼券计划，他不会直接把钱给老百姓，那样就太明显了，他把钱投向了风险债券市场，用于购买国债在内的各种债券，通过这种方式，往经济里打钱，国家和一些企业融到资后，就开始建设，然后就要雇佣工人，再然后经济就开始好转。消费多了，推动价格上涨。</p><p>其实一开始的朱岛，就是指欧洲五猪国，也就是葡萄牙，爱尔兰，意大利，希腊，西班牙，他们在美国次贷危机之后都出现了主权债务危机，说白了就是人太懒，钱太少，不够还债的，于是 IMF 进行了救助，提供了贷款援助，欧洲老大德国尽管不情愿，但也接受了这一现实，先保住欧元再说，希腊就成为了其中最典型的，臭名昭著的国家，他们短期工作，长期罢工，提早退休，又连续逃税，但自打他加入欧盟以来，他再想用赖账的方式或者货币贬值的方式来逃避债务，已经不可能了，因为你赖账，会严重的影响欧盟的货币和信用。赖不掉账，就坐地耍无赖，反正德法你得管我，要不我死了也得溅你们一身血。而欧洲的最大问题就是统一的货币却没有统一的财政，各国发展水平也参差不齐，没办法做到步调一致，你面对着希腊这种穷亲戚，只能去救助，别无办法。而欧洲的麻烦越多，钱就越往美国跑。最后，美国反而没事了。欧洲麻烦大了。</p><p>美国这边最后开展的 QE 计划，说白了就是美联储印钱出来去买各种政府债券，然后支持积极的财政，从而恢复经济。但作者说，用印钱的思路去挽救经济，就好比用汽油去救火一样。量化宽松也不过是通货膨胀的一种委婉表达。但其实从后面的结果来看，量化宽松是有效的，这种强干预，真的把美国从经济泥潭中给拖出来了。现在的问题是该如何平稳的退出量化宽松，在经济恢复正常之后，如何缩表的问题。所以非常时期非常的手段，没必要为了否定而否定量化宽松的作用。在美岛上，伯南克一次又一次的推动着量化宽松，一旦金融机构的钱快耗尽了，他就推出量化宽松二号，三号，于是大家都相信了，未来还有很多免费的鱼。在几个主要的地方房屋价格开始恢复上涨，信心也开始恢复，但大家也发现，银行里的鱼，跟真鱼比起来已经越来越小了。不过美岛上还有一个地方叫做股市，美岛的股市开始上涨，这打消了人们的担心。</p><p>几年之后，美岛的经济逐渐恢复稳定，伯南克开始谈了他的退出策略，也就是如何收回这些定量的鱼券。但作者认为，所谓退出策略都是谎言，只要定量鱼票不能继续下去，美岛马上就会重新资不抵债，房价暴跌，股市暴跌，经济萧条。作者说，通货紧缩有时候是有益的，这是经济的自我调节过程，就像感冒发烧一样，你得把火发出来，而现在的美国做法就是让你憋回去，然后使劲憋着，永远都不要发生通货紧缩和衰退。作者还狠狠的批评了 QE，第一轮量化宽松就一次性购买了 2 万亿美元的债券，市场恢复平静，但当这些债券到期后， 又有人出来警告，现在没人接盘了，美国将二次衰退，此时伯南克启动了 QE2，再次把这些有毒债券，接到了自己手里。然后伯南克就逐渐的将这些债券长期化，量化宽松也一轮接一轮的继续下去。但问题在于，股票价格和房价反弹的同时，失业率一直居高不下，实际收入停滞。美联储的退出策略，不过是逐渐的温和递减，每轮都少买一些债券而已，但其实债务是有利息的，对美国来说，如今债务只能不断扩大，债台高筑。所以作者最后的结论就是 QE 政策只是延长经济衰退的办法，而不是促进经济复苏的良方。<br>​</p><p>但真实情况并非如作者所说，失业率在前几年一直居高不下，但在近两年已经降低到了一个比较低的水平，美国在经济科技上的发展，这几年也取得了明显的进步，债务上升这是事实，但也许对他来说无所谓，只要美元还是世界货币，他就根本不用还钱，那么美元如何保持世界货币呢？说白了就是美国不能乱，只要他的科技、金融、军事还在全球领先，那么美元被取代的概率微乎其微。从前年开始，美联储其实也已经在加息缩表，逐渐退出 QE 了，国债利率也开始大幅上升，这都是正常的反应。但总体来说，美国这一把玩的还算是很漂亮的，这么快就从危机中走出来，伯南克的 QE 理论功不可没。至于作者说的，让经济通货紧缩，放任它出清，这个理论上有道理，但问题就在于没有成功的先例，在胡佛政府时期，基本就是这么干的，结果陷入了深深的大萧条。所以理论归理论，实践归实践，奥地利学派最大的问题，就是缺少案例支撑。他们提出的批评不少，解决问题的方法不多。历史曾经给了他们机会，但并不成功。</p><p>我们还是回到这个小岛上。由于鱼票持续的贬值，所以中岛人民也不干了，他们看到自己的积蓄不断的缩水，感到了沮丧，中岛人民很勤劳也有很多储蓄，消费很少，一门心思就等美岛还钱，然后从此退休。但现在这一切已经越来越渺茫，中岛国王也提出了抗议，威胁美岛不再购买鱼券，但美岛也反过来吓唬中岛，说美岛的高消费养活着中岛的出口企业，一旦咱两闹掰了，你的出口企业将会大规模倒闭，那时候你的社会就会动荡不安。中岛国王也慌了，有人提建议了，中岛为什么不自己制造自己用呢？这话触动了国王， 于是他决定试一下，试着让中岛的人也消费起来。把一些给美岛出口的产品，也放在国内销售。这样中岛对美岛的顺差就少了，而中岛购买的鱼券也就少了。所以就造成了鱼券贬值。旁边还有一个叫做小鼓岛的，也跟中岛一块，减少了购买鱼券。于是鱼券就掉入了万丈深渊。</p><p>此时最先郁闷的是中岛自己，他手里还握有大把的鱼券，鱼券贬值下去，自己的财富就大幅缩水了。照这个趋势下去，这种鱼券储备就会变成废纸了。一大批出口企业倒闭，但也同时出现了一批生产本国需要商品的企业。在随后的几年里，由于中岛居民的储蓄厚实，所以没有陷入危机，反而生活越过越好了。而反观美岛，鱼券不值钱了，官鱼也越来越小。岛上现在每人要吃 200 条鱼才够。另外，中岛现在进来的廉价商品越来越少，再加上本身就鱼券贬值，大家的感受就是物价飞涨。此时总要有人出来背锅，于是政府指责零售商们哄抬物价，趁机把商品定价权收归国有。他们以为通鱼膨胀就结束了，但恰恰相反，商品已经停止交易，黑市活跃，价格涨幅更大。老百姓开始把剩下的储蓄取出来，转到海外的银行去保值。但这个举动很快就被政策所禁止。</p><p>最后大家如惊弓之鸟，等鱼捕上来就马上吃掉。到现在为止，岛上没有储蓄，没有信贷，也没有了投资。政客们焦头烂额，希望搞一场更大的刺激来解决眼前的危机，正当他们盘算的时候，发现了中岛的船开过来了，他们以为中岛后悔了，还是过来贸易的，但结果却让他们大失所望，中岛带来了这几十年积攒下来的所有鱼券，他们推着一车一车的鱼券，走遍美岛的每个角落，然后见东西就买。驴车，冲浪板，自来水系统，科技公司。金融机构。中岛开启了全球购模式。这就是作者给美岛安排的结局，中岛采购光了美岛上一切有用的资产，然后扬长而去，留下美岛上的人，又重新开始制作渔网，向几百年前一样，去每天捕鱼。作者的观点还是财政平衡，防止政府过度的入不敷出，太多的刺激会让经济陷入混乱，也会让自己陷入债务危机的深渊。</p><p>看似政府可以通过通货膨胀， 来赖掉对内以及对外的债务，但财富是平衡的，发动通货膨胀，相当于把储蓄者的财富转移给了负债者，如果恶性通胀爆发，那么就相当于储蓄和债务全都一笔勾销了。所以可以想见，存钱的吃了大亏，而借钱的发了大财。最后必然打击所有人的劳动和储蓄的积极性。最后没有生产制造只有负债，结果就是相当悲惨。国家也会被债权国掏空。这就是本书的全部故事了，作者借助了一个小岛从原始社会到资本主义的兴衰过程，给我们推演了整个经济的发展历程，最后强烈谴责了 QE 政策，还有美国政府的经济刺激计划。他认为这并不能解决问题，只是把问题延后了，让贸易和财政更加的失衡，双赤字正在吃掉美国的未来。他希望美国悬崖勒马，尽快平衡贸易和财政，回到健康的经济发展轨道上来。</p><p>其实作者这个故事写的很好。也很好的给大家解释了经济的运转机制，确实是一本难得的好书，但尽信书不如无书，我们在本书的最后，并不同意这样一个结论。作者等于在最后否定了自我之前的观点，短期波动看需求，长期增长看供给，渔岛能够发展起来，是通过一轮一轮的技术革命，提高了生产效率，所以迎来了繁荣，而这种创新，在本书的后半部分就停止了，作者开始在存量里面去讨论供给和平衡问题，这显然是不合适的。而现实恰恰相反，我们最近 20 年，这种科技带来的生产效率不是减慢了，而是更快了，所以这本身就会提振所有人的预期。互联网革命，智能科技革命，已经将人类的生产力推升到了一个前所未有的高度，而这些创新和新科技，对于货币和负债都是有支撑的，虽然美国的负债在不断的扩大，但这并不会影响大家的信心，只要美国还是科技，金融，军事最强国，美元就还是储备货币地位，而之前美国最怕的能源问题，也随着页岩油的成功基本解决，所以这些都支撑着美国的经济稳定。中国要想取代美国，人民币要想取代美元，光靠我们手里的外汇储备肯定是不够的，我们还需要至少在科技和金融上，超越美国，还得在美国出现巨大麻烦的情况下才能完成弯道超车。所以这些都还任重而道远，现在最要紧的事，就是低头继续发展经济，减少对美国需求的依赖，发展供给侧内需经济，同时消除资产泡沫，降低房地产的影响。中国现在势头很好，我们增速要快于美国，处于追赶者的地位，但不能光顾看着对手，希望对手摔倒我们过去反超，我们要先小心的看看自己脚下的路，千万自己不要自己先摔倒。永远别忘了， 你刚刚超过那个哥们，他也一直在追美国，结果就因为步子太大扯到淡了，从 90 年开始就摔倒没起来，是的这个国家就是这本书里的小岛国，也就是现实中的日本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个岛上有 3 个人，艾伯，贝克和查理，他们在岛上生活很艰苦，食物更加稀少，唯一的一道菜只有鱼，而好消息是鱼有的是，但他们不会用现代的捕鱼技术，于是只能跳下水去用最古老的方式，用手抓鱼。他们每人每天只能抓到一条鱼，而这条鱼刚好吃一天，所以每天捕鱼成了这个岛上的全部经济活动。</summary>
      
    
    
    
    <category term="economics" scheme="https://github.com/categories/economics/"/>
    
    
  </entry>
  
  <entry>
    <title>结构性改革</title>
    <link href="https://github.com/2021/09/26/%E7%BB%93%E6%9E%84%E6%80%A7%E6%94%B9%E9%9D%A9/"/>
    <id>https://github.com/2021/09/26/%E7%BB%93%E6%9E%84%E6%80%A7%E6%94%B9%E9%9D%A9/</id>
    <published>2021-09-26T09:22:04.000Z</published>
    <updated>2021-09-28T15:39:25.841Z</updated>
    
    <content type="html"><![CDATA[<p>黄奇帆是唯一一个既有过实践，又懂理论的学者型官员，或者现在叫做官员型学者。<br>本书分为七大章节，1 是深入推进供给侧改革，第二章，去杠杆防范金融风险，第三章新时代资本市场的高质量发展之路，第四章数字化重塑经济社会生态，第五章也是大家最关心的问题，房地产长效机制建设，第六章是国企资本运作和地方营商环境改善。第七章全面开放，应对国际新格局。这本书看完，你应该对于当今之中国，会有一个更高层次的理解。而黄奇帆也是能够接触到高层思想的人，他的理解，可能多多少少也代表了一些高层的共识。<br>我们先来看，第一章，供给侧改革，这是 2015 年由领导提出的，具体的公式就是供给侧+结构性+改革，从供给侧的研究出发，用改革的办法解决问题，我们提出了三去一降一补，五大任务，也就是去产能，去库存，去杠杆，降成本，补短板。<br>我们的供给侧改革跟西方供应派改革是有区别的，美国 70 年代也发生了大滞胀，当时美国经济增长低迷，接近于 0，另一方面通胀率高达了 15%，里根总统之前，是美联储沃克尔在通过不断提高利率来遏制通胀，名义利率已经加到了 20%，但利率越高，经济越差，81 年里根提出了经济复兴计划，削减税收和社会福利，刺激经济增长，减少政府干预，最后在 80 年代成功扭转了滞胀的局面。但我们国家跟他们还不一样，我们是经济发展过程中，增长和结构调整遇到瓶颈，经济的可持续性遭遇挑战，这主要是因为，追赶的时候，一些因素会起到优势性作用，但是当你与世界经济越来越收敛之后，意味着后发性优势逐渐消失殆尽。其他国家也大多如此，拉美，日韩，都有过高速增长后，逐渐放缓的阶段。我国经济，也在 2010 年进入中等收入阶段后，开始放缓。<br>西方供给学派主要有三大流派，一是萨伊定律，认为供给创造自己的需求，二是拉佛曲线，认为高税收会抵制供给，三是诺斯制度变迁理论，用制度经济学来解释历史上的经济增长。但我们跟他们都不太一样，首先，美国学者认为经济增长唯一源泉在供给侧，强调供给侧自动创造需求，主要是美国人太能造了，只要生产跟的上，美国人就能消费掉，所以他们不需要管理需求，而我们不行，我们必须释放新需求，创造新供给，咱们还是个储蓄国家，所以对于消费这个事，远没有美国人想的那么开。所以说白了就是，我们的供给侧改革，需要给消费者找到一个花钱的理由，而美国人则不需要这个理由。<br>另外，美国人认为，私有化才能提高效率，而我们的制度性质必须还得顾及公有制。最后美国强调减少政府干预，但我们则强调的是让政府更好的发挥作用，也就是说，我们习惯了大政府主义，你让政府靠边站，这也不太现实。<br>鉴于这些不同，美国的供给学派侧重的是减税，特别是对那些累进税制的高税率进行削减，而我们只强调结构性减税，作者特别提到，所谓结构性减税，是要让税收更为合理，而不是减少税收总量。所以我们也能看到一个很有意思的现象，一方面我们不断提出减税，还总说在某些方面减税几万亿，但是年底一看，税收和财政收入依然是增长的。这就叫做结构性减税。但效果怎么样，我持保留意见。有些地方确实不错，比如企业所得税，从 55%降到了 25%，甚至有些地方降到了 15%，但另一方面，有些税种，还依旧有很多不足，税率太高。甚至完全打击投资和创富的积极性。还有些地方，该征税，却一直没舍得下手，比如房产税，相信这些大家心里也都有一杆秤。所以，结构性减税，依然还要持续的改革。<br>总之，供给侧改革，着眼点就是解放和发展社会生产力，用改革的办法推进结构调整，扩大有效和中高端供给，这些东西我们在西方是找不到经验的，只能自己摸索。而领导多次强调，供给侧改革，是改革开放的魂，也就是说，我们要在深化改革和扩大开放上下功夫，打通，城乡之间，地域之间，不同所有制之间的资源要素瓶颈，通过供给上的创新，创造新的需求。这话大家可能不理解，举个例子，比如 iPad 就是典型的供给创新，创造新需求，在乔布斯打造平板电脑之前，大家根本就没有平板电脑的需求，而现在平板电脑已经成为了每个家庭都离不开的标配。<br>在过去几十年的历史上，我们有几次改革，释放了巨大的制度红利，1 是农村联产承包责任制，废除人民公社，一下就刺激了劳动的热情，迅速实现了农业大增产，彻底改变了农村的面貌。2 是发展民营经济，扫除把民营经济作为资本主义尾巴的极左错误认识，刺激了民营经济大发展，形成了 5678 的巨大成就，也就是民营经济贡献了 50%的财政税收，60%的 GDP，70%的研发投入和 80%的劳动力就业。3 是扩大开放，引进外资，40 年来，引进了 2.9 万亿美元的外资，现如今外资总资产，占全部工商企业资产量的 30%，这些外国人不仅带来了资本，还带来了商业模式和技术，以及管理经验和人才，4 是国企改革，简政放权，让一批国企，具备了国际竞争力。<br>作者说，在转轨的过程当中，制度要高于技术，从计划经济转为市场经济，就是一场伟大的制度变迁，当前改革已经进入深水区，要啃下难啃的硬骨头才行。如果讲的更具体一些，三去一降一补，成为了供给侧结构性改革的切入点和关键点。<br>先看去产能，具体有 3 点，1 不能笼统的讲产能过剩，我们要去的是落后产能，也就是那些低效率，重污染的产能，2 要大力处置僵尸企业，该断奶的就要断奶，拔掉这些企业的输液管和呼吸机，这个工作是比较困难的，重要的就是僵尸企业的认定，有的企业只是暂时困难，我们可能反而要帮助他渡过难关，所以度的把握很关键。如果弄不好，就会变成腐败的温床和寻租的猎场，最后变成有背景的妖精都被带走了，没背景的妖精都被打死了。第三去产能的主导机制，应该是依靠政府维持公平竞争和制度环境。让市场发挥作用，实现优胜劣汰。杜绝行政命令中的一刀切。<br>去库存主要指的是房地产，经过 2018 年以前一系列的骚操作，搞了一把棚改货币化安置，涨价去库存，三四线楼市高库存的堰塞湖基本缓解，但现在又搞出了另外一个问题，就是居民杠杆率过高，各城市不均衡，甚至冰火两重天，有 5 万块钱一平米的， 也有 5 万块钱一套房的。未来还要加大落户的改革力度，把农村人口引入城市，把小城市人口引入大城市。提高三四线城市的教育和医疗水平。<br>去杠杆要分为宏观和微观两个层面，我们倡导的是结构性去杠杆，宏观上，全局去杠杆，但不排除局部加杠杆的可能。保持财政货币基本稳定，采取预调微调的方式，为实体经济争取提供良好的宏观环境，而微观上去杠杆，则要降低企业负债率，从分子上减少债务，改善债务结构，消除高息负债。从分母上还得注入长期有效资本。增加股权份额。分子分母同时发力去杠杆。<br>降成本重要的是降低制度性成本，比如之前的国有企业改革，就是降低了整个社会的沉默资产的制度成本，通过部分国有企业职工下岗，去除国有企业的社会化功能，降低企业运营成本，另外，当前大力推动的自贸区建设，通过负面清单管理，推行清单管理，大幅降低行政管制，进一步优化营商环境。<br>去库存主要指的是房地产，经过 2018 年以前一系列的骚操作，搞了一把棚改货币化安置，涨价去库存，三四线楼市高库存的堰塞湖基本缓解，但现在又搞出了另外一个问题，就是居民杠杆率过高，各城市不均衡，甚至冰火两重天，有 5 万块钱一平米的， 也有 5 万块钱一套房的。未来还要加大落户的改革力度，把农村人口引入城市，把小城市人口引入大城市。提高三四线城市的教育和医疗水平。<br>去杠杆要分为宏观和微观两个层面，我们倡导的是结构性去杠杆，宏观上，全局去杠杆，但不排除局部加杠杆的可能。保持财政货币基本稳定，采取预调微调的方式，为实体经济争取提供良好的宏观环境，而微观上去杠杆，则要降低企业负债率，从分子上减少债务，改善债务结构，消除高息负债。从分母上还得注入长期有效资本。增加股权份额。分子分母同时发力去杠杆。<br>降成本重要的是降低制度性成本，比如之前的国有企业改革，就是降低了整个社会的沉默资产的制度成本，通过部分国有企业职工下岗，去除国有企业的社会化功能，降低企业运营成本，另外，当前大力推动的自贸区建设，通过负面清单管理，推行清单管理，大幅降低行政管制，进一步优化营商环境。<br>作者还提到了，土地要素市场化改革，改革开放以来，重大的土地革命有三次，第一还是联产承包责任制，释放了农村土地的生产红利，第二是 80 年代末期的土地批租，土地所有权和使用权分离，87 年深圳土拍市场，开始了我们通过土地迅速完成原始积累的道路。第三次，就是我们正在积极推动的城市与集体土地全国市场化流动。进一步打破土地市场要素配置的局限。这就是黄奇帆在重庆搞的那种地票制度，比如上海说我没土地了，所以我要用农用地来补充建设用地，而云南地广人稀，他说我这边可以开垦出相应的农地补充，前提是上海给云南支付费用，50 万块钱一亩地。这就相当于用大城市的土地，置换农村边远地区的土地，并带动财富的转移，这样那些偏远地区的人，也很有动力去开垦农地然后卖给大城市，最后赚得财富。而我们整体农地红线不丧失，粮食供给得到保证，也让供地效率持续增加。作者估计，每年将带来 3000 多亿的财富转移。这就是土地要素市场的配置化改革。之前两次改革是无中生有，变出巨大财富，而这次是转移财富，同样很重要。<br>为了做好这次配置化改革，作者也提出了 5 个方面，第一个方面，是简政放权，激发市场活力，各地应该在指标内，自己掌握权力，比如重庆原来一年可以征用 20 万亩土地指标，农村建设用地，基本上地方可以说了算，涉及农用地征收，才要上报审批，2020 年 3 月，其实已经将两类用地审批权下放，1 是永久农田以外的农用地转建设用地的审批，已经交给了省级政府，2 是将含金量更高的永久基本农田，转建设用地的审批，也给了北京，上海，天津，重庆，江苏，浙江，安徽，广东等 8 个省市作为 1 年试点，这 8 个地方未来将大大缓解土地稀缺问题。当然之所以是试点，国家也在看效果，如果觉得效果不佳，也可能再把权力收回去。到了 2021 年 3 月，我们就知道这些地方的表现到底是否令上面满意了。值得注意的是，这次试点的 8 个省市，基本就在京津冀，长三角，珠三角和成渝板块，足以见得未来，这 4 大板块，将是土地改革的重点区域。<br>第二个方面是构建城乡统一的建设用地市场，打破二元壁垒，以前我们城乡总是两套制度，中间不相通，导致城里的土地极贵，房价极高，而农村则土地很多，完全不要钱。这种双轨制，已经不太符合今天的需要。甚至出现了很多乱象，比如大家知道的小产权，就是农村集体土地，压根就没产权，也不能转让。这其实极大的限制了农民的财产性收入。再加上土地市场的巨大利益，让地方政府也对土地的买卖十分有热情，土地财政也损害了农民的利益。甚至闹出了很多补偿上的纠纷。<br>目前来看，要解决土地市场的问题，存在这么几个障碍，1 是法律制度还不健全，目前法律对于集体土地的权利结构定义不清，所以农民权益也就没办法保障，2 是地方政府积极不高，土地收入成了地方重要收入来源，如果给集体土地确权，会影响地方政府收入。3 是市场化程度低，目前土地交易，还很难像股票一样交易，更多都是由当地政府来推动。4 是配套机制跟不上，比如谁来监管，怎么形成价格等等。<br>那么未来改革，就要围绕这几个点展开，第一要聚焦谁来入市，明确入市主体，明晰产权关系，这也有个前提，那就是先得搞清楚，这个土地到底是谁的，谁对他享有权利，这个事目前我们正在做，叫做农村土地确权。第二是入市的成本价格，完善城乡建设用地价格形成机制，要跟国有建设用地同权同价。第三是钱怎么分，保护好农民权益，让农民公平的享受土地增值收益，比如城市征收一块地，3000 万一亩收，5000 万卖，而征收农村一块地，300 万每亩收，可能最后还是能 5000 万卖，那么这个收益到底怎么分？这时候麻烦就比较大了，因为政府在上面也会做很多的资源设施投入，越是一穷二白的地方， 后期的开发投入也就越大。所以不能简单的按照增值来分收益。作者说，可以按照比例收土地增值税，增值越大，税率越高，比如增值 1 倍，政府收 30%，增值 2 倍收 50%，增值 3 倍以上收 60%，道理就是增值越多，政府的投入就越大，所以也就要多收钱。村民也乐于土地大幅增值，把蛋糕做大了，自己的比例虽然小了，但是整体收益却提高了。不过这些东西，目前还只是作者的设想，还并未有这样的征收办法。<br>下一个土地改革的重点，就是实现跨省指标交易，打破市场化交易的地域限制，每年各地都有指标，国家也会有计划的给一些额度，但这些东西分配并不合理，所以应该建立一个交易机制，不需要这些土地的地方，应该拿出指标来，跟其他需要的城市换。比如三四线城市，建设性用地很多，但是他基本没人买了，他就可以转而卖指标，把指标卖给北京上海，然后在三四线城市搞耕地，补偿农用地的损失。保护耕地面积，也保护生态。如果说耕地红线是保证全国人民吃饭，是根本问题的话，那么北京上海，还保留那么多农村，实在是有点不可理解。寸土寸金的地方，还有农田，这就是人为在制造土地稀缺了。这些耕地都应该换到三四线以下的地方去。北京上海就应该把工业化，城市化做到极致。2018 年这个东西，在上海和云南之间开展了跨省增减指标交易，云南将 3 万亩建设用地指标，以 50 万元每亩的价格调剂给了上海，获得了 150 亿的收入，这笔收入，很好的改善了云南扶贫的条件，也增加了上海可用地的面积。未来可能还会大范围的推广。<br>原来作者在重庆当市长的时候，他也实行了地票制度，每年重庆房地产用地 3 万亩，必须通过购买地票来解决，而农村复垦的指标就形成了地票，简单来说，就是开发商你要想要土地，就得到农村去增加耕地。农村增加 1000 亩耕地，城市就可以增加 1000 亩建设用地。这样就保证了重庆，3400 多万亩的耕地总量不减少。农民也得到了实惠。这就建立了远距离，大范围的城乡区域反哺机制。让千里之外的农村土地价值大幅提升。因为开发商也会算成本，他肯定也要去找最便宜的复垦土地，而这些土地往往都是在最偏远的贫困地区。所以，相当于让开发商去精准扶贫了。10 余年时间，农民已经从地票交易中，累计获得了 400 亿收益，集体经济组织也得到了 150 亿元。消除了大量的空壳村，有利推动了乡村振兴，脱贫攻坚。另一方面，重庆市的房价也得以稳定，土地有的是，每年多出 3 万亩地票用于房地产开发，房子供给十分充足，这就彻底扭转了炒房预期。这种很好的地票制度，说来也奇怪，自打黄奇帆一走，他立马就不灵了。<br>作者下面又说了一下工业用地的问题，工业用地这几年批的太多太烂，存在严重的浪费，产业园成灾，占用了大量的优质土地，但是最终却无法将项目落实。而且工业用地一般按照 50 年批，但是企业的生命周期不到 15 年，所以大量工业用地闲置，而且缺乏完善的土地流转机制和二级市场，最终也无法把这些用地给盘活。还有一些工业企业，常常要求搭配房地产用地，混水摸鱼，挂羊头卖狗肉，以搞实业为名，让政府便宜批地，最后去搞了房产开发。目前我国城市低效闲置土地，规模巨大，2017 年以前，全国批未供土地是 1500 万亩，相当于全国 3 年的供地量。所以高效的消化这部分土地，也很关键。<br>全世界有一个规律，城市化的进程，是应该建设用地少量增加，而耕地越来越多的趋势，因为农民在家的时候，他可能要住个院子，在城里只需要 100 平米的 2 居室，所以需求面积减少了，就应该在农村释放出更多的耕地，但是中国有点特殊，几亿农民进城了，却出现了耕地减少而城乡建设用地双增加的情况，这违背世界经济常识。按说农民进城了，农村应该多出很多耕地，但我们却恰恰相反，耕地减少，而城乡建设用地双增长，主要原因就是城市刚性扩张之后，农村建设用地并没有同步退出，导致农民两头占地，农民人均占地超过了 350-400 平方米，远比城市居民占地多得多。所以下一步改革，就要支持进城的农民，自愿有偿退地，不能让他们吃着碗里的，看着锅里的。但客观地说，也得解决农民城市落户的问题，要把农民工变成市民，这样他们有了归属感，不用以后再回农村了，才能退地。<br>下面我们看看金融供给侧改革，现在的货币政策和财政政策都是需求侧的宏观调控，都更加注重短期效应，是调节经济短期温度的，但是长期影响不大。供给侧改革，一定要从体制性机制上改革，从本质来说，央行发行货币，量大还是量小，和政府的税收增长能力有关，可以透支，但总的来说也需要有个平衡。简单来说，央行背后的基础货币投放，也是跟他的赚钱能力和经济能力挂钩的，不能无休止的印钱。那样大家都不信任本币了，经济信用也就破产了，比如解放前的上海就是这样。<br>2018 年末，中国的基础货币 33 万亿，M0，也就是流通中的现金是 7.3 万亿，有 25.7 万亿是银行存款准备金，外汇占款是 21 万亿，M0 到 M2，货币供应量的范围逐渐扩大，也是一个信用创造的过程。M2 很高，主要是因为信用膨胀了， 比如一套房，10 年前 100 万，银行贷款 70 万出来，现在 500 万，银行贷款 350 万，这增加的贷款，就是信用创造出来的，不是央行释放的。所以房价上涨和 M2 是蛋生鸡和鸡生蛋的关系，正因为房价涨了，所以 M2 多了，M2 多了，房价自然也就涨了。<br>过去 10 年，人民币外升内贬，大量外汇博取人民币升值，所以流向咱们这里，导致我们外汇占款增加， 然后我们通过外汇占款发放货币，引发了房价暴涨，金融杠杆提升等问题。这些都是供给侧要改革的重点，我们不能再这么被动。<br>最近一项重大改革就是利率市场化，之前存在利率双轨制的套利现象，从银行把钱弄出来，然后再拆解出去，赚取利差。这种事不可避免，但是如果太多，就属于资金空转，对实体经济不利。另外就是货币传导不畅，央行总要经过银行来发放贷款，但是银行对于民企中小企业贷款意向不强。融资难融资贵无法解决。反而钱都去了房地产。<br>金融中还有一个重大的弊病，就是我们现在的直接融资不足，导致杠杆过高。目前社会新增融资中 83%都是间接融资，也就是商业银行或者其他贷款机构，以及信托提供的资金，只有 17%是来自直接融资，这个里面 10%还是债券，也就是说，融资之中，93%都是要还本付息的债权融资，只有 7%的股权融资，这个比例太失衡了，反观美国，人家 70%都是股权融资。那么造成的问题就非常大了，股权融资会支持未来的科技创新创业，是更加长远的投入，而债权融资，说白了是看抵押物的，是对重资产，传统产业的融资，那么你这块比重过大，钱肯定又钻到房地产去了。因为只有房子和土地，是最优质的抵押资产。所以解决资金无法进入实体经济，就要先解决股权融资比例过低的问题。<br>目前资本市场有三大问题，1 是并不反应经济状况，2000 年以来，中国 GDP 翻了 3 倍，经济上取得重大进展，但是好公司几乎都到海外去上市了，A 股仍然以最传统的企业为主。并不反应经济全貌。2 是缺少资源优化配置功能，对于技术进步的推动不足，对于劣质上市公司，也欠缺淘汰机制。严重影响了整体质量。3 是投入产出，收益回报不到位。股市投资并不理想。<br>我们在金融上还要进一步加大开放力度，在 300 多万亿的金融资产中，外资占比还比较低，远远没达到工商业中的外资占比水平。也就是说相对于整体而言，金融开放的力度还比较落后。有人说不对啊，这两年外资不是一直在股市上买买买吗？这才哪到哪？数据显示美国股市中 75%的成交量，来自外国投资者的股票买卖，而日本，外国人占投资者的比例也达到 30%，交易量比重也超过 70%，所以相比之下，我们还是太少了。现在外资持仓 A 股占比也才 10%几。目前我们正在干的事，就是尽可能的降低外资投资的门槛，吸引更多的外资入局。北上资金，目前也成了市场的风向标，外资比较抱团，所以他的作用比现在的公募基金还重要。<br>除了土地和金融之外，还有其他的要素流转，比如劳动力要素，放开个别大城市的落户限制，才能打消农民工的顾虑，现在 45 岁农民工往往就很难找到工作，如果无法当地落户，就要返回农村，再加上来回来去的迁徙，也造成了时间上的大规模浪费，所以我们一直在致力于把 3 亿农民工，转化为城镇居民，所以落户改革已经势在必行。我们已经看到了，现在绝大多数城市，已经完全放开了落户限制，在争抢人才，争抢人口，未来省会以上的城市会继续享受人口红利加持，但省会以下城市，如果还不在经济圈之内，恐怕就会比较困难了。<br>还有技术要素，这近些年我们的研发投入越来越大，年均增长 11%，规模跃居世界第二，超过 2 万亿，但是这些科技成果的产业化并不尽如人意，缺乏科技与产业之间的桥梁。<br>中国经济 40 年大发展，一个重要的引擎就是不断释放各种消费，高度重视消费拉动经济的发展，2010 年，消费， 出口，投资，各占三分之一，到了 2019 年，消费已经占了 GDP 的 60%，出口和投资加起来才 40%，目前个人消费虽然有增长空间，但是却并不太大，而政府消费这块，却有巨大的潜力，啥是政府消费？说白了就是政府花钱，跟投资那些铁公基项目不同，政府消费一般都是福利领域，比如教育，卫生和文化，就拿今年的疫情来说，让我们认识到，医院盖的还是不够。目前，修公路铁路转化效率越来越低了，但是用在教育和医疗这些公共设施上面，转化可以提高一倍。拉动经济的效果会更好。同时还能改善居民福祉。<br>现在生意最好的地方就是医院，你凌晨去医院都得排队，所以这显然是需求旺盛，供给不足，另外，我们的医疗体系也不发达，社区医院严重不足。所以与其再去投什么铁路公路，不如多盖点医院。既可以拉动经济，也可以满足需求，还能拉动就业，目前医生护士的数量显然也不够用。还有三分之一的人，无法进入编制。<br>作者说，2018 年末，我国卫生人员总数是 1230 万人，绝对数量不少，但是相对数量很少，在发达国家，基本上卫生人员都占到了人口总数量的 5%，那么也就是说，我国应该有 6000-7000 万的医疗人员才合理。那样会极大的推升我国公共卫生服务的能力。对于公共卫生事业，就跟防洪大坝一样，宁可浪费，也不能不足。他关系到一个城市，一个国家人民的直接幸福感。<br>另外，医疗人员也严重短缺，甚至很多从业者压根就没有公共卫生知识，比如这次疫情黄冈市的一个卫健委主任，记者一采访就露馅了，压根就是个外行，这种人平常无所谓，真到了危急时刻，可能就是致命的，所以公共卫生人才也需要做长久的投入，这就跟教育又结合起来了，目前 3000 多大学里面，只有 80 多家有公共卫生学院，所以比例明显偏低。人才也明显不够。作者建议鼓励一些 985 和 211 大学开办高质量的公共卫生学院，而不只是医学院才培养医生。作者测算了一下，十四五期间，大概需要投资 2000-3000 亿，就可以把中国公共卫生系统的短板补上，而且还能拉动经济，提高幸福感，所以这个事很有意义。<br>我们看第二章，去杠杆与金融风险的防范，2017 年我们提出了去杠杆，防风险的重要指示，之所以这样是因为我们 M2 当时已经到了 170 万亿，GDP 是 82 万亿，比值达到了 2.1 比 1，而美国次贷危机之后三轮大 QE，二者比值才是 0.9 比 1，所以毫无疑问我们的倍数太高了，体现出我国资金周转率低，资金利用效率低的重大问题。央行也发报告说，M2 高速增长，与住房货币化密切相关，也就是说这些钱压根没进入实体经济，而是囤积在了房地产行业和表外金融机构当中，之前一直发展金融，但到了 2017 年，我们来了一个一百八十度转向，开始约束金融行业高速发展。<br>按照国际经验，金融业增加值一般占到 GDP 的比重应该在 5%以内，美国有 2 次超过 8%，一次是 2001 年互联网泡沫，一次是 2007 年次贷危机，日本则在 94 年金融业增加值达到 9.6%，随即开始了 20 年的衰退。而在 2015 年的时候，我们这个比重也达到了 8.4%，不过作者也说，这并不意味着到了 8%马上就危机，只能说危机的可能性比较大而已。<br>我们之所以金融增加值这么高，其实主要就高在了最近十年发展较快的理财，委托贷款和资管业务上，大概有 30 多万亿的资金通过表外业务，理财业务，资管通道，流入 10 多种非银金融机构，包括信托，小贷，保理还有担保公司，财务公司，互联网金融，以及私募基金。最后这些钱就如同被过滤一样，漏下去那一点才能进入实体经济，但是这也就意味着，实体经济要承担这种层层过滤的成本。也叫作雁过拔毛。银行贷款利息如果是 7%，那么非银系统的利息肯定在 12%以上。终端的贷款会到 18-20%。这对于实体经济可谓是雪上加霜。除了房地产没有人有这么高的利润率，即便是房地产，也得加杠杆才能覆盖这个利率。2017 年我国的宏观杠杆率 250%，世界排名前 5，我们的邻居日本更吓人，总杠杆率达到 440%，但是日本是一个典型的资本输出国家，也就是说，他在本土之外还有一份兼职，而这个兼职跟主业收入差不多，所以如果统计日本全体的财富的话，那么日本的杠杆率就会至少下降一半。也就是变成了 220%，美欧也大体如此。另外，日本还有两大优势，1 个是他的储蓄率极高，2 一个是他的利率极低，所以杠杆负担并不重。所以跟日本比较，我们完全不一样。<br>第一，我们的居民债务基本都是买房买车的贷款，而且都是 2015 年以后涨上去的，2017 年就过了 50%，所以可以判断，2015 年之后的房价上涨，基本都是杠杆拉动的。杠杆牛有什么危害，这个我们在股市上已经见证过了，就不必再多说了。如果房价继续大涨，最后楼市就会发生 2015 年股市的那个结果。<br>第二，政府债务 40 多万亿，占 GDP 的 50%，中央 13 万亿，地方 18 万亿，隐形债务 10 万亿。问题主要在增长过快，利率过高。地方政府通过信托走的这种隐形债务，利率能到 12%。而且期限都不长，所以财务风险不小。所以后来，下大力气去整治地方债务，通过置换，把高息债换成低息债。并且拉长年限。从政府债务这块，其实我们的问题并不大。总体风险可控。而且相比欧美日，我们政府的资产还非常多，土地就是我们手中最好的资产，所以政府债务风险基本不存在。<br>第三就是企业债务，2017 年是 130 多万亿，是 GDP 的 160%，这个比例很高了，美国只有 60%，我们国家企业债务高企的根本原因就是缺乏资本金补充，如果资本金充足，我们的债务比例就会下降。90 年代的时候，我们就对国有企业做过手术，搞了一次债转股，再加上破产关闭核销坏账 5000 亿，总共把 10 万亿负债，削减了 2 万亿，但现在应该不会在这么干了，因为核销不起了，140 万亿贷款，削减 20%，将近 30 万亿了。不可想象。所以只能从结构上想办法，大家发现，现在负债率最高的就是开发商，他们都到了 85%，甚至 90%，所以 2020 年 8 月，政策出台了 3 条红线，限制开发商融资。资产不达标，负债过多的，不让你再扩大债务规模了。不管宏观周期怎么样，开发商这块局部去杠杆，应该是个持续性的工作。<br>每年我们的社融规模都会随着 GDP 的增加而增长，2016 是 17.8 万亿，2017 和 2018 都超过了 19 万亿，但是每年新增的融资中，结构却很不好，之前说了 90%都是债权融资，只有 10%是股权融资，要知道债权是杠杆率的分子，股权是补充资本金的分母，所以债权融资多杠杆率就越来越高，而股权融资高，杠杆率就会降低。美国每年融资 70%都是股权，所以他们的企业杠杆率就比我们低的多。所以这就看出来，我们去杠杆的关键，并不是不给企业钱了，而是要给企业增加股权融资。这才能防范风险。<br>下面作者讲了全世界去杠杆的那些经验，第一次是 29 年开始到二战结束，这是通缩型去杠杆，造成了雪上加霜的后果，后来还是因为二战刺激了需求，投放了大量的货币，才化解了危机。但这个不是计划好的效果，而是歪打正着。第二次去杠杆是 2008 年，美国做出了一次非常具有典范意义的良性去杠杆，在危机爆发后，一方面把崩盘的金融企业坏账核销，另一方面推动量化宽松，释放大量资金进入资本市场，刺激股权融资大幅增长。让股市从 6000 点涨到 28000 点，股权投资市值从 10 万亿美元增加到 30 万亿美元，所以你只知道我们用涨价去楼市库存，并不知道美国之前就用了涨价去金融杠杆。<br>那么这也就给我们提供了思路，第一种是佛系思路，爱咋地咋地，杠杆膨胀后自然崩盘，出现金融危机，然后那批高负债企业死绝了，杠杆自然降下来了。但这个结果是十分惨痛的，自己也可能一下就被干趴下，比如日本现在也没缓过来。第二种思路，政府通过通货膨胀，稀释债务，把问题推给未来的自己。同时把坏账转移给居民，但如果通胀过于严重，就会引发社会动荡。甚至形成贬值预期，最终会酿成颠覆性大危机。后期可能就控制不住了，比如委内瑞拉一样。一开始也想赖账，但后来就玩坏了。第三种思路是挤泡沫，紧缩去杠杆，一开始管用，但是杠杆问题比较严重的时候，你就不敢动刀了。很可能引发萧条。第四招就是资本市场加杠杆，商业银行去杠杆，对大企业点对点注资，增加股权分母的方式去杠杆。走美国 2008 年之后的那条路。所以结果已经不言自明，看似有 4 种选择，但其实只能一条出路。所以未来股市出现长牛，希望大家不要奇怪。这是必由之路。<br>在这种思路的基础上，我们要做这些工作，首先国家层面，就是控制 M2 增长率，作者说，基本上就应该是 GDP 加通胀率的水平，比如 GDP 是 6%，物价是 3%，那么 M2 不能过 9%。要避免 10%以上的增长率。还要控制物价，每年也就让他在 2-3%，5 年能稀释掉 10%的债务，不能太高，至于财政赤字，也要在 3%以内，有大的自然灾害，再灵活掌握。<br>企业层面则要核销破产，对僵尸企业该关就关，特别是那些国企，坚决让他们出清。然后就是资产重组，债务重组，优化配置，比如债转股，实际上就是把分子直接挪到分母上，增加资本金的同时，快速降杠杆。当然债转股得是那种有希望，能盈利的企业。作者还分享了一个案例，一个世界 500 强的中国企业，生产铜管的，结果顺周期的时候，很多领导都请他去投资，他不好驳人家面子，结果产能扩大了不少，负债增加了 100 亿，后来环境变了，这些产能卖不掉，只能停产，债务无法偿还，企业资金断流。所以这样的企业，是属于有能力有技术，也有潜力的，帮他渡过难关，后面还是很有希望的。于是就展开了重组计划。作者利用重庆市长的便利，给他安排重庆的企业对接，解决产能销路的问题，然后还把停产的工厂都接到重庆，给最优惠的税收，最便宜的利率，降低它的成本，然后还组织相关企业给他股权投资。还帮助他和一些银行协商，核销债务。最后负债率从 95%，降低到了 60%以下。没几年这又是一家非常好的企业。<br>去杠杆的背景下，金融机构该怎么干。过去 10 年，我国产生了几十万个非银金融机构，涉及资金达到 100 万亿，这些钱在不同的机构之间，转来转去，每转一个地方，都要雁过拔毛，加点利息。最终流向实体经济后，资金利率都达到了 15-20%，非银金融行业原来定义为商业银行的必要补充，化解中小微企业的融资难问题，但是后来大家发现，草率了！正是这些机构存在，造成了资金脱实向虚，有时候你单看某家机构，好像杠杆并不大，但是把所有的风险叠加在一起，却出现了很大的风险，所以监管对于杠杆套利，要给与严厉的打击。最近几年，让表外资产转回表内，就是在干这个事。挤掉互联网泡沫，也是在干这个事。<br>下面我们看资本市场，如果股市涨 1000 点，市值就能增加 20 万亿，相当于上市公司的分母一下就变大了很多，那么负债率自然也就降低了。所以这对于去杠杆来说至关重要。可以反过来说，过去我们的企业杠杆率太高，主要就是因为股市太低。如果我们的股市能涨一倍，那么杠杆率就会下降一半。所以作者一直强调，股市是良性去杠杆的手段，也是供给侧结构改革的重要立足点。资本市场本应该是经济晴雨表，是资源优化配置的渠道，但在我们国家，这两个功能全都失灵了。所以必须重新树立资本市场的信心。甚至可以说，股市关系着供给侧改革最后的成败。<br>至于房地产，就是去杠杆的重中之重了，欧美开发商负债率一般低于 50%，我们国家扣除掉预收款之外，很多企业都高于 85%，所以这个确实太高了。现在已经出台了一系列政策，比如拿地必须用自有资金，三条红线限制融资规模扩大，管理预售等等，把这些做到位，开发商的负债就能降下来。再有就是居民端负债，务必要杜绝首付贷，二套房也要高首付，三套房基本就不批贷了。这几个环节把控好，慢慢杠杆率就能下来。<br>作者理解的金融，其实本质上就 3 句话，1 是为有钱人理财，为缺钱人融资，2 是信用，杠杆和风险三个环节，3 是一切金融的目的都是为实体经济服务。如果脱离了这 3 句话，金融就会出现乱象。比如美国次贷危机，就是乱加杠杆，透支信用，造成的巨大风险，最后钱没有成为实体经济的帮衬，反而成为了祸水。我们也有一位领导曾经定调，百业兴则金融兴，百业稳则金融稳，这就是金融行业的金科玉律。<br>目前我们对于国内的金融机构实行牌照管理，这其实就是白名单制度，作者说光有白名单不行，还得有负面清单，这样才能对他们加以约束，要给这些金融机构设置明显的边界，告诉他们什么东西是不能碰的，比如小贷公司，不能非法集资和吸收公众存款，也不准抽逃注册资金，利率也不能高过标准。对私募基金，也一样，不能乱搞集资，不能明股实债，不搞信托融资，不炒二手房，不炒外汇。不放高利贷。<br>金融创新是我们追求的，但是他产生的风险，我们也一定要有所防范，特别是多种工具和衍生品风险的叠加。比如次贷危机，单看银行，保险，投行，储贷业协会都是安全的，但是加在一块，结果就是谁都不对底层资产负责了，于是巨大风险就产生了。作者还重点提到了几种风险，1 是高息揽存，通过这种方式，吸收社会资金。2 是刚性兑付，在较高的利息上叠加虚拟的刚性信用，从而让投资者失去警惕。3 就是资金池，通过资金池转动，遮掩坏账，最终形成借新还旧的庞氏骗局。4 是资金错配，收进来的都是半年的理财资金，贷出去的都是 5-10 年的长期项目，期限错配之下很容易形成最后的流动性危机，发生挤兑风险。5 是通道叠加，银行，证券，保险，信托，租赁小贷，把资金在这些机构里面转一圈，然后再贷出去，比如用银行揽储，然后用信托出借，导致资金风险性质完全改变。每经过一个通道，利率都要加一成。6 是嵌套，偶尔嵌套，或者浅层次嵌套一下也是可以的，但如果三五个金融产品，嵌套在一起，那么就很容易导致底层资产模糊不清。还比如次贷危机，就是多个资产嵌套在一起发生的风险。<br>作者也举例，比如宝能在资本市场举牌万科，我们叫做蛇吞大象，宝能的资金就来自于万能险，说白了就是用到了高息揽储加刚性兑付的手段，通过银行渠道发售，增加老百姓的信任。然后用资金池进行高比例错配。他就这么拿到了 70 亿的万能险，之后开始了嵌套，把 70 亿放到银行，让银行给他配资，从银行又获得了贷款 200 多亿，一下买了万科 18%的股权。然后再去把这些股权抵押，通过融资融券等工具，把资金继续扩大到 450 多亿，继续拿回来买万科，最后占比超过了 25%，所以宝能在这个案例中，把作者所说的手段都用上了。所以最后，官方出面，以违规为由，拒绝了这次恶意收购。不过这事也给我们提了个醒，资本市场现在还有严重的漏洞，市场化手段，并不能完全补上这些漏洞。还有一个例子就是阿里小贷，2013 年 P2P 已经出现，重庆则非常警觉，在作者治下不允许注册一家 P2P 企业，也不允许外地的 P2P 跑到重庆，2014 年他还向银监会汇报，建议把这个事管起来。但后来作用不大，因为重庆人，在网上也投了很多外地的 P2P。就在这时候马云找到他，希望在重庆成立一家网上小贷公司，由于浙江的民间贷款坏账太多，所以全省正在清理整顿，他的网络贷款牌照批不下来，于是就来重庆找机会。但作者告诉他，只要不做 P2P，真的为小微企业提供贷款就行，他也希望马云可以把钱用于自己的供应链，通过数据挖掘，辐射全国。后来阿里小贷就按照这个条件在重庆注册了，然后大家一看重庆可以搞，腾讯百度就一窝蜂的全来了，当时互联网小贷，不包括 P2P 的余额一共是 1 万多亿，重庆注册的就有 5000 亿。占了一半。后来到了 2017 年 9 月和 10 月，由于业务发展太快，资本金没跟上要求，花呗和借呗的资本金贷款杠杆比例达到了近百倍，被叫停运营，作者打听才知道，问题出在了 ABS 上，也就是资产支持证券，蚂蚁金服把 30 多亿的资本金，拆解融资形成了 90 亿的贷款，利用 ABS 工具，发行债券，然后循环放贷，几年里循环了 40 多次，所以造成了 30 亿资本金，放贷 3000 多亿的情况，形成了百倍杠杆。如果对高杠杆一刀切，那其实蚂蚁是被误伤的，因为并没有规定，ABS 的循环次数。企业也没有违规。所以接下来的监管，要对这个网贷公司的 ABS 循环次数做出规定。因为网贷效率比较高，而且周期都比较短，所以循环非常快，要适当的给予考虑，另外就是注资，最后蚂蚁金服把资本金充实到了 300 亿，就把杠杆降下来了。大家皆大欢喜，网贷恢复运转，重庆也增加了几百亿的资本金，风险也消除了。作者还提到了非法集资，隐匿于民间的非法集资非常猖獗，隐蔽性极高，传染性极强。突发性猛，而且你还抓不到，因为一开始没有受害人，大家都赚钱了，高兴的不得了。等出现受害人，有人报案的时候，往往为时已晚。这种事没办法事先监管，最好的办法就 2 个，一个是投资者教育，第二个就是鼓励举报。比如年轻人，发现你的父母买了不靠谱的理财，赶紧向公安机关报案。<br>P2P，它源于英国，指的是投资人和借贷人通过中介平台，形成借贷关系。说句广告语叫做没有中间商赚差价，这样借款人利息能低点，投资人拿到的收益也能高点。本意是很好的，但问题在于怎么控制风险，2015 年 P2P 机构总量达到 3800 家，融资规模接近万亿，而且是三无产品，无资金存管，没有抵押，也没人监管。所以风险不断暴露，这东西风险根本控制不住，最后真正搞金融的人，全都尝鲜后撤出去了，剩下的都是搞互联网的人，他们无知者无畏，用互联网那套营销方法，拉用户，上规模，认为只要做大了，就能解决问题，但是别的事情，你做大了，顶多就是运营成本的事，有资本愿意买你的用户，而在金融上，如果你做大了，还都是坏账，你的用户不但一文不值，甚至会成为毒药。资本再傻也不可能往这里面再扔钱。<br>作者也提出，P2P 基本上就是传统农村高息揽存的老鼠会，高利贷，借着互联网技术死灰复燃，高息揽存，资金池，庞氏骗局，高利贷，坏账，风险错配，期限错配，乱七八糟的事全都出来了。一旦出问题，投资者基本就是血本无归，即使人抓到了，资金也早就挥霍一空。最后引发严重的社会问题。<br>最后我们看，活下来的互联网金融，基本都是供应链金融，比如阿里小贷，京东白条，这些东西本身就在供应链上，他知道你有多少资产，自然也就敢把钱给你，所以供应链金融的坏账率一直比较低，整体可控。没有供应链的借贷生意，基本全都干不下去了。即便真想好好干的那些人，最后也因为控制不住风险，而主动退出。<br>下面我们看第三章，新时代资本市场高质量的发展之路，我们的股市起步比较晚，90 年才成立上交所，91 年深交所起步，而且还因为过分强调中国特色，没少走弯路。然后就是不断在改 bug 的过程。比如大家记忆深刻的 2015 年，因为高杠杆配资引发的股市泡沫，还有 2016 年因为尝试熔断机制，几乎带来了市场停摆。<br>作者提出了，目前资本市场的不足，1 是总量太小，证券化率还有巨大空间，2 是交易所竞争力不够，品种不丰富，3 是市场分割，比如 A 股 B 股，债券，票据，缺乏必要的连接品种，4 是发行机制不健全，注册制刚起步，5 退市制度差的太多。6 上市公司治理水平还是有待提高，7 证券公司综合实力差，竞争力弱，现在还停留在靠天吃饭的时代。8 是投资者结构不合理，散户太多，机构太少。9 监管体系，法律体系都要加强。<br>鉴于这么多不足的存在，资本市场也在三个地方没有发挥应有的作用，1 个是没能反应国民经济的大幅跨越，这么高的经济增长，在股市上完全反应不出来，2 是资本回报比较低，所以好公司也留不下来，投资者也不赚钱。3 是资源配置功能弱，并没有把更多的资金，用于支持创新和未来科技。反而一些垃圾股，容易被炒上天。未来我们的重要任务，就是要让股权融资回归金融市场地位。让为实体经济服务的资本成为金融发展的主导力量。<br>作者给资本市场制度建设提了 12 条建议，1 是鼓励上市公司并购，并注销股票，增加股东权益，我们在熊市里经常会有跌破净资产，或者大量股权质押暴雷的情况，形成了恶性循环，理论上如果公司有足够的价值，那么跌破净资产，公司就应该回购股票了。而我国的公司法，有回购却无注销，所以最后变成了，其他投资者也担心上市公司炒作自家股票，低买高卖。所以应该从公司法进行改变。鼓励注销，打破这个芥蒂，真正增加股东权益。2 是遏制大股东高位套现减持，在发达国家，交易分 3 个层次，散户和机构在不同的层次上交易，散户的手续费比较高，所以机构不会进入散户的交易层次，如果进入也很快就会被发现，有操纵市场的嫌疑，我们应该出台规定，让大股东必须到机构的层次上去做交易，而且要提前披露信息，还要征收较高的资本利得税。有效约束大股东高位套现的问题，如果放任他们减持太多，可能不利于公司法人治理结构。3 建立上市公司愿意分红，国内外机构投资者愿意更长期持有的税收机制。资本市场常年铁公鸡，分红很少，我们应该明确，上市公司每年拿出 40-60%的利润分红的制度，并且在税收上鼓励，这部分红利免交企业所得税，同时也应该对投资者红利免征利得税，借此恢复长期投资者的信心。4 取消印花税，印花税源于纸质股票的贴花背书，也就是私人交易行为，占用了公共资源，所以交税，但现在已经没有纸质股票了， 所以印花税早就没有征收的基础。欧美日也早就取消了印花税。5 以企业年金作为资本市场机构投资的源头活水。企业年金才是中国的 401k，让这些钱，进入市场，才能有效推动长期投资，稳定市场预期。我们应该看到，美国正是在 401k 之后，市场走出长牛的，2017 年美国三项养老制度存续金额达到 17.9 万亿美元，几乎跟美国 GDP 相同，有一半都是 401k，而 401k 里面 50%都是股票或者股票基金，45%是股债平衡基金，只有 5%的货币基金，所以 70%多都投向了股市，简单测算超过 6 万亿美元，反观我们现在很不理想，2016 年年金总规模才 1.1 万亿人民币，相当于 GDP 的 2%，所以这块还有很大的发展空间。未来十年要真能像美国那样，弄个几万亿美元，几十万亿人民币的年金入市，那么股市必然迎来巨大发展。6 构建老百姓愿意购买商业保险的良性机制，2017 年，保险业资产规模 14 万亿，占 GDP 的 15%，规模不大，比重也很低。所以还要进一步提升商业保险的吸引力，对于高收入人群分级，为他们多设计一些产品。7 尽快建立有效退市制度，打破股市 IPO 刚性兑付，在美国，退市有三类，1 是企业老化，股价长期低于 2 美元自动退市，2 是私有化，自己主动退，3 是财务造假产品造假，比例是 6：3:1，可见自然退市的比例最大。而我们国家退市就很不活跃，有些公司百足之虫死而不僵，年年都在业绩上耍手段保壳。所以要改变退市制度，关键要把交易量，交易时间视为股市资源，作者提出，应该对 ST 股票的交易时间做出限制，比如就让他们一天交易一个小时。8 鼓励独角兽企业，在股市健康发展，独角兽指的是那些有相当规模的高科技企业，经过了很多轮的风险投资，已经具有很大的市值。作者说，独角兽投资宜早不宜晚，越早上市越好，一旦他们长成恐龙了，再弄回来就没啥意思了，反而有圈钱的嫌疑。只会给投资者带来更多的风险。9 赋予证券公司，客户保证金管理权，提高其市场地位，券商是资本市场的中坚力量，在欧美我们看到很多著名投行，在资本市场上很有能量，而现在国内券商比较尴尬，因为手里没钱，客户保证金也不在自己手里，原来我们是怕营业部挪用，但现在中国证券登记结算中心，完全有能力实时动态监控每一笔资金的情况，所以这个担忧已经没有了，证券公司完全有能力管理客户保证金。这笔钱会大大增加证券公司的表内资产，增加投资吸引力，大的机构也会更加信任券商。10 建立中国系统重要性股票监测制度，并以其为成分股，重新设立中国成分股指数，说的就是重新弄一个代表中国的指数。上证综指现在被广泛关注，但是他是全部加权平均指数，已经被权重所影响，不太能反应市场全貌了。新搞一个成分股指数，可以突出国家意志， 比如你鼓励什么，你就加大那一块的配置比例。这样可以引导更多的资金，进入自己重点发展的行业。11 针对成分指数，设立平准基金，替换证金公司，平准基金是市场稳定剂，他还肩负着主权资本定价的问题，一旦股市太低了，很容易被国际资本洗劫。所以作用非常重要，涉及金融安全，甚至是金融主权。目前汇金和证金都算是平准基金性质的机构，总规模不足 2 万亿，其实担子很重，而且资金来源很多都是商业借贷，利率 4%，每年光利息就 800 亿，所以成本很高。所以他只能在资本市场上低吸高抛，增加资本收益，但这其实就违背了不与民争利的原则。而针对成分股指数，推出的平准基金，可以直通央行，也可以发行特别国债，额度由需求决定。这样降低了成本，也增加了威慑力。一旦遭遇危险，可以同时号召养老金和企业年金，入市低吸，国企回购注销股票，稳住中国资本市场基准盘。平准基金的盈利还可以划归社保。12 建立金融市场预期管理的长效机制，舆论决定预期，预期决定价格，价格变化决定资本流向，资本流向又决定了经济结构。所以预期管理是一门高超的艺术，我们的股市大幅波动，牛短熊长，说白了就是我们在预期管理上存在着严重的短板，美国这方面水平就高很多。他们甚至会玩数据，先公布一个初值，然后在修订一个终值，这就是在利用初值影响预期，等他修正的时候，已经成了过去时，也就没那么大杀伤力了。所以初值其实就起到了一个过渡的作用。有的时候就是故意公布错误的数据。而我们则比较直，经常自己就把股市给玩崩了。非常耽误事。<br>在这 12 项建议当中，作者还特别强调了两个事，一个是退市，一个是注册制，美国过去 30 年，每年上市两三百家，退市也是两三百家，所以基本上平衡，上市公司一直保持在 4000 家左右。而我们这么多年来， 加起来退市的恐怕都不足百家数量非常少。于是成了一个光吃不拉的貔貅，特别是市场化的自然退市非常的少。退市搞不好，那么想推进市场化上市也就比较艰难。所以股市总是易跌难涨，晴雨表功能和资源配置功能丧失。目前，我们已经开始着手这个事情的改革了。目前已经有创业板实行，20 个交易日内，收盘均价连续低于 1 元面值的，就会自动退市的规定。这条规则已经让不少企业自然退市。</p><p>下面作者又谈了注册制，中国股市最大的缺憾就是 20 年来，没有培养出太多的高科技企业，资源配置能力不强，那些高科技企业，都通过风险投资，募集资金，然后成熟后通过 VIE 结构到海外去上市了。主要是我们的市场不太成熟，没有同股不同权的安排，说白了就是外部投资者，可以分红享受公司成长收益，但是投票权不能太多。公司控制权还是要掌握在创始团队手里，这样人家才愿意上市，因为上市后不会影响企业的经营决策。</p><p>作者还建议，改革公积金，这东西是原来为了支持住房而建立的，现在住房贷款 25.75 万亿，公积金不到 5 万亿，不到 20%，所以作用没那么明显了，如果能够针对特定人群给予一些优惠的利率，基本可以弥补取消公积金带来的 20%的贷款空缺，或者换句话说，作者不是要取消公积金，而是要用优惠的商贷来取代公积金。因为公积金现在效率太差了，每年收益只有 1.5%，还不如银行存款，应该把它用的更有效率，比如变成企业年金，那么这笔钱，大概是 14.6 万亿资金就全都活了。可以补充社保，养老，也可以进市场投资。比如美国的年金收益一般都在 7%左右，他们就是很简单的股债均配组合，股票平均收益 10%，债券 3-4%，所以平均下来就是 7%，所以公积金变成年金之后，效率会大幅提升。作者简单算笔账，一个人 20 万公积金，还有 10 年退休，他最后只能拿回 23 万，而如果是年金运作，最后能拿回 35 万。很多人担心，公积金变年金之后，就拿不到企业缴存的 6%了，这已经成为了一个隐形福利，但这其实就多虑了，年金企业该交还得交，这个福利是不变的。职工只会占便宜，不会吃亏。另外，现在一个重大的问题就是养老保险，再过几十年肯定是不够用的，如果公积金转年金，能产生十几万亿的基数，再好好运作产生增值，将很大限度的弥补养老金不足的情况。至于谁来运作？完全可以交给专业化机构，举个例子，比如黑石和 KKR 为什么规模那么大，就是因为他手里有 60%的各种养老金，所以这种年金制度，其实另一个利好就是，有利于中国大型投资机构的诞生。最近一段时间，很多人对于香港股市跌跌不休都表示担心，但作者却告诉大家，未来香港股市很重要，香港是国际的中国金融中心，而上海是中国的国际金融中心，二者相互互补。境外人民币 50%以上的存量在香港，香港上市企业总市值相当于中国 GDP 的 40%，未来十几年，如果我们的 GDP 持续增长达到 200 亿规模，那么香港将是一个 80 万亿的市场。现在内地企业去港交所上市的比例已经占到了一半。已经成为内地经济和金融市场的桥头堡。也是非常重要的离岸金融中心。所以没啥好担心的。港股近期表现越不好，未来就越有重大机会。<br>下面我们看本书的第四章，数字化重塑经济社会生态，这其中包括云计算，大数据，人工智能和区块链，这块作者肯定是不专业，所以我们就简单来看看，一个官员型经济学者对于这些东西的思考，先说云计算， 3 大特点，数据存储在服务器中，算力也在服务器，然后通过服务器连接终端屏幕，主要是会让效率更高，调动大量的闲置资源。大数据方面，先是要收集信息，然后挖掘信息，最后再通过这些信息作出重大决策，他也是人工智能的基础，人工智能虽然依靠算法，但是更重要的是通过大数据来喂养。没有一定的数据积累，人工智能肯定也是没啥用的。之前有一本书叫做奇点临近，说的是二三十年之后，计算机的算力就能超过人脑的每秒 10 亿亿次，现在更多讨论的话题，也都成了，未来人类会不会被人工智能所圈养，现在各有各的说法，但从科学的角度来说，计算机智慧不断增强，这已经是不争的事实，而人类的大脑却不可能在短期内进化。未来已来，我们走过了互联网时代，正在经历移动互联网时代，而未来将是万物互联的物联网时代。那么这就对于信息记录，提出了更高的要求，区块链也就应运而生，他的主要特点就是分布式记账，农业社会是流水账，工业社会是复式记账，但问题就是容易被篡改，而分布式记账最大的作用就是，每个人都是信息的节点，你要修改一个信息，就要把无数区块里的信息全都改掉，这个难度就变得非常大。所以他也是去中心化的。这就保证了我们的信息安全，数字财产安全。他最大的问题是解决信息不对称的问题，实现多个主体之间的协作信任，这个东西将在金融行业，供应链和物流行业，以及公共服务行业，大有作为。或者说凡是信息不对称，信息容易被篡改的地方，区块链技术，都能有施展的空间。<br>未来的数字化，对于人类社会将有 5 个方面的重大影响。1 颠覆全球个人支付方式，现在其实很多人出门已经不带现金了，支付宝微信已经覆盖了 14 亿人，线上到线下，全都可以通过移动支付完成。我们的移动支付，要远比欧美日更加先进。别小看移动支付，他的最大价值是数据沉淀，通过这些支付数据，完全可以判定每个人的信用，这就为未来的共享经济提供了基础。数字化对我们生活的重大影响，第一个就是颠覆个人支付方式，第二是重塑贸易结算体系，在人民币跨境支付系统，上线之前，人民跨境结算只能依赖美国的 swift 系统和 chips 系统，这存在着明显的风险，这两个系统，也是美国全球霸权的工具之一，2006 年，美国财政部对这两个系统分析，发现欧洲商业银行和伊朗存在资金往来，于是他就以此借口，制裁了欧洲的一些金融机构。2014 年，他又借口把俄罗斯排除在 swift 系统之外，随后导致俄罗斯卢布大幅贬值，所以其实天下苦秦久矣，很多国家都期待能绕过这两个系统的压迫。未来我们肯定还会进一步通过新技术的引进，把人民币跨境支付系统做强做大，做的更有效率。这也是人民币国际化的必由之路。而更多的新技术应用，更多的数据产生，就是我们弯道超车的机会所在。第三是，改变货币发行机制，比如比特币，和脸书发的 Libra，这种基于区块链技术的货币，正在挑战主权货币，但是他其实脱离了主权信用，所以发行无法保证，币值更加无法稳定。难以形成真正的社会财富。他不相信任何民间的数字货币会成功。即便未来有数字货币，也必然是主权数字货币，由政府和央行发行，与主权信用挂钩，与国家的 GDP，财政收入，黄金储备建立适当的比例关系。遏制货币滥发的局面。目前我国央行已经在搞数字货币 DC/EP 的 试点了，他本质上是基于区块链技术推出的全新加密电子货币，人民银行先把数字货币兑给商业银行，然后再有这些机构兑换给公众。他的最终作用会是替代 M0，也就是流通中的货币，更有利于货币流通，以及数据采集。到时候估计贪污也不敢收现金了，收这种数字货币，跟自首差不多。第四是推动智慧城市，智慧城市的基础就是万物互联，5G 物联网，云计算，大数据，人工智能的综合运用，从而提高城市效率。先做到数字化，然后在做到网络化，再到智能化，最后才是智慧化。第五医疗保健会发生根本变化，人类寿命已经在现代医学之下，得到了极大的延长，原来都说人活七十古来稀，但现在平均寿命已经到 70-80 岁，用不了多久，人类的平均数就能过百，甚至更长，奇点临近的书里讲，人类身上的零部件，都是按照 150 岁设计的，死亡通常都是因为某个零部件坏了，从而导致的整体生命终结，如果能够更换零件，那么人类平均寿命至少超过 120 岁。人类现在自身的免疫系统，能让 3 分之一的病不治自愈，还有 3 分之一治了就会好，剩下 3 分之一治了也治不好。未来我们的重点就是让能治愈的 3 分之一效率更高，尽量缩小治不好的那 3 分之一。生命科学现在已经取得了长足进步，甚至已经能在基因上动手脚了。<br>近些年我们经常听到一个词，叫做工业 4.0，工业 1.0 说的是蒸汽机时代，工业 2.0 是电气化时代，工业 3.0 是自动化时代，而工业 4.0，这个说的就是数字化背景之下的工业化，能被称之为工业 4.0 的企业，一般要具有，互联，数据，集成，转型四大特点，充分利用云计算，大数据，物联网，人工智能，工业机器人，智能传感器，智能采集器，智能物流，网络信息安全等，相关技术。比如芯片生产厂，人工现在已经完全操作不了了，一个比指甲还小的芯片，他的整个图纸如果打印出来，都能堆满一个屋子，上面密密麻麻全都是图案，需要有高精尖的光刻机来完成。现在地方上，也要转变思路，以垂直整合的方式，把研发，材料，与零部件制造，物流，仓储，结算，销售等等高端环节，和整机组装制造集中在一个地方，形成整个的产业链条。现在不是一个企业单打独斗的时代了，你如果没有形成产业，即便有优秀的企业，也会被别的地方的产业链吸收走。比如现在深圳就是电子科技产品的产业链集散地，即便美国的公司，生产制造也得到深圳来搞。现在上海把特斯拉搞过去，希望在上海形成一个围绕新能源汽车的全产业链集群。这种东西是很有战斗力的。未来可能会围绕各种产业链打造特色经济，就跟美国一样，一想到航空就是西雅图和休斯敦，一想到文化就是洛杉矶，想到金融是纽约，想到汽车就是底特律。中国未来也是这个路子。把产业链都搞在一起，还有一个好处，那就是会大大降低金融的风险，提高效率，因为所有的信息你都掌握，所有的资金流，你都能够计算，那么无论是股权融资，还是贷款，保理，都会非常简单，也更加的有的放矢。数字化不但对制造企业产业链运行有革命性提升，在物流贸易，金融生产性服务的发展，也能产生催化作用。中国的物流费用大概是 GDP 总量的 15%，每年的物流费用大约是 10 几万亿，如果有了万物互联，在这些运输当中去无缝对接，提升效率，降低的成本也是以万亿计算的。成本下来了，那么整个产业链也就全都会受益。当然在这个过程，也要提出新的要求，比如要防止互联网平台过于庞大，某家企业成为垄断地位。提供平台，又传播信息，还提供金融服务，那就很容易出事。保持一定的合理合法的竞争是很有必要的，特别是在关系到国计民生的产业上。不能让互联网，反而成为制造业数字化发展的阻力。<br>央行现在也在积极的数字化改变，他发行数字货币试点，主要有 5 个动因，1 是替代纸币，降低发行和流通成本，每年 7.7 万亿 M0，涉及 4000 亿张纸，加上防伪技术，相当于每张纸的成本是 1.2 元，如果数字货币替代纸币，那么预计能解约几千亿的成本。2 是促进普惠金融，从全球看，现在还有 50%的成年人没有银行账户，也就是说无法享受到移动支付的便利，而央行的数字货币，基于代币无账户设计，可以让更多的人享受普惠金融的便利，也为老百姓，小微企业，提供多一种选择，跨境支付中，还能降低结算成本。3 助推人民币国际化，打破美国系统垄断，借助人民币跨境结算系统，增加人民币的跨境支付场景及应用。当然，人民币完全国际化，还有待于我们在资本项目下逐步开放。4 应对私人数字货币的挑战，比如比特币这些，5 是提升监管能力，抑制洗钱，反恐怖融资等犯罪活动。纸币毕竟不实名，也无法控制流向，所以在监管上，始终是个盲区。另外，即便搞数字货币，也得需要全面考虑，比如依然需要保留现金支付，不能一刀切，要防止电力中断等极端事件。未来金融科技的发展的重要基础是产业互联网， 金融是服务实体经济的，有什么形态的产业链，就会有什么类型的供应链金融，由于我们的 GDP 基础相当庞大，哪怕提高一点效率，就是几千亿的价值。我们潜力还很巨大，比如中国 GDP 现在是美国的 70%，但美国在产业互联网科技股的市值，大概是中国的 30 倍，目前我们依然没有苹果特斯拉那样的产业互联网巨头企业。而在消费互联网上，我们现在已经做到了极致，所以未来肯定要转，电商，游戏，本地生活服务这块，我们已经基本没有太多空间了。消费互联网和产业互联网如果做个比较，我们可以发现，二者还是有很多不同的，消费互联网做的还是流量变现生意，而产业互联网是要效率提升，把数据变成产品的一部分，我们之前讲过高瓴资本张磊的新书叫做价值，他作为一个资本方，现在做的事情，就是给传统产业，进行数字化赋能。从而产生新的价值，所以他一手抓互联网数据和技术企业，另一手抓传统制造，然后做融合。就比如说，中小微企业融资难题，这是一个巨大的痛点，如何通过产业互联网金融，大数据，降低贷款利率？降低不良率，这就已经是一个万亿级别的市场了。目前两方面在做尝试，一个是在自己的产业链上做金融服务，比如阿里小贷，由于掌握所有的资金数据，所以会提高很多效率。我知道下游已经付款了，上游就可以先把钱贷给你，这样的过桥性质的资金就相对安全的多。另外就是区块链了，希望可以借助这种新技术，改变信用不对称的情况。精准找到合格的借款人。供应链金融，要升级为产业互联网金融，传统供应链金融，本质是通过核心企业信用，弥补产业链上下游中小微企业信用不足的问题，比如阿里系上的中小企业，都可以通过阿里的数据体系来增信，银行只要跟阿里有联系，就可以为上下游产业链提供业务，由阿里担保就可以了。而供应链金融 2.0 模式，核心企业可以对应收账款，应付账款，仓单等信息进行有效管控。供应链 3.0 则是数字金融模式，利用大数据，物联网人工智能和区块链技术，在整个供应链中，获取每个产业链上企业的动态，每时每刻的信用。到了供应链 4.0，就是以产业互联网生态为基础，会将企业像自然人一样，建立人群画像。这标志着金融风控模式的全面转变，以前是押房子押地才能贷款，而之后会以信用数据为核心。不再过分依赖抵押物的价值。这样会让金融的成本大幅降低。<br>下面我们看看，智慧城市建设，智慧城市是 2008 年，IBM 提出的概念，是数字城市与物联网结合的产物，被认为是信息时代城市的大方向，可以提高城镇化质量，让城市的运转更加高效，也可以推动高质量发展，为新经济产业链价值链赋能，为创新提供环境，还能为居民创造高品质的生活，创造万物互联，极大的增强城市信息获取，实时反馈和随时随地的服务能力。<br>作者提出了智慧城市建设要注意的 5 点平衡，1 是功能定位平衡，任何城市都不是孤立存在的，不能再大而全，而要考虑到自身的功能和角色，2 是人口供给平衡，现如今全国有一半人都在迁徙，这就牺牲了很大的幸福感，未来既要让农民工进城落户，扎根城市，也要做出分层，不能全都往北京上海跑。3 是土地房屋供给平衡，城市管理者心里要有数，多少人配多少土地，多少房屋，比如人均 40 平米，那么 1000 万人口，一定要保证 4 亿平米的住房，这才是合理的。又比如 2-3 万的零售额配置 1 平米商铺，每 2 万 GDP 配置 1 平米写字楼，这都是有迹可循的。不能拍脑袋决定。太多了浪费，太少了，就会引起价格飞涨，之前大城市总是希望以房控人，刻意不批土地，结果造成房价飞涨，人口也没控制住。4 是基础设施与公共设施平衡，通过智慧城市建设，解决交通拥堵和环境污染这些城市病。还比如住宅配建车位，每人每天的用水量，垃圾处理量等等，5 是产业布局平衡，产业聚集人口聚集，政府才有收入。基于这几点考虑，智慧城市的建设要坚定市场为导向，自下而上，由点及面的推进，他不适合那种传统的大规划，大方案的办事思路。尊重规律尊重市场，少走弯路，以更低的成本，更高的效率去推进。<br>全球贸易也有数字化趋势，一是产业发展上，传统制造业和服务业，年均增长规模是 2-3%，而战略新兴产业，则以每年 10-15%在增长，包括大数据，云计算，人工智能，互联网这些最前沿的东西，每年更是以 25%的速度在增长，所以其实产业已经发生了重大的变化。二是企业和产业模式上，已经不是企业单打独斗的年代了，现在一些有竞争力的公司，形成了上中下游一体化的产业链集群，而我们现在的贸易结算和清算无法适应这种变化，每年 4 万亿美元的进出口贸易当中，有 1.8 万亿美元的加工贸易结算是离岸金融结算，如果我们的离岸账户能够允许开放，并给与境外自由贸易相同税制的话，就有可能促使跨国公司，将上万亿美元的加工贸易离岸金融结算量回流。第三个问题是以产业链全球一体化，为特征的国际贸易模式要求国际贸易规则也发生相应变革，随着分工越来越细，有些产品可能一道工序就跨越几个国家，所以现在的贸易就是你中有我我中有你。已经不完全是产成品交换了。那么政府关税，也要相应有所调整。第四个问题，就是对接全球标准，包括知识产权，执行规则，环保劳动标准等等。第五个问题，全球服务贸易中有 50%以上已经实现了数字化，超过 12%的跨境货物贸易通过数字化平台实现，预计今后 10-15 年，全球货物贸易呈现 2%左右的增长。服务贸易是 15%的增长，而数字贸易的增长幅度是 25%，所以 20 年以后基本上会各占三分之一。比如北京自贸区成立，将重点发展数字化贸易，所以跨境电商服务和数据服务，这 2 个趋势，已经不可避免。下面我们看大家最为关心的问题，房地产的改革，先来说房地产和实体经济存在的 10 大失衡问题，1 是土地供需失衡，现在每年耕地都在减少，从 80 年代的 23 亿亩，已经减少到现在的 20 亿亩，而按照我们国家的粮食刚性需求来计算，至少需要 17 亿亩，要想过得好一点，在有点蔬菜和水果的需求，那么 20 亿亩自给自足其实也并不富裕。所以之前我们有过一条红线，保障 13 亿人吃饭问题，至少要留 18 亿亩耕地，这是一条底线。然后，城市的土地供给，就越来越紧张，这几年持续下降。而且还得有三分之一用于，农村建设，比如水利高速公路等等，真正用于城市的只有三分之二，而这其中，55%用于公共设施，30%用于工业建设，真正能用于盖房子的只有 15%，在全部的批下来的建设用地中，只占 10%，所以某些重点城市，房子一直非常紧张。而且政府还很晕，他的供地还不是哪里人多，供哪里，有时候还反着来，人越多的地方，他供地越少，美其名曰以房控人。结果大城市一地难求，而三四线土地泛滥。第二个失衡，是土地价格失衡，过去 10 年一线城市，房价至少涨了 10 倍，甚至被一些无良中介和自媒体带节奏，把这个误认为是通胀，告诉你们 M2 涨 10 倍， 房价涨 10 倍，所以 M2 才是真正的通胀率。每年不会低于 10%，但其实，并不是所有商品都在涨，作者说货币膨胀，只是房价上涨的必要非充分条件，他是外部因素而不是内部因素。房价高主要是因为土地价格推动的，有三个因素在叠加起作用，土地招拍挂，本身供应不足，以及旧城改造成本越来越高，所以土地就出现了直线上涨。而越稀缺的东西，就越有炒作资本，所以不光炒房，资本还在炒地皮。第三房地产投资失衡，一个城市的固定资产投资中，房地产投资不应该超过 25%，这个跟一个家庭用于租房的支出，不应该超过月收入的 6 分之一是一致的。买房也一样，如果一个人可以工作 40 年，那么他用 6-7 年的年收入买一套房也是合理的。但是目前，全国 32 个省会城市和直辖市当中，房地产投资连续多年占 GDP 60%以上的有 5 个，占 40%以上的有 16 个，均高于正常水平。这些城市只靠盖房子拉动经济，而产业和基础设施配套，以及工商企业发展根本没有跟上。所以最后就会出现空城和鬼城等现象。第四房地产融资比例失衡，2011 年人民币贷款余额 54.8 万亿，当时房地产贷款只占 20%，而到了 2016 年，这一比例超过了 25%，全国贷款增量的近一半都来自房地产，这就说明房地产已经绑架了太多的金融资源，经济已经脱实向虚了。第五，房地产税费占地方财力比重过高，全国 10 万亿地方税中，40%与房地产有关，加上 3.7 万亿土地出让金，13 万亿地方收入中 8 万亿都跟房地产有关，比例更是达到 61%，政府的活动完全被房地产绑架了。第六，房屋销售租赁比例失衡，欧美国家，租赁房屋基本占了一半，开发商也会留有很大一部分自持物业，然后租给客户。但我们现在 90%的房子都是在买卖，租赁不到 10%，而且对于租客毫无保障，也没有稳定性，租房客还无法享受跟房子捆绑在一起的教育，医疗，户口等公共服务。甚至不能享受城市居民最起码的国民待遇，所以才会疯了心的想买房。第七，房价收入比失衡，刚才也说了六分之一理论，6-7 年的家庭收入就能买房，但现在北上广深杭，基本上得 40 年，所以已经严重透支了居民收入。现在无论是绝对房价还是相对房价，我们都是世界前列。第八个失衡就是房地产内部结构失衡，一二线城市土地供不应求，开发量也就供不应求，库存只有几个月，而有些城市则去化周期已经达到了 3-4 年，所以很显然这是一种资源的错配，作者建议，一定要按照人均 40 平米来给各个城市做土地供给，然后还要考虑现存的土地，做统筹安排，不能不够，也不能严重过剩。最多上下浮动 10-15%，不能由着开发商蛮干。第九，房地产市场秩序失衡，开发商在利益驱动下，将原来的规划的写字楼用地改建为住宅，将原来的容积率不断扩大。甚至还有的开发商把房子切碎了卖，或者搞返祖，实际上其实是揽储行为，还有的开发商在融资的时候，不但向银行借，还借信托，高利贷，甚至跟自己员工募集，有的还会到社会上去发 P2P，这其实性质已经变化了。涉及了金融犯罪。第十，房地产市场调控失衡，经济下行，政府就希望刺激房地产，而到泡沫的时候，政府又希望压一压。所以政府的态度就比较纠结，特别是地方上。总是做做样子，摆摆姿态，其实他们更怕房价大跌，影响自己的收入。那么解决这些问题，该做点什么呢？作者提出了 5 大长效机制，首先就是解决土地问题，控制土地供给总量，土地总量要按照 100 平米每人来控制，这 100 平米是总量，包括了其他的公共配套，而住宅应该是每人 40 平米，作者一直有个观点，就是土地爬行钉住，后发制人，也就是说人口可以先增长，但在后面几年，土地一定要补齐。如果土地跟不上，就肯定会发生资源错配。这里还强调，不能提前给，比如计划增加 300 万人，万一落空，人口没来，甚至人口还流出了，那土地就不能再给。如果按照规划给地，那么各地就都会狮子大开口，乱做规划，乱要土地。所以土地供给必须要慢，但要紧跟。然后还得结构合理，不能太多的工业用地，那样太浪费，容积率平均 1:2 就基本平衡了。此外，还要控制拍卖土地价格，楼面价不要超过当期房价的三分之一，否则就会引起恐慌。警惕地方政府刻意推高房价。特别是在旧城改造成本很高的时候，政府可能就很有动力推高房价，从而防止自己亏本了。长效机制二就是金融，涉房贷款和社会融资的比例一般在 1:3，现在开发商杠杆太高，举个例子，土地价值 10 亿，开发商只拿 3 亿，另外 7 亿找其他金融机构借，然后再把土地抵押给银行，贷款 6-7 亿出来，随着土地升值，开发商还会把土地赎回然后再抵押， 套取更多的钱，整个流程中，杠杆比例能加到 1:9，后来我们也做了调整，买地不许借债，必须用自有资金，这成了一条底线，现在我们看到的更多是开发商联合体拿地，也就是几家开发商凑钱。另外，就是要坚决防止开发商多账户借款，他们经常会通过一些渠道去搞融资，甚至明股实债，高利贷等等，更要管好房地产住房抵押贷款，坚决打击首付贷，然后在贷款政策上，要区别化，首套房 3 成，二套房 5 成以上，3 套房必须全款。要特别防范，一套房子多次抵押的情况，所以必须要做到银行联网。防止客户造假。长效机制三，税收，总的原则是差别化税收，高端有遏制，中端有鼓励，低端有保障，比如别墅就要高税率，还要征收房产税或者物业税，以 1%的税率计算，即便房价能翻倍，在多年的税收下，也会大大降低收益。投机炒房就会 受到抑制。作者建议，房产税要存量和增量一起收，根据房屋价值额度计税，越高档的房子，税率要越高，中低端房屋给予抵扣，让全社会 70-80%的中低端房屋税收压力不大，甚至没有。房产税后 70 年土地到期后，不再二次缴纳出让金。另外就是土地市场增值税，土地增值的越多，说明政府投入越大，增值税率就要越高，这个之前也讲过了。长效机制四，租赁市场，完善公租房体系，保障房体系要至少覆盖 20%的城市人口，按照人均 20 平米来配套。100 万人口的城市，就得有 400 万平米保障，针对城市住房困难户，还得同步配套医院，学校等公共设施。公租房和商品房按照 1:3 的比例来搭配。也不能把公租房变成城市贫民窟，至于租金，大概是家庭年收入的六分之一，物业费是商品房的一半。此外还要培育住房租赁市场，现在这种地价和融资成本，开发商已经不太可能做房子的持有出租者了，租金回报无法抵消资金成本，所以开发商必须要卖房回收成本，政府一方面要降低开发商的杠杆，另一方面要给与利率上的优惠，，让他们去搞长租房。长效机制五，地票制度，这个之前也讲过了，开发商开发一亩土地，就得在其他的地方开发一亩耕地。再配合落户制度，推动农业人口转移入城市，减少农村建设用地，防止农民进城后两头占地的情况。下面，作者还展望了房地产未来的趋势，第一，新房交易规模将逐渐降低，过去 20 年，中国房地产的规模从 1 亿平方米增长到了 17 亿平方米，进入了一个超快的增长周期，那么未来 5-10 年，这个速度肯定不可持续了，甚至每年的新房交易总量都会有所缩减，目前我们城镇化已经提高了不少，住房质量也明显提高，拆旧盖新也已经过了高峰期，所以未来肯定会萎缩。第二，中国房地产建设，以后将集中在三大热点地带。之前我们是全面开花，之后会集中在中心城市，大都市圈，和城市群，我们已经把城市分出了档次，以后可能只有 1000 万人口以上的大城市才会持续扩张。而几百万人口的小城市会出现收缩。人口会加速向省会城市和热点经济圈流动。比如作者说，郑州发展到 2000 万人口，应该不用惊讶。那么在这个过程中，他需要更多的医院，更多的学校。这都是未来城市化的新增长点。以超级大城市为中心，400-500 公里为半径，构建城市群，形成协同发展，这也是我们的新思路，目前南方做的比较好，北方做的很差，长三角和珠三角，甚至成渝板块都有协同效应，但京津冀却始终发展不起来。这么多年依旧是北京一家独大。第三，中国房价平均增速，未来将低于 GDP 增长率，作者判断，未来房价趋于平稳，既不会大涨也不会大跌，房价增长率不高于 GDP，那么也就是说，不会超过一年 6%，将将够资金成本。过去十几年，特大城市房价涨了 10 几倍，主要是供不应求造成的，再加上货币推动，和人民币升值等共同作用之下，出现的不正常现象。未来房住不炒之下，必须要遏制房价过快上涨势头。最终会让房价涨幅，低于收入涨幅。这样才会消除掉炒房的预期。第四，未来十多年，房地产企业数量减少三分之二，2018 年的美国，开发商只有 500 家，而中国我们的开发商有近 10 万家，所以我们的开发商显然太多了，说明行业过热。之所以我们开发商这么多，主要就是一些大开发商，在各地成立了太多的子公司，有的每个县每个区都要成立公司，把房产开发的政绩留在当地。像万科这种企业，底下有上百家子公司。这里面空壳公司也不少，85%的开发，都是头部企业做的。其他的 8 万多家企业，基本上很少有业务。所以不要被一些自媒体带节奏，什么每年死掉几百家开发商，这太正常了。第五，开发商负债率会大幅下降。现在这个行业的总负债率堪称世界之最，2020 年 8 月，我们已经制定了开发商融资的 3 条红线，剔除预收款后的资产负债率不得大于 70%；房企的净负债率不得大于 100%；房企的“现金短债比”小于 1。这三条红线如果都踩到，就会限制融资规模再扩大。开发商已经不可能借新还旧了，到 2023 年实行，所以这几年开发商必然是持续的降低负债的过程。高负债会带来高风险，威胁金融安全，所以这个已经是势在必行。第六，地产企业经营的租售模式会发生明显变化。过去几十年，房地产企业就像皮包公司一样，不断地买地盖房，造了房子以后，尽快卖掉。大家都觉得房价大涨 10 几倍，开发商赚了大钱，但其实并非如此，他们更多的像个贸易公司，买来卖掉，赚个周转的钱，能有 10-15%的回报就不错了，所以房价涨了多少倍，其实开发商可能还没有炒房人赚到的比例更大。有些炒房人，或者囤房的投资客，这些年确实赚了盆满钵满。不过作者也说，这其中有些开发商是老狐狸，他们一边开发，一边炒房，比如李嘉诚 93 年在浦东搞了一块地，自有资金吃下，所以他不着急，2000 年盖好了也不急，竟然要先往外租，到了 2010 年，房价已经从了 1 万变成了 15 万，最后把房子收回来，开始往外卖。这一笔赚了老鼻子钱了。在美国有 50-60%的房产，都是自持物业，用于出租，然后用租金偿还 REITs 利率，这样就把资金回收了，然后资产还留在了自己手里。所以 REITs 是一个很好的为资产证券化工具，相当于用未来的租金收益去搞融资，他这个融资并不是负债，也不需要归还本金，只需要以后把利息还了就行。所以这是一个资产转换。而我们不一样，我们的开发商管银行借来的钱，全都是负债。都要定期还本付息，所以负债率就非常的高，也很容易引发金融风险。作者说，他觉得中国房地产企业，长期持有租赁的比例会持续增加，10 年以后，可能我们的增量结构也是这样的，50%是商品产权房，用于买卖交易，30%是商品租赁房， 20%是政府的保障房，政府也可以借鉴 REITs 的模式，相当于自己不出钱，让投资者出钱，把未来的租金收益，留给投资人就好。面对以上这 6 大趋势，开发商要做出明显的调整，不能再过多的指望银行贷款，应该多从资本市场去想办法，通过租赁和资产证券化，融资租赁，私募股权等等方式去筹措资金，重要的是必须尽快降低企业负债率。<br>而政府方面，对于什么限购，限贷，限价，这些其实都是行政管控，临时为之可以，但是不要成为常态化，手伸的太长，就会降低市场配置资源的力量。所以未来会有六大调控原则。原则 1，管好房地产投资占固定资产的比例，正常在 15%，最高不能超过 25%，避免经济过度依赖房地产，一业兴而百业凋敝。原则 2，房地产企业买地一定不能负债，不能背个银行去搞土地批租，这样地王现象就会大幅减少。地价稳定了房价才能稳定。一般房价是地价的三倍，地价出来之后，就会形成强烈的房价预期，所以这个要引起足够的重视。原则 3，管住地方政府卖地，特别是故意炒高当地的地价。要知道地方为了增加收入，是很有动力这么干的。原则 4，管控好买房杠杆，30%首付， 70-80%的抵押。保护刚需，遏制炒房，特别是第三套房，尽量不要再给按揭。原则 5，总量控制人均居住面积，写字楼和商铺面积，这个之前反复强调了。原则 6，推动住房体系双轨制，住房上，让保障的归保障，商品的归商品，中间不要流通。不要让任何人在保障房上获利。总之我们要让房地产按照经济规律，脚踏实地的发展，如果这样房地产仍然还会是支柱产业，也还会带动每年十几万亿的投资。<br>下面我们来看，国有企业资本运作与地方政府营商环境改善，首先我们要肯定国企的作用，主要有这么几条，1 国企在公共设施和基础设施方面，还是引领和基础性作用，比如高铁这种项目，投入巨大还不怎么赚钱，但对国民经济的拉动巨大，只能国企来做。2 在相关产业为难之际，国企是稳定和中坚力量，3 宏观调控中，国企也是重要力量，是具有传递作用的，4 在国家财政上，扮演者准政府的角色，国企的利益，是财政上的重要补充。5，国企是公有制的主体，扮演着促进社会公平的角色。过去改革开放的 40 年，就是非公经济大发展的 40 年，现在非公经济已经全面超越公有经济，贡献了 50%的税收，60%的经济比重，70%的研发投入，和 80%的劳动力就业，国有经济和民营经济现在成为两大阵营，各自分工。国有企业在不断地改革中，也从各个行业逐渐退出。比如石油加工中，从 85.7%的份额降到了 56%，医药行业中从 40%降到了 8.7%，纺织业更是从 16.6%，降到了 2.3%，2020 年开始，在房地产行业中，国企也要全面退出了。从定位来看，国企现在主要投资那些，周期长，投资体量大，风险高，回报慢的项目，比如基础设施，还有尖端产业。他的作用是铺路，带动民企进入。一旦民企形成很好的产业格局之后，国企就逐渐退出这个领域，把资源都交给市场。作者纠正了一个观念，不是说非公有制经济一直上升才叫好，这几年经常有人说国进民退，依据就是非公经济增长率大幅放缓，作者认为这么判断是不对的，现在我们很多发达地区，非公有制经济比重已经都到了 70%以上，其实很高的比例了，甚至就是天花板了，因为即便美国也达不到 90%。美国基本上收入都是税收，而我们还有很多非税收入，例如土地批租等等，所以我们政府花的钱，占 GDP 的比重更高一些，那么理所应当公有经济占比更大一些。所以两种所有制模式，并不是你死我活的关系，应该共存，各自解决问题。即便在资本主义世界也一样，不可能都是民营经济，比如新加坡，他是典型的资本主义国家，但是国企占了 GDP 的 30%，公有经济占 GDP 的比重更是达到了 48%，如果算上国有控股上市公司或者合资企业的影响力，那么更是能到 60%。比如我们熟悉的淡马锡投资公司，就是一个 4000 亿美元的大国企。他在长达 20 年的运作时间里，平均资本回报率达到了 15%，这个对于国家的贡献率非常大。甚至新加坡因为淡马锡很赚钱，于是他就给国内的企业降低税负。我们也可以学习淡马锡模式，把现有的 60 万亿国有资本运作好。有三分之二可作为产业投资类，三分之一用作资本运营类，也就是说可以拿出 20 万亿来对外投资。投到民企，外资，等等运转效率更高的行业里。成为战略投资者。这几年我们还听说一个词就叫做，国企混改，说白了就是混合所有制改革，让国企不光对外投资成为其他公司的战略投资者，还要引入社会资本，让社会资本成为自己的战略投资者。让股权交叉，放大杠杆，发挥各自优势，形成互补，形成 1+1 大于 2 的效果。有些行业处于市场竞争当中，那么甚至可以完全放手，进行市场化运作，把股权转让给民企，从而实现改制后退出。地方上，也要优化产业结构，围绕战略新兴产业为核心，打造产业链集群，形成自己的特色，发展小微企业，弥补市场短板，坚决去产能，对于僵尸企业，产能过剩，要敢于下死手。旧的不去新的不来，防止劣币驱逐良币。作者说，如果产能过剩 10-20%，往往可以优胜劣汰，如果超过 20%，就会有恶性竞争，如果产能超过 40%，那就泥沙俱下，基本上行业出现整体亏损。所以必须要坚决让僵尸企业出清。另外，地方政府还要积极引导企业创新，搞孵化，但不能简单粗暴。美国之所以孵化能力强，是因为他的孵化器有六个特征，1 是项目甄别，分门别类，2 是培训指导，3 是共享服务，设立实验室和专有设备，4 是股权投资对接，5 是收购转化，帮助他们继续融资，最终上市。6 是资源聚集，孵化器成为了人才交流，技术交流，知识交流的窗口。所以项目孵化，不能简单地理解为，给一个低租金的办公场地，而是要做一个整个产业链的服务对接。当地还要鼓励 VC 和 PE 这些风险投资，特别是对于高科技的风险投资，所得税应该尽量降低，比如按照 15%征收，然后政府出资做好母基金，整合这些当地的风投资源。<br>​ 改善营商环境的关键，三去一降一补中的，降成本和补短板其实都是说的营商环境，主要是降低制度成本，提高办事效率，加强产权保护。做过企业的都知道，在经营过程中，常常要缴纳各种各样的费用，这种费用，对企业是个沉重的负担。还要提高政府办事效率，简政放权，3-5 年前，政府经济类审批事项，就达到 2000 项，而现在已经砍掉了三分之二，仅保留 600 项。效果尤为明显。但显然企业家们觉得还不够，对于继续简政放权的期望还很高。作者说，特别是一些真实的权力，而不是那些可有可无的东西被削减。有些东西企业之前也接触不到，所以你把它砍掉了，企业也完全无感。而一些重要流程，则换汤不换药。正式审批一点都不少。作者说，浙江做的不错，一直提倡办事只要跑一趟的理念，跑一趟并不代表放弃审批，而是把审批并联起来，缩短了流程，加快了速度。不是一个章一个章的盖下去，而是递交一次材料，就把章都盖齐了。之前几年还有一个现象，就是为了招商引资，给予外企优惠待遇，外商的办事效率很高，而国内企业则相对繁琐，所以有人戏称这不是国民待遇，而是超国民待遇。甚至一些地方对民企还很不放心，比如银行贷款给民企，如果出现违约，行长要担责任，而如果要是贷款给国企没收回来，则银行就没啥责任。正因为这种偏见的存在，那么你想想在贷款的时候，大家可能在同一水平线上。公平的竞争。作者说，对于一般的企业应该先办执照再办各种准入证，这样能极大的增加效率，比如饭馆你可以先开门做生意，然后食品安全证什么的再慢慢办也不迟。否则先办证，可能会让很多企业家失去耐心。但也有例外，对于金融企业，社会安全类企业比如加油站，又或者公共服务企业像什么医院学校类的，还是要先办证，先审批再办执照。否则可能会引发大的麻烦。还有一块就是融资成本，这几年融资难融资贵的问题非常突出，地方上应该协助企业做好按个融资渠道的工作，积极的去引导和帮助企业融资，银行贷款占比还是大头，占到 6-7 成，资本市场股权和债权融资，占到 2-3 成，还有 1-2 成可能来自于非银金融系统，这个利率是最高的能到 15-20%。引导融资的原则是，债权和股权应该优先，他们的成本最低，能股权投资的就别借钱，能发债的就别去借贷。还有一个工具是银行间中票，也是一个类似于债券的东西，他由银监会和央行审批，比商业银行利率低 1-2 个百分点。也可以发挥一定的作用。作者说，如果一个地方非银系统融资比例达到 40-50%，那么这个地方都不用调查，就一定知道，营商环境会十分糟糕。此外，政府还要进一步降低物流成本，多建铁路和公路，降低要素成本，比如厂房园区，土地成本等等，用好人才红利，给予人才落户的优惠，也解决人员的安置问题。比如你要能提供班车和宿舍，有的企业招工就会简单的多。<br>下面我们看地方政府招商引资，必须要明确，招商引资不是居高临下的恩赐，也不是跪拜祈求，而是平等的战略伙伴关系，帮助招商对象去解决实际中的一些困难问题，是招商引资能否成功的一个关键点。下面作者提到了 10 种招商引资的方式。第一就是产业链招商，比如本地具有中下游企业，那么就可以去招商上游企业，从而形成产业链集群，比如当年重庆，对于电子产品招商引资，2008 年之前，内陆地区没有电子产业，当时的电子产业只存在于东南沿海，而且主要以加工贸易为主，所以对于运输的要求很高，内陆要运出去需要 2000 多公里，所以企业都不来重庆。后来作者就去找惠普董事长，当时对方的条件是，把订单给重庆，那么重庆要保证 2 年内，在对方厂址 1 小时之内配套 1000 家零部件厂商，形成产业集群。接着他又去找了郭台铭，富士康一看惠普有订单，那么自然也就愿意带着零部件企业去重庆。2 年时间，产业链就形成了，还吸引力惠普之外的 6-7 家知名品牌电脑厂商，现在每年生产电脑 6000 万台，占全球电脑生产总量的三分之一，内陆地区实现了电子产业从无到有的过程。最近一段时间，美国一直要求企业回流，但是进展缓慢，为啥这些企业对自己国家不忠诚，说白了就是美国没有产业链了，所以一个总装厂回归美国，也没啥意义。甚至还会造成成本上的巨大提升。他们还将失去市场的竞争力，所以不是不想走，而是根本走不了。这就是产业链的粘性。第二补短板式的招商，一个企业或产品的发展，需要资本，技术，市场一个都不能少。所以你看看，自己有什么。没什么。通过招商引资，来弥补自己的缺失。还拿重庆举例，当年重庆生产电子产业，但是缺少屏幕，于是他就像京东方招商，交换条件是，帮助京东方筹集资金，允许银行给他贷款 140 个亿。重庆企业再购买他 200 亿的股票，总共帮新东方筹集 340 亿资金。资金刚好是京东方的软肋，所以一拍即合。后来京东方股价涨了一倍多，重庆企业卖掉股票，收回了这 200 亿之外还依然持有大把的京东方股票。可以说，一举多得。第三，因势利导的招商，利用优势资源，实现资源优化配置，比如重庆有页岩气，他们就向石化企业招商。目前重庆已经成了重要的页岩气产区，产量占全国的一半。第四，对赌支持，如果是战略性项目，双方都要设立条件和任务，比如上海引进特斯拉，投资 100 亿美元，前提是特斯拉必须在两年内形成相应的电动车产量，上缴相应的税收。第五，兼并式招商，本地表现不佳的企业，可以通过引入战略投资者，对其进行兼并，从而盘活资源。第六牌照资源补缺式的招商，一些企业愿意到当地发展，但也会提出一些条件，主要是牌照上的要求，地方政府可以帮助企业申请相关牌照，从而吸引这些企业来落户。比如有的大厂一年几千亿产值，他就需要一个财务公司牌照，方便他调配资金。那么地方政府刚好可以去帮助他跟央行和银监会沟通。谁帮他解决问题，他就会选择把产业落在哪里。第七，PPP 项目招商，允许社会资本参与政府公共服务，比如地铁项目，环保项目，一些高收益项目，政府可以跟企业约定收益比例。广泛吸纳社会资金。第八，产业引导基金，具有四两拨千斤的功效，一般会产生 1:3 或者 1:4 的杠杆，比如政府出资 30 亿，凭借其良好的信用，能够吸收 100 多亿的社会资本参与，整个投资基金最高可达到 150 亿，这些钱可以投资于那些科学技术企业，扶持产业发展。等产业成熟了，政府产业基金就可以退出了，让社会资本接盘，或者把股权增值部分返给创始团队。产业引导基金的目的，并不是赚大钱，而是扶持产业，所以他其实会做很多活雷锋的事情。第九，问题导向的招商，比如重庆发展电子产业之后，就要建设销售通路，满足几千万台产品，对北美，亚洲和欧洲的分销，他们称之为渝新欧国际联运大通道，运输价格降到最低，效率尽可能提高。1.2 万公里的距离，集装箱运输，6000 美金就能送到。比从深圳和上海走都要便宜。第十，争取国家特定政策，国家会有一些新区，开发区，特区，自贸区，保税区等实行各种税收优惠，这对于招商引资也非常重要，比如重庆对于外资采用 15%的企业所得税，这比其他地区的 25%都要便宜，但并不违规，是利用了西部大开发的所得税优惠政策。帮助企业合理避税，这也是地方政府应该干的事情。<br>下面我们看本书的最后一部分，也是比较敏感的一个话题，叫做全面开放，应对国际新格局。改革开放 40 年，我们取得了巨大的成就，开放倒逼改革，我们充分体会了那句话，越开放也就越繁荣。特别是南北经济的重大对比，已经非常说明问题，更开放的南方经济越来越发达，而以重工业为主，计划经济根深蒂固，相对闭塞的北方经济，则越来越收缩。人口也加速南移。</p><p>​ 一直以来我们都是加工贸易换汇，然后回来建设家乡的思路，获得了巨大的发展，但是后来麻烦来了，特别是 2008 年金融危机以后，越来越多的摩擦开始出现，我们也成为了世界第二大经济体，劳动人口也过了红利拐点，每年减少 300 万劳动力，经济减速不可避免，这几年我们 GDP 从 11%降低到了 6%，一般来说 GDP 每下降 1%，就会产生，200 万失业人口。另外，土地成本越来越高，生产要素成本也越来越高，所以对外出口的优势现在已经荡然无存，那么我们该怎么应对现在这个新的局面。作者提出，首先，中国开放，不再以出口导向为主，而是要出口和进口一起鼓励。原来我们的顺差达到了 5000 多亿美元，现在虽然进出口总量的基数继续扩大，但是顺差已经明显下降，我们必须要明确一个观念，出口大国不一定是经济强国，他可能是卖原材料，卖农副产品。但是进口大国一定是经济强国，进口国才意味着消费能力强，有强大的外汇支付能力，也有商品的定价权。货币影响力非常的大。中国现在正在朝着这方面发展，我们进口膨胀的过程当中，人民币跨境结算也大幅提升。现在已经一年 7 万亿美元了。10 年前才只有几百亿。第二，中国从引进外资为主，转变为鼓励中国企业出去投资，最近几年，中国平均每年引进外资 1300 亿美元，目前出去的量已经开始超过进来的量。特别是最近 5 年，出海投资的总额已经超过了过去 33 年的总和。第三，过去我们只在沿海开放，未来会实现全面开放。现在这些发达城市，基本都得益于 80 年代的沿海开放城市计划，5 大特区都在沿海，之后的几个新区也都在沿海，2010 年以前，70 多个保税区都跟中西部无关，之后才开始陆续开放。其中重庆就在 2010 年后批了 7 个保税区。然后就是自贸区也是全面获批。中西部比沿海地区批的还多。可见我们也已经看到了，南北经济和东西经济的不均衡。第四，产业开放，从工商业为主，也将全方位开放，包括金融和服务，外资保险和外资银行，外资券商最近全面获批。我们正在补齐金融开放的短板。越来越多的外资投资者进入国内。第五，从适应国际惯例，开始参与制定规则，之前我们加入 WTO，现在我们正在推进改革 WTO，还在倡导一带一路，这个规则完全由我们自己说了算。‘接下来，我们的工作重点，依旧要刺激进口，削减顺差，鼓励老百姓多买进口货，不必到欧美日采购然后自己再背回来，数据显示每年这种旅游购物差不多是 1500 亿美元，如果这 1500 亿放到贸易里，削减顺差，我们受到的摩擦就会少很多。所以把关税降下来。其实就能解决问题。虽然我们这些年关税已经降低了很多，但依旧还不够。面对这几年的中美摩擦问题，我们接下来要打好这么几张牌，第一要明确中美贸易摩擦是必然的，长期的，也是复杂的，中美问题不是谁一手导演的，我们也不能一味委曲求全，美国为了自己的地位，也必然对竞争对手毫不留情。当年对于日本，就签署了广场协议，让日本经济一蹶不振，无力再参与竞争。这段历史告诉我们，无论怎么友好，在利益面前，都是没用的。原来美国愿意帮我们发展，因为我们太渺小，79 年我们的 GDP 只占美国的 4%，到了 2019 年我们已经达到了美国的 66%，如果速度继续保持，不用很长，2030 年，中国 GDP 就将超过美国。美国将让出全球第一的位置，那么美元到时候还能不能作为全球货币，美国还能否对全球商品有定价权，也就不一定了，到时候他那么多的债务，多达 28 万亿美元，可能就会一下出问题，所以这是对美国经济生死存亡的 10 年。所以他必然跟你对抗。延缓中国增长的速度，甚至在政策上孤立我们。作者说，联邦政府债务余额如果超过美国 GDP 的 150%，美债发行就会陷入困难，美元就会产生严重的信任危机，按照美国的制度，他的税收只占 GDP 的 30%，其中州政府还要拿走 12%，留给联邦政府的只有 18%，如果联邦政府债务是 150%，按照 10 年偿还本息，每年本金就是 15%，再加上 3%的利息就是 18%，所以谁都会算清楚这笔账，到那时候，大家就都心里清楚，你已经不可能还清欠债了。所以想再借钱，就会十分困难。而现在美国联邦政府债务，已经到了 GDP 的 110%，所以已经十分临近这个拐点。而为了遏制疫情，美国今年债务额度还在继续扩大。2020 年可能会出现一个让人惊讶的数字。但好在还不是常态。所以理解了美国这种生死存亡的窘境，我们就知道，他也是被逼无奈，一定会跟我们抢资源。无论是川总还是登哥，谁上台都是一样。所以我们才说，中美之间的冲突是必然的也是长期的，至少在未来的 10 年会不间断的出现。中美两国其实也压根分不开，美国有最大的金融资本，而中国有最大的市场，美国有高科技成果，中国则有规模化制造产业链，美国是农业生产国，中国是农业消费国，美国人爱消费，中国人爱储蓄等等。另外，从过去 20 年来看，中美之间一遇到危机，基本能够团结一致，而一旦岁月安好，就开始摩擦。所以我们不要怕什么美股下跌，美国摊上大事之后，对于中国来说反而是个好机会。<br>在未来，中美之间可能会有持续的摩擦出现，作者给归纳了 5 种打法，1 是关税战，相互加征关税，2 是壁垒战，比如断供芯片，停止进口等等。3 是汇率战，4 是金融战，5 是长臂管辖战。目前我们刚打到壁垒战，孟晚舟被抓是长臂管辖的开始，而汇率战和金融战，还没有见识过。但是当年日本和东南亚，以及我们的中国香港出现过这种危机。我们应该好好总结，看未来该如何应对索罗斯这种金融大鳄。在作者看来，我们手上还有五张王牌，1 是市场王牌，14 亿人口，全球最大消费市场，我们已经从世界工厂变成了世界市场，贸易吞吐量惊人，任何一个国家，任何一个企业，都不敢放弃。就好比你觉得微信不好，不用微信了一样，人家只是失去了一个用户，而你失去的是整个关系网。就比如芯片，全球生产了一共 5000 亿美元的芯片，其中 3000 亿卖给了中国，我们占了全球市场的 60%，其余 2000 亿美元，也是在中国深加工之后，再返销回各国市场。要想掐断中国芯片供给谈何容易，这么多企业 7 成都得破产。波士顿咨询就做过研究，他说中美如果就芯片脱钩，那么美国芯片行业将引发螺旋式衰退，而中国芯片 73%能找到替代品 。况且欧日韩这些国家，为了巨大的利益，也未必会听美国号令。第二张王牌更厉害，产业链是王牌中的王牌，2019 年，全球贸易当中 70%都是中间品贸易，也就是说一个产成品，他需要跨越无数国家，无数道工序。不再由单一企业和地区负责。在产成品上面，叠加了无数的服务贸易，40 年前服务贸易和货物贸易的比例是 1:19，而现在是 3:7，可见服务贸易占比大幅提高。这也就意味着分工越来越细致。对于产业链的要求越来越高。比如一部苹果手机，涉及 1000 多个零部件，几百家供应商，涉及几十个国家。苹果公司虽然是产业链的核心，但是他并不控制产业链，也不是他来组织生产。这些工序都是由代工企业完成的。所以苹果手机只能在中国生产，美国人自己干不了。这些产业链都是在全球分工中自发产生的，不以人的意志为转移，所以重塑成本极高，甚至不可能。比如美国对中国加征 5500 亿美元进口商品的关税，其中 1400 亿是美国消费者自己承担的，也就是说压根没有替代品，所以我们会把提高的关税，转嫁给消费者。另外，里面还有 3000 亿美元的商品，是美国企业自己在中国的布局，而只有 2000 亿美元，是我们应该谈判的。我们即便不卖到美国，往别的国家，大部分也能卖的掉。所以其实美国加征关税这招，根本伤不到我们。反而容易炸到他自己。另外，中国也会反击，打的都是他的农产品，虽然规模没他那么大，但是农产品这东西替代品多，而且产业链短，对美国杀伤的更直接。一旦互相加征关税，中国确实有影响，一些零部件厂子会关闭，工人下岗，损失几千亿出口。世界其他国家也会受损失。但损失最大的就是苹果这样的美国企业，他们每年上千亿美元的利益就泡汤了。甚至连产品都做不出来了，所以现在这种产业链交织在一起的现代工业体系下，贸易战已经不是一个好的选择。因为产业链顶端的龙头企业损失会更大，而这些企业恰恰都是美国公司。我们手上的第三张牌是金融，金融是盾牌，金融市场上，我们并不够强，也并不具备攻击性，尽管有着全世界最大规模的银行，但服务基本立足于本土，并没有对外作战的能力。如果发起金融战，我们可能只能处于防守状态，所以这就要求我们，要高筑墙，广积粮，自己先进行拆弹，把那些可以被引爆的危险品，什么房产泡沫，或者是坏账，高杠杆，不能给对手形成打击的机会。另外，在汇率上我们也要格外小心，不能给对方一些借口，把我们列为汇率操纵国。这个事还是挺重要的，一旦被列为操纵国。美国的所有银行保险，将不得为我们这些企业提供融资和保险，美国资本市场也将彻底对中国企业关闭。还会调降我们的主权信用评级，甚至一些企业，还会被美国罚款。Swift 结算系统，也将关闭。所以这种金融制裁，是非常严厉的。而美国其实一直就在挑中国的毛病，他们现在也是再考虑，综合评定损失，如果对我们进行制裁，对他们自己的影响恐怕也不小。我们的应对之道，就是要推进人民币国际化，全面实现人民币跨境结算，人民币的影响力越大，美国的顾忌就会越多，也就越不敢发动金融战，汇率战。所以结论可能跟某些人想的刚好相反，有些人认为，既然外部不友好，我们干脆关门打狗，不跟他们接触，或者少接触。但其实你越孤立，人家就越好对你下手，我们必须要坚持对外开放，把金融开放的越大，对方越不好下手。举个简单的例子，在金融上，对方有飞机和大炮，而我们还都是轻武器，最简单的办法就是冲下去，跟对方的军队搅在一起，那么对手的飞机大炮也就都用不上了。第四张牌是科技，提高自身的科技水平，和加大研发投入这才是根本之道。目前我们国家，研发投入占 GDP 的比重只有 2.2%，大概是 2 万亿左右，而美国的研发投入占了 4%，超过 5 亿人民币，绝对量是我们的 2.5 倍，所以我们才会感受到，基础性研发方面，跟美国存在着实质性的差距。另外就是我们的生产力转化，依然很低，发达国家创新成果转化率在 40%，而我们只有 10%，这主要是因为我们的激励机制不同，投资者只拥有知识产权的 30%，而 70%都在发明者身上，这样大家就没什么动力，继续投产，把他产业化。而美国的分配比例是，发明人，投资者和专利转化人各占三分之一，这个专利转化人呢，是一个分享者的角色。他们频繁往返于大学校园，跟各种发明创造者进行沟通。而我们国家，现在这个角色明显缺失。好多发明专利人，自己去跑市场，难度不是一般的大。这帮发明者，多数都是学者身份，做学问还行，但是跑市场，实在是很吃力。很多好东西，最后也无法实现产业化。这种转化人，其实很多都是早期私募股权的人在承担这个角色，我们私募股权不发达，也就导致了转换人缺失，之所以私募股权不发达，就是因为资本市场分层建设的不好，比如新三板已经变成了一个垃圾堆，我们的做法是把新三板分层，做个精选层出来，作者不理解，他觉得还不如让那些企业退市。如果新三板不减负的话，那么这个版块都会完蛋。包括科创板也一样，如果不能解决退市问题的话，长期也会遭遇新三板的宿命。第五张牌叫做开放，当年北约和华约两大阵营之争，华约主要就输在了市场上面，当时苏联不可谓不先进，在军工和航天科技上甚至力压美国。但是始终无法解决市场销路问题，所以最后难逃经济崩溃，东欧剧变的结果。我们要吸取这个教训，实现全面开放。广泛的争取合作伙伴。不断地降低关税，增加和世界的交流，WTO 之前，很多人担忧，如果降低关税，是不是会对我们的产业形成影响，会不会让很多企业都死掉。大家也都喊狼来了，但我们还是顶着压力这么干了，将关税从 40%，降到了 15%，现在已经降到了 7.4%，未来可能降到 5%以下，而在这个过程当中，我们打造出了很多全球领先的产业链。在一些行业中，已经具备全球统治力，相反在一些高关税行业，或者没怎么开放的行业中，大部分企业反而出了问题。未来在贸易上，我们要重点补齐服务贸易的短板，之前提了，这几年产业链越来越细化，服务贸易比重越来越大。目前我们在服务贸易上的逆差很大，近 3000 亿美元，全球第一，占全球服务贸易逆差的 40%，说明我们购买的服务很多，基本上输出不了什么服务。比如金融，保险，运输，教育，卫生，文化创意这些东西，我们还不具备全球竞争力。<br>那么如何解决呢？就是要坚持继续开放，多建自贸区，自贸区对标的是自由贸易协定 FTA，他是国家与国家之间，通过协议实现的 6 个方面整体的自由贸易，包括，贸易自由，投资自由，资金流动自由，货物进出自由，人员就业自由和进出自由，数字经济的数据自由。自贸区的作用体现在这么几方面，税收优惠，比如服务贸易实行 5 年 15%的企业所得税，并视情况实行两免三减半，或者是五免五减半的政策，对于高端人才，所得税也降低。还有就是对于货物的流转，建立负面清单，快速审核的手续。为金融结算提供便利。营商环境确保国际化，法制化，公开化，并加强知识产权保护，生态环境保护等等。最后作者还说了一下内循环，完整的内循环体系，重点不在内需，而在于内需体系。要稳定市场预期，提高投资的积极性。企业家愿不愿意扩大再生产，这个跟大环境有关，要警惕那些企业总资产增加，但净资产不增加的情况，说明负债在扩大。有的企业有利润，但是净资产在减少，说明企业实际在亏损，或者转移财产。这次疫情企业损失惨重，所以下一步一定要继续减轻企业的税费负担，解决融资难融资贵的痛点，营造公平的营商环境等等。<br>另外，我们还要提高资源配置的效率，扩大就业和居民收入，毕竟有钱了才能扩大消费。未来我们用好 14 亿人口，4 亿中产的大市场，光靠自身的内循环就能拉动经济实现百分之几的增长，同时我们也不要忘了国际国内双循环，还要增加进口，拉动其他国家的产业链。实现国际大循环。从企业端来说，还是要加大创新的力度，未来我们至少有一个事是可以干，而且很有潜力的，那就是对于传统经济，进行数字化改造和赋能。比如把我们现在的冰箱洗衣机空调，电视机全都实现联网，这就是一个巨大的工程。而在联网的过程中，会产生很多新的需求。物联网预计未来 5 年至少将有 30-50 亿个终端联网，投资规模将达到 2-3 万亿。人工智能和区块链也将是万亿级的市场。另外，城市群和都市圈，西部大开发，都将带动城镇化继续发展，京津冀，长三角，粤港澳，长江中游，成渝板块，这些已经发展的很好的都市圈，已经证明了这一切，带来了十万亿的红利。作者说，现如今南北差距和东西差距，依然很大，西部和北方仍有巨大的潜力可以挖。之前有个笑话，说东北越振兴，海南的房价就越涨。说的就是很多人把振兴都中饱私囊，带着钱去海南买房了。所以这是个很严重的问题。不光是政策的事，可能得从体制上彻底扭转。作者提出，在减税方面应该降低所得税率，现在 45%的个人所得税率实在是太高了，企业所得税 25%，也不低！这就造成了一些高收入人群，要么移民，要么把企业迁到中国香港或者新加坡这些地方，最后造成的结果是，我们的所得税率很高，但是却收不上什么钱。他建议个人所得税最高税率，应该至少降到 25%，从而扩大税基。让更多的人交税。没准还能多收点。另外就是提高资源效率，比如路网效率不高，造成了城市拥堵，汽车不得不限购，很多人想买也买不了，汽车产业关系着我们很多条产业链，所以加大城市路网建设，以及数据化赋能，再把多余的写字楼拿出来改成停车楼，这样也能促进内循环。再有就是增加社会事业性支出，比如医疗，教育，租赁住房，这些地方还是有很大需求的。也将成为未来的增长点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;黄奇帆是唯一一个既有过实践，又懂理论的学者型官员，或者现在叫做官员型学者。&lt;br&gt;本书分为七大章节，1 是深入推进供给侧改革，第二章，去杠杆防范金融风险，第三章新时代资本市场的高质量发展之路，第四章数字化重塑经济社会生态，第五章也是大家最关心的问题，房地产长效机制建设，第六</summary>
      
    
    
    
    <category term="economics" scheme="https://github.com/categories/economics/"/>
    
    
  </entry>
  
</feed>
